(()=>{"use strict";var __webpack_modules__={773:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Matrix = void 0;\nclass Matrix {\n}\nexports.Matrix = Matrix;\n/**\n * n x m matrix transposes to an m x n\n */\nMatrix.transpose = (A) => {\n    var _a;\n    const n = A.length || 0;\n    const m = (_a = A[0]) === null || _a === void 0 ? void 0 : _a.length;\n    const A_t = Identity_3x3();\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            A_t[j][i] = A[i][j];\n        }\n    }\n    return A_t;\n};\n/**\n * Return inverse of a matrix (if invertible)\n * Throws if matrix not invertible.\n */\nMatrix.inv = (A) => {\n    const res = Identity_3x3();\n    const [[a, b, c], [d, e, f], [h, i, j]] = A;\n    const det = a * e * j - a * f * i - b * d * j + b * f * h + c * d * i - c * e * h;\n    if (det === 0) {\n        throw new Error("Matrix not invertible");\n    }\n    const detInv = 1 / det;\n    res[0][0] = detInv * (e * j - f * i);\n    res[0][1] = detInv * (c * i - b * j);\n    res[0][2] = detInv * (b * f - c * e);\n    res[1][0] = detInv * (f * h - d * j);\n    res[1][1] = detInv * (a * j - c * h);\n    res[1][2] = detInv * (c * d - a * f);\n    res[2][0] = detInv * (d * i - e * h);\n    res[2][1] = detInv * (b * h - a * i);\n    res[2][2] = detInv * (a * e - b * d);\n    return res;\n};\nMatrix.multiply_3x3_times_triple = (A, x) => {\n    const [[a, b, c], [d, e, f], [g, h, i]] = A;\n    const [t, u, v] = x;\n    return [\n        a * t + b * u + c * v,\n        d * t + e * u + f * v,\n        g * t + h * u + i * v,\n    ];\n};\nMatrix.multiply_triple_times_3x3 = (x, A) => {\n    const [t, u, v] = x;\n    const [[a, b, c], [d, e, f], [g, h, i]] = A;\n    return [\n        a * t + d * u + g * v,\n        b * t + e * u + h * v,\n        c * t + f * u + i * v,\n    ];\n};\nMatrix.multiply_3x3_times_3x3 = (A, B) => {\n    const [[a, b, c], [d, e, f], [g, h, i]] = A;\n    const [[j, k, l], [m, n, o], [p, q, r]] = B;\n    return [\n        [a * j + b * m + c * p, a * k + b * n + c * q, a * l + b * o + c * r],\n        [d * j + e * m + f * p, d * k + e * n + f * q, d * l + e * o + f * r],\n        [g * j + h * m + i * p, g * k + h * n + i * q, g * l + h * o + i * r],\n    ];\n};\nconst Identity_3x3 = () => [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzczLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQix3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb2xvdXItYmxpbmQtc2ltdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2NpZS1jb2xvcmNvbnZlcnRlci9kaXN0L01hdHJpeC5qcz80NmZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYXRyaXggPSB2b2lkIDA7XG5jbGFzcyBNYXRyaXgge1xufVxuZXhwb3J0cy5NYXRyaXggPSBNYXRyaXg7XG4vKipcbiAqIG4geCBtIG1hdHJpeCB0cmFuc3Bvc2VzIHRvIGFuIG0geCBuXG4gKi9cbk1hdHJpeC50cmFuc3Bvc2UgPSAoQSkgPT4ge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBuID0gQS5sZW5ndGggfHwgMDtcbiAgICBjb25zdCBtID0gKF9hID0gQVswXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aDtcbiAgICBjb25zdCBBX3QgPSBJZGVudGl0eV8zeDMoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG07IGorKykge1xuICAgICAgICAgICAgQV90W2pdW2ldID0gQVtpXVtqXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQV90O1xufTtcbi8qKlxuICogUmV0dXJuIGludmVyc2Ugb2YgYSBtYXRyaXggKGlmIGludmVydGlibGUpXG4gKiBUaHJvd3MgaWYgbWF0cml4IG5vdCBpbnZlcnRpYmxlLlxuICovXG5NYXRyaXguaW52ID0gKEEpID0+IHtcbiAgICBjb25zdCByZXMgPSBJZGVudGl0eV8zeDMoKTtcbiAgICBjb25zdCBbW2EsIGIsIGNdLCBbZCwgZSwgZl0sIFtoLCBpLCBqXV0gPSBBO1xuICAgIGNvbnN0IGRldCA9IGEgKiBlICogaiAtIGEgKiBmICogaSAtIGIgKiBkICogaiArIGIgKiBmICogaCArIGMgKiBkICogaSAtIGMgKiBlICogaDtcbiAgICBpZiAoZGV0ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hdHJpeCBub3QgaW52ZXJ0aWJsZVwiKTtcbiAgICB9XG4gICAgY29uc3QgZGV0SW52ID0gMSAvIGRldDtcbiAgICByZXNbMF1bMF0gPSBkZXRJbnYgKiAoZSAqIGogLSBmICogaSk7XG4gICAgcmVzWzBdWzFdID0gZGV0SW52ICogKGMgKiBpIC0gYiAqIGopO1xuICAgIHJlc1swXVsyXSA9IGRldEludiAqIChiICogZiAtIGMgKiBlKTtcbiAgICByZXNbMV1bMF0gPSBkZXRJbnYgKiAoZiAqIGggLSBkICogaik7XG4gICAgcmVzWzFdWzFdID0gZGV0SW52ICogKGEgKiBqIC0gYyAqIGgpO1xuICAgIHJlc1sxXVsyXSA9IGRldEludiAqIChjICogZCAtIGEgKiBmKTtcbiAgICByZXNbMl1bMF0gPSBkZXRJbnYgKiAoZCAqIGkgLSBlICogaCk7XG4gICAgcmVzWzJdWzFdID0gZGV0SW52ICogKGIgKiBoIC0gYSAqIGkpO1xuICAgIHJlc1syXVsyXSA9IGRldEludiAqIChhICogZSAtIGIgKiBkKTtcbiAgICByZXR1cm4gcmVzO1xufTtcbk1hdHJpeC5tdWx0aXBseV8zeDNfdGltZXNfdHJpcGxlID0gKEEsIHgpID0+IHtcbiAgICBjb25zdCBbW2EsIGIsIGNdLCBbZCwgZSwgZl0sIFtnLCBoLCBpXV0gPSBBO1xuICAgIGNvbnN0IFt0LCB1LCB2XSA9IHg7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgYSAqIHQgKyBiICogdSArIGMgKiB2LFxuICAgICAgICBkICogdCArIGUgKiB1ICsgZiAqIHYsXG4gICAgICAgIGcgKiB0ICsgaCAqIHUgKyBpICogdixcbiAgICBdO1xufTtcbk1hdHJpeC5tdWx0aXBseV90cmlwbGVfdGltZXNfM3gzID0gKHgsIEEpID0+IHtcbiAgICBjb25zdCBbdCwgdSwgdl0gPSB4O1xuICAgIGNvbnN0IFtbYSwgYiwgY10sIFtkLCBlLCBmXSwgW2csIGgsIGldXSA9IEE7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgYSAqIHQgKyBkICogdSArIGcgKiB2LFxuICAgICAgICBiICogdCArIGUgKiB1ICsgaCAqIHYsXG4gICAgICAgIGMgKiB0ICsgZiAqIHUgKyBpICogdixcbiAgICBdO1xufTtcbk1hdHJpeC5tdWx0aXBseV8zeDNfdGltZXNfM3gzID0gKEEsIEIpID0+IHtcbiAgICBjb25zdCBbW2EsIGIsIGNdLCBbZCwgZSwgZl0sIFtnLCBoLCBpXV0gPSBBO1xuICAgIGNvbnN0IFtbaiwgaywgbF0sIFttLCBuLCBvXSwgW3AsIHEsIHJdXSA9IEI7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgW2EgKiBqICsgYiAqIG0gKyBjICogcCwgYSAqIGsgKyBiICogbiArIGMgKiBxLCBhICogbCArIGIgKiBvICsgYyAqIHJdLFxuICAgICAgICBbZCAqIGogKyBlICogbSArIGYgKiBwLCBkICogayArIGUgKiBuICsgZiAqIHEsIGQgKiBsICsgZSAqIG8gKyBmICogcl0sXG4gICAgICAgIFtnICogaiArIGggKiBtICsgaSAqIHAsIGcgKiBrICsgaCAqIG4gKyBpICogcSwgZyAqIGwgKyBoICogbyArIGkgKiByXSxcbiAgICBdO1xufTtcbmNvbnN0IElkZW50aXR5XzN4MyA9ICgpID0+IFtcbiAgICBbMSwgMCwgMF0sXG4gICAgWzAsIDEsIDBdLFxuICAgIFswLCAwLCAxXSxcbl07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///773\n')},564:(__unused_webpack_module,exports,__webpack_require__)=>{eval('var __webpack_unused_export__;\n\n// See http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html for details on these computations.\n__webpack_unused_export__ = ({ value: true });\nexports.N = void 0;\nconst Matrix_1 = __webpack_require__(773);\nclass ColorConverter {\n    // Constructor\n    constructor({ RefWhite = "D50", RgbModel = "sRGB", GammaModel = "sRGB", Adaptation = "Bradford", } = {}) {\n        // Properties to be set on instantiation\n        this.RefWhite = "D50";\n        this.RgbModel = "sRGB";\n        this.GammaModel = "sRGB";\n        this.Adaptation = "Bradford";\n        this.kE = 216 / 24389;\n        this.kK = 24389 / 27;\n        this.RefWhite = RefWhite;\n        this.RgbModel = RgbModel;\n        this.GammaModel = GammaModel;\n        this.Adaptation = Adaptation;\n    }\n    // Computed: RefWhite Matrix\n    get Mtx_RefWhite() {\n        switch (this.RefWhite) {\n            case "A":\n                return [1.0985, 1, 0.35585];\n            case "B":\n                return [0.99072, 1, 0.85223];\n            case "C":\n                return [0.98074, 1, 1.18232];\n            case "D50":\n                return [0.96422, 1, 0.82521];\n            case "D55":\n                return [0.95682, 1, 0.92149];\n            case "D65":\n                return [0.95047, 1, 1.0888];\n            case "D75":\n                return [0.94972, 1, 1.22638];\n            case "E":\n                return [1, 1, 1];\n            case "F2":\n                return [0.99186, 1, 0.67393];\n            case "F7":\n                return [0.95041, 1, 1.08747];\n            case "F11":\n                return [1.00962, 1, 0.6435];\n            default:\n                return [1, 1, 1];\n        }\n    }\n    // Computed: RefWhite RGB Matrix\n    get Mtx_RefWhiteRGB() {\n        switch (this.RgbModel) {\n            case "Adobe RGB (1998)":\n                return [0.95047, 1, 1.08883];\n            case "AppleRGB":\n                return [0.95047, 1, 1.08883];\n            case "Best RGB":\n                return [0.96422, 1, 0.82521];\n            case "Beta RGB":\n                return [0.96422, 1, 0.82521];\n            case "Bruce RGB":\n                return [0.95047, 1, 1.08883];\n            case "CIE RGB":\n                return [1, 1, 1];\n            case "ColorMatch RGB":\n                return [0.96422, 1, 0.82521];\n            case "Don RGB 4":\n                return [0.96422, 1, 0.82521];\n            case "ECI RGB v2":\n                return [0.96422, 1, 0.82521];\n            case "Ekta Space PS5":\n                return [0.96422, 1, 0.82521];\n            case "NTSC RGB":\n                return [0.98074, 1, 1.18232];\n            case "PAL/SECAM RGB":\n                return [0.95047, 1, 1.08883];\n            case "ProPhoto RGB":\n                return [0.96422, 1, 0.82521];\n            case "SMPTE-C RGB":\n                return [0.95047, 1, 1.08883];\n            case "sRGB":\n                return [0.95047, 1, 1.08883];\n            case "Wide Gamut RGB":\n                return [0.96422, 1, 0.82521];\n        }\n    }\n    // Computed: GammaRGB + Index\n    get GammaRGB() {\n        switch (this.RgbModel) {\n            case "Adobe RGB (1998)":\n                return { value: 2.2, index: 2 };\n            case "AppleRGB":\n                return { value: 1.8, index: 1 };\n            case "Best RGB":\n                return { value: 2.2, index: 2 };\n            case "Beta RGB":\n                return { value: 2.2, index: 2 };\n            case "Bruce RGB":\n                return { value: 2.2, index: 2 };\n            case "CIE RGB":\n                return { value: 2.2, index: 2 };\n            case "ColorMatch RGB":\n                return { value: 1.8, index: 2 };\n            case "Don RGB 4":\n                return { value: 2.2, index: 2 };\n            case "ECI RGB v2":\n                return { value: 0, index: 4 };\n            case "Ekta Space PS5":\n                return { value: 2.2, index: 2 };\n            case "NTSC RGB":\n                return { value: 2.2, index: 2 };\n            case "PAL/SECAM RGB":\n                return { value: 2.2, index: 2 };\n            case "ProPhoto RGB":\n                return { value: 1.8, index: 1 };\n            case "SMPTE-C RGB":\n                return { value: 2.2, index: 2 };\n            case "sRGB":\n                return { value: -2.2, index: 3 };\n            case "Wide Gamut RGB":\n                return { value: 2.2, index: 2 };\n        }\n    }\n    // Computed: Gamma value\n    get Gamma() {\n        switch (this.GammaModel.toString()) {\n            case "1.0":\n                return 1;\n            case "1.8":\n                return 1.8;\n            case "2.2":\n                return 2.2;\n            case "sRGB":\n                return -2.2;\n            case "L*":\n                return 0;\n            default:\n                return 1;\n        }\n    }\n    // Computed: RGB to XYZ matrix\n    // Values come from table on http://www.brucelindbloom.com/\n    get Mtx_RGB2XYZ() {\n        let xr, yr, xg, yg, xb, yb;\n        switch (this.RgbModel) {\n            case "Adobe RGB (1998)": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.21, 0.71, 0.15, 0.06];\n                break;\n            }\n            case "AppleRGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.625, 0.34, 0.28, 0.595, 0.155, 0.07];\n                break;\n            }\n            case "Best RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.7347, 0.2653, 0.215, 0.775, 0.13, 0.035];\n                break;\n            }\n            case "Beta RGB": {\n                [xr, yr, xg, yg, xb, yb] = [\n                    0.6888, 0.3112, 0.1986, 0.7551, 0.1265, 0.0352,\n                ];\n                break;\n            }\n            case "Bruce RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.28, 0.65, 0.15, 0.06];\n                break;\n            }\n            case "CIE RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.735, 0.265, 0.274, 0.717, 0.167, 0.009];\n                break;\n            }\n            case "ColorMatch RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.63, 0.34, 0.295, 0.605, 0.15, 0.075];\n                break;\n            }\n            case "Don RGB 4": {\n                [xr, yr, xg, yg, xb, yb] = [0.696, 0.3, 0.215, 0.765, 0.13, 0.035];\n                break;\n            }\n            case "ECI RGB v2": {\n                [xr, yr, xg, yg, xb, yb] = [0.67, 0.33, 0.21, 0.71, 0.14, 0.08];\n                break;\n            }\n            case "Ekta Space PS5": {\n                [xr, yr, xg, yg, xb, yb] = [0.695, 0.305, 0.26, 0.7, 0.11, 0.005];\n                break;\n            }\n            case "NTSC RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.67, 0.33, 0.21, 0.71, 0.14, 0.08];\n                break;\n            }\n            case "PAL/SECAM RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.29, 0.6, 0.15, 0.06];\n                break;\n            }\n            case "ProPhoto RGB": {\n                [xr, yr, xg, yg, xb, yb] = [\n                    0.7347, 0.2653, 0.1596, 0.8404, 0.0366, 0.0001,\n                ];\n                break;\n            }\n            case "SMPTE-C RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.63, 0.34, 0.31, 0.595, 0.155, 0.07];\n                break;\n            }\n            case "sRGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];\n                break;\n            }\n            case "Wide Gamut RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.735, 0.265, 0.115, 0.826, 0.157, 0.018];\n                break;\n            }\n        } // End switch\n        let X_r = xr / yr, Y_r = 1, Z_r = (1 - xr - yr) / yr, X_g = xg / yg, Y_g = 1, Z_g = (1 - xg - yg) / yg, X_b = xb / yb, Y_b = 1, Z_b = (1 - xb - yb) / yb, RW_RGB = this.Mtx_RefWhiteRGB, X_W = RW_RGB[0], Y_W = RW_RGB[1], Z_W = RW_RGB[2];\n        let [S_r, S_g, S_b] = Matrix_1.Matrix.multiply_3x3_times_triple(Matrix_1.Matrix.inv([\n            [X_r, X_g, X_b],\n            [Y_r, Y_g, Y_b],\n            [Z_r, Z_g, Z_b],\n        ]), [X_W, Y_W, Z_W]);\n        return Matrix_1.Matrix.transpose([\n            [S_r * X_r, S_g * X_g, S_b * X_b],\n            [S_r * Y_r, S_g * Y_g, S_b * Y_b],\n            [S_r * Z_r, S_g * Z_g, S_b * Z_b],\n        ]);\n    } // End Mtx_RGB2XYZ\n    // Computed: Matrix Adaptaion\n    get MtxAdp() {\n        switch (this.Adaptation) {\n            case "Bradford": {\n                return [\n                    [0.8951, -0.7502, 0.0389],\n                    [0.2664, 1.7135, -0.0685],\n                    [-0.1614, 0.0367, 1.0296],\n                ];\n            }\n            case "von Kries": {\n                return [\n                    [0.40024, -0.2263, 0],\n                    [0.7076, 1.16532, 0],\n                    [-0.08081, 0.0457, 0.91822],\n                ];\n            }\n            case "XYZ Scaling":\n            case "None": {\n                return [\n                    [1, 0, 0],\n                    [0, 1, 0],\n                    [0, 0, 1],\n                ];\n            }\n        }\n    } // End matrix Adaptation\n    /**\n     *\n     * @param {number} linear Linear value\n     * @param {number} Gamma Gamma value\n     */\n    compand(linear) {\n        let G = this.Gamma;\n        // Depends on sign of Gamma\n        if (G > 0) {\n            return linear >= 0 ? Math.pow(linear, 1 / G) : -Math.pow(-linear, 1 / G);\n        }\n        else if (G < 0) {\n            /** sRGB */\n            let sign = 1;\n            if (linear < 0) {\n                sign = -1;\n                linear = -linear;\n            }\n            return (sign *\n                (linear <= 0.0031308\n                    ? linear * 12.92\n                    : 1.055 * Math.pow(linear, 1.0 / 2.4) - 0.055));\n        }\n        else {\n            /** L* */\n            let sign = 1;\n            if (linear < 0) {\n                sign = -1;\n                linear = -linear;\n            }\n            return (sign *\n                (linear <= 216.0 / 24389.0\n                    ? (linear * 24389.0) / 2700.0\n                    : 1.16 * Math.pow(linear, 1.0 / 3.0) - 0.16));\n        }\n    }\n    /**\n     * Inverse compand function\n     * @param {number} companded Companded value\n     */\n    inverse_compand(companded) {\n        let G = this.Gamma;\n        if (G > 0) {\n            return companded >= 0 ? Math.pow(companded, G) : -Math.pow(-companded, G);\n        }\n        else if (G < 0) {\n            /** sRGB */\n            let sign = 1;\n            if (companded < 0) {\n                sign = -1;\n                companded = -companded;\n            }\n            return (sign *\n                (companded <= 0.04045\n                    ? companded / 12.92\n                    : Math.pow((companded + 0.055) / 1.055, 2.4)));\n        }\n        else {\n            /** L* */\n            let sign = 1;\n            if (companded < 0) {\n                sign = -1;\n                companded = -companded;\n            }\n            return (sign *\n                (companded <= 0.08\n                    ? (2700.0 * companded) / 24389.0\n                    : (((1000000.0 * companded + 480000.0) * companded + 76800.0) *\n                        companded +\n                        4096.0) /\n                        1560896.0));\n        }\n    }\n    /**\n     * Convert XYZ triple to RGB: ✅\n     * @param {[number, number, number]} XYZ triple in range [0, 1]\n     * Outputs RGB triple in range [0, 255]\n     */\n    XYZ_to_RGB(XYZ) {\n        let XYZd = XYZ;\n        if (this.Adaptation != "None") {\n            // Get source/domain scale factors\n            let [As, Bs, Cs] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhite, this.MtxAdp);\n            let [Ad, Bd, Cd] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhiteRGB, this.MtxAdp);\n            XYZd = Matrix_1.Matrix.multiply_triple_times_3x3(XYZ, Matrix_1.Matrix.multiply_3x3_times_3x3(this.MtxAdp, Matrix_1.Matrix.multiply_3x3_times_3x3([\n                [Ad / As, 0, 0],\n                [0, Bd / Bs, 0],\n                [0, 0, Cd / Cs],\n            ], Matrix_1.Matrix.inv(this.MtxAdp))));\n        }\n        let RGB = Matrix_1.Matrix.multiply_triple_times_3x3(XYZd, Matrix_1.Matrix.inv(this.Mtx_RGB2XYZ));\n        return RGB.map((v) => 255 * this.compand(v));\n    } // End XYZ_to_RGB\n    /**\n     * Convert RGB tripe to XYZ: ✅\n     * @param {number[]} RGB RGB Triple\n     * NOTE: This assumes RGB is scaled from [0, 255], XYZ in [0, 1]\n     */\n    RGB_to_XYZ(RGB) {\n        // Inverse compound the values\n        RGB = RGB.map((v) => this.inverse_compand(v / 255));\n        // Linear RGB to XYZ\n        let XYZ = Matrix_1.Matrix.multiply_triple_times_3x3(RGB, this.Mtx_RGB2XYZ);\n        // Adaptation if necessary\n        if (this.Adaptation != "None") {\n            // Get source/domain scale factors\n            let [As, Bs, Cs] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhiteRGB, this.MtxAdp);\n            let [Ad, Bd, Cd] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhite, this.MtxAdp);\n            return Matrix_1.Matrix.multiply_triple_times_3x3(XYZ, Matrix_1.Matrix.multiply_3x3_times_3x3(this.MtxAdp, Matrix_1.Matrix.multiply_3x3_times_3x3([\n                [Ad / As, 0, 0],\n                [0, Bd / Bs, 0],\n                [0, 0, Cd / Cs],\n            ], Matrix_1.Matrix.inv(this.MtxAdp))));\n        }\n        else {\n            return XYZ;\n        }\n    } // End RGB to XYZ\n    /**\n     * Convert Lab to XYZ\n     * @param Lab Lab triple\n     * XYZ in range [0, 1]\n     */\n    Lab_to_XYZ(Lab) {\n        let L = Lab[0], a = Lab[1], b = Lab[2], f_y = (L + 16) / 116, f_x = a / 500 + f_y, f_z = f_y - b / 200, x_r = Math.pow(f_x, 3) > this.kE\n            ? Math.pow(f_x, 3)\n            : (116 * f_x - 16) / this.kK, y_r = L > this.kK * this.kE ? Math.pow((L + 16) / 116, 3) : L / this.kK, z_r = Math.pow(f_z, 3) > this.kE\n            ? Math.pow(f_z, 3)\n            : (116 * f_z - 16) / this.kK, RefWhite = this.Mtx_RefWhite;\n        return [x_r * RefWhite[0], y_r * RefWhite[1], z_r * RefWhite[2]];\n    } // End Lab to XYZ\n    /**\n     * Converts Lab triple to XYZ tripe in range [0, 1]\n     * @param XYZ XYZ triple\n     */\n    XYZ_to_Lab(XYZ) {\n        let X = XYZ[0], Y = XYZ[1], Z = XYZ[2], RefWhite = this.Mtx_RefWhite, X_r = RefWhite[0], Y_r = RefWhite[1], Z_r = RefWhite[2], x_r = X / X_r, y_r = Y / Y_r, z_r = Z / Z_r, f_x = x_r > this.kE ? Math.pow(x_r, 1 / 3) : (this.kK * x_r + 16) / 116, f_y = y_r > this.kE ? Math.pow(y_r, 1 / 3) : (this.kK * y_r + 16) / 116, f_z = z_r > this.kE ? Math.pow(z_r, 1 / 3) : (this.kK * z_r + 16) / 116;\n        return [116 * f_y - 16, 500 * (f_x - f_y), 200 * (f_y - f_z)];\n    } // End XYZ_to_Lab\n    /**\n     * Convert Lab to RGB\n     * @param Lab Lab triple\n     * Note: RGB in [0, 255]\n     */\n    Lab_to_RGB(Lab) {\n        return this.XYZ_to_RGB(this.Lab_to_XYZ(Lab));\n    }\n    /**\n     * Convert RGB to Lab\n     * @param RGB RGB triple in range [0, 255]\n     */\n    RGB_to_Lab(RGB) {\n        return this.XYZ_to_Lab(this.RGB_to_XYZ(RGB));\n    }\n    /**\n     * Convert xyY triple to XYZ triple\n     * @param xyY xyY triple\n     */\n    xyY_to_XYZ(xyY) {\n        let [x, y, Y] = xyY;\n        if (y < 0.000001) {\n            return [0, 0, 0];\n        }\n        else {\n            return [(x * Y) / y, Y, ((1 - x - y) * Y) / y];\n        }\n    } // End xyY_to_XYZ\n    /**\n     * Convert XYZ to xyY\n     * @param XYZ XYZ triple in [0, 1]\n     */\n    XYZ_to_xyY(XYZ) {\n        let [X, Y, Z] = XYZ, Den = X + Y + Z;\n        // Non-zero Den:\n        if (Den > 0) {\n            return [X / Den, Y / Den, Y];\n        }\n        // Zero den\n        else {\n            let [RW_X, RW_Y, RW_Z] = this.Mtx_RefWhite, RW_Den = RW_X + RW_Y + RW_Z;\n            return [RW_X / RW_Den, RW_Y / RW_Den, Y];\n        }\n    }\n    /**\n     * Lab triple to LCH triple\n     * @param Lab Lab triple\n     */\n    Lab_to_LCHab(Lab) {\n        let [L, a, b] = Lab;\n        let H = (180 / Math.PI) * Math.atan2(b, a);\n        return [\n            L,\n            Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)),\n            H + (H >= 0 ? 0 : 360),\n        ];\n    }\n    /**\n     * LCH triple to Lab triple\n     * @param LCH LCH Triple\n     */\n    LCHab_to_Lab(LCH) {\n        let [L, C, H] = LCH;\n        return [\n            L,\n            C * Math.cos((H * Math.PI) / 180),\n            C * Math.sin((H * Math.PI) / 180),\n        ];\n    }\n    /**\n     * @param XYZ XYZ Triple\n     */\n    XYZ_to_LCHab(XYZ) {\n        return this.Lab_to_LCHab(this.XYZ_to_Lab(XYZ));\n    }\n    /**\n     * @param XYZ XYZ Triple\n     */\n    XYZ_to_Luv(XYZ) {\n        let [X, Y, Z] = XYZ, RefWhite = this.Mtx_RefWhite, X_r = RefWhite[0], Y_r = RefWhite[1], Z_r = RefWhite[2], Den = X + 15 * Y + 3 * Z, up = Den > 0 ? (4 * X) / Den : 0, vp = Den > 0 ? (9 * Y) / Den : 0, urp = (4 * X_r) / (X_r + 15 * Y_r + 3 * Z_r), vrp = (9 * Y_r) / (X_r + 15 * Y_r + 3 * Z_r), yr = Y / Y_r, L = yr > this.kE ? 116 * Math.pow(yr, 1 / 3) - 16 : this.kK * yr;\n        return [L, 13 * L * (up - urp), 13 * L * (vp - vrp)];\n    }\n    /**\n     * @param XYZ XYZ triple\n     */\n    XYZ_to_LCHuv(XYZ) {\n        return this.Luv_to_LCHuv(this.XYZ_to_Luv(XYZ));\n    }\n    /**\n     * Luv to LCHuv\n     * @param Luv Luv triple\n     */\n    Luv_to_LCHuv(Luv) {\n        let [L, u, v] = Luv;\n        let H = (180 / Math.PI) * Math.atan2(v, u);\n        return [\n            L,\n            Math.sqrt(Math.pow(u, 2) + Math.pow(v, 2)),\n            H + (H >= 0 ? 0 : 360),\n        ];\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_Lab(xyY) {\n        return this.XYZ_to_Lab(this.xyY_to_XYZ(xyY));\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_LCHab(xyY) {\n        return this.Lab_to_LCHab(this.XYZ_to_Lab(this.xyY_to_XYZ(xyY)));\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_Luv(xyY) {\n        return this.XYZ_to_Luv(this.xyY_to_XYZ(xyY));\n    }\n    /**\n     * @param xyY xyY triple\n     */\n    xyY_to_LCHuv(xyY) {\n        return this.Luv_to_LCHuv(this.XYZ_to_Luv(this.xyY_to_XYZ(xyY)));\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_RGB(xyY) {\n        return this.XYZ_to_RGB(this.xyY_to_XYZ(xyY));\n    }\n    /**\n     * @param Lab Lab triple\n     */\n    Lab_to_xyY(Lab) {\n        return this.XYZ_to_xyY(this.Lab_to_XYZ(Lab));\n    }\n    /**\n     * @param Lab Lab triple\n     */\n    Lab_to_Luv(Lab) {\n        return this.XYZ_to_Luv(this.Lab_to_XYZ(Lab));\n    }\n    /**\n     * @param Lab Lab triple\n     */\n    Lab_to_LCHuv(Lab) {\n        return this.Luv_to_LCHuv(this.Lab_to_Luv(Lab));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_XYZ(LCH) {\n        return this.Lab_to_XYZ(this.LCHab_to_Lab(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_xyY(LCH) {\n        return this.XYZ_to_xyY(this.Lab_to_XYZ(this.LCHab_to_Lab(LCH)));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_Luv(LCH) {\n        return this.XYZ_to_Luv(this.Lab_to_XYZ(this.LCHab_to_Lab(LCH)));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_LCHuv(LCH) {\n        return this.Luv_to_LCHuv(this.LCHab_to_Luv(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_RGB(LCH) {\n        return this.XYZ_to_RGB(this.LCHab_to_XYZ(LCH));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_XYZ(Luv) {\n        let [L, u, v] = Luv;\n        let Y = L > this.kK * this.kE ? Math.pow((L + 16) / 116, 3) : L / this.kK;\n        let RefWhite = this.Mtx_RefWhite, X_r = RefWhite[0], Y_r = RefWhite[1], Z_r = RefWhite[2], Den = X_r + 15 * Y_r + 3 * Z_r, v_0 = (9 * Y_r) / Den, u_0 = (4 * X_r) / Den, d = Y * ((39 * L) / (v + 13 * L * v_0) - 5), c = -1 / 3, b = -5 * Y, a = (1 / 3) * ((52 * L) / (u + 13 * L * u_0) - 1), X = (d - b) / (a - c), Z = X * a + b;\n        return [X, Y, Z];\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_xyY(Luv) {\n        return this.XYZ_to_xyY(this.Luv_to_XYZ(Luv));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_Lab(Luv) {\n        return this.XYZ_to_Lab(this.Luv_to_XYZ(Luv));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_LCHab(Luv) {\n        return this.Lab_to_LCHab(this.Luv_to_Lab(Luv));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_RGB(Luv) {\n        return this.XYZ_to_RGB(this.Luv_to_XYZ(Luv));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_Luv(LCH) {\n        let [L, C, H] = LCH;\n        return [\n            L,\n            C * Math.cos((H * Math.PI) / 180),\n            C * Math.sin((H * Math.PI) / 180),\n        ];\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_XYZ(LCH) {\n        return this.Luv_to_XYZ(this.LCHuv_to_Luv(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_xyY(LCH) {\n        return this.XYZ_to_xyY(this.LCHuv_to_XYZ(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_Lab(LCH) {\n        return this.XYZ_to_Lab(this.LCHuv_to_XYZ(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_LCHab(LCH) {\n        return this.Lab_to_LCHab(this.LCHuv_to_Lab(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_RGB(LCH) {\n        return this.XYZ_to_RGB(this.LCHuv_to_XYZ(LCH));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_xyY(RGB) {\n        return this.XYZ_to_xyY(this.RGB_to_XYZ(RGB));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_LCHab(RGB) {\n        return this.Lab_to_LCHab(this.RGB_to_Lab(RGB));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_Luv(RGB) {\n        return this.XYZ_to_Luv(this.RGB_to_XYZ(RGB));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_LCHuv(RGB) {\n        return this.Luv_to_LCHuv(this.RGB_to_Luv(RGB));\n    }\n} // End class definition\nexports.N = ColorConverter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTY0LmpzIiwibWFwcGluZ3MiOiI7QUFBYTtBQUNiO0FBQ0EsNkJBQTZDLEVBQUUsYUFBYSxDQUFDO0FBQzdELFNBQXNCO0FBQ3RCLGlCQUFpQixtQkFBTyxDQUFDLEdBQVU7QUFDbkM7QUFDQTtBQUNBLGtCQUFrQixxRkFBcUYsSUFBSTtBQUMzRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDBCQUEwQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRixTQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbG91ci1ibGluZC1zaW11bGF0b3IvLi9ub2RlX21vZHVsZXMvY2llLWNvbG9yY29udmVydGVyL2Rpc3QvaW5kZXguanM/ZjhmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8vIFNlZSBodHRwOi8vd3d3LmJydWNlbGluZGJsb29tLmNvbS9pbmRleC5odG1sP0Vxbl9DaHJvbUFkYXB0Lmh0bWwgZm9yIGRldGFpbHMgb24gdGhlc2UgY29tcHV0YXRpb25zLlxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xvckNvbnZlcnRlciA9IHZvaWQgMDtcbmNvbnN0IE1hdHJpeF8xID0gcmVxdWlyZShcIi4vTWF0cml4XCIpO1xuY2xhc3MgQ29sb3JDb252ZXJ0ZXIge1xuICAgIC8vIENvbnN0cnVjdG9yXG4gICAgY29uc3RydWN0b3IoeyBSZWZXaGl0ZSA9IFwiRDUwXCIsIFJnYk1vZGVsID0gXCJzUkdCXCIsIEdhbW1hTW9kZWwgPSBcInNSR0JcIiwgQWRhcHRhdGlvbiA9IFwiQnJhZGZvcmRcIiwgfSA9IHt9KSB7XG4gICAgICAgIC8vIFByb3BlcnRpZXMgdG8gYmUgc2V0IG9uIGluc3RhbnRpYXRpb25cbiAgICAgICAgdGhpcy5SZWZXaGl0ZSA9IFwiRDUwXCI7XG4gICAgICAgIHRoaXMuUmdiTW9kZWwgPSBcInNSR0JcIjtcbiAgICAgICAgdGhpcy5HYW1tYU1vZGVsID0gXCJzUkdCXCI7XG4gICAgICAgIHRoaXMuQWRhcHRhdGlvbiA9IFwiQnJhZGZvcmRcIjtcbiAgICAgICAgdGhpcy5rRSA9IDIxNiAvIDI0Mzg5O1xuICAgICAgICB0aGlzLmtLID0gMjQzODkgLyAyNztcbiAgICAgICAgdGhpcy5SZWZXaGl0ZSA9IFJlZldoaXRlO1xuICAgICAgICB0aGlzLlJnYk1vZGVsID0gUmdiTW9kZWw7XG4gICAgICAgIHRoaXMuR2FtbWFNb2RlbCA9IEdhbW1hTW9kZWw7XG4gICAgICAgIHRoaXMuQWRhcHRhdGlvbiA9IEFkYXB0YXRpb247XG4gICAgfVxuICAgIC8vIENvbXB1dGVkOiBSZWZXaGl0ZSBNYXRyaXhcbiAgICBnZXQgTXR4X1JlZldoaXRlKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuUmVmV2hpdGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJBXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsxLjA5ODUsIDEsIDAuMzU1ODVdO1xuICAgICAgICAgICAgY2FzZSBcIkJcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWzAuOTkwNzIsIDEsIDAuODUyMjNdO1xuICAgICAgICAgICAgY2FzZSBcIkNcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWzAuOTgwNzQsIDEsIDEuMTgyMzJdO1xuICAgICAgICAgICAgY2FzZSBcIkQ1MFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbMC45NjQyMiwgMSwgMC44MjUyMV07XG4gICAgICAgICAgICBjYXNlIFwiRDU1XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFswLjk1NjgyLCAxLCAwLjkyMTQ5XTtcbiAgICAgICAgICAgIGNhc2UgXCJENjVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWzAuOTUwNDcsIDEsIDEuMDg4OF07XG4gICAgICAgICAgICBjYXNlIFwiRDc1XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFswLjk0OTcyLCAxLCAxLjIyNjM4XTtcbiAgICAgICAgICAgIGNhc2UgXCJFXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsxLCAxLCAxXTtcbiAgICAgICAgICAgIGNhc2UgXCJGMlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbMC45OTE4NiwgMSwgMC42NzM5M107XG4gICAgICAgICAgICBjYXNlIFwiRjdcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWzAuOTUwNDEsIDEsIDEuMDg3NDddO1xuICAgICAgICAgICAgY2FzZSBcIkYxMVwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbMS4wMDk2MiwgMSwgMC42NDM1XTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsxLCAxLCAxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDb21wdXRlZDogUmVmV2hpdGUgUkdCIE1hdHJpeFxuICAgIGdldCBNdHhfUmVmV2hpdGVSR0IoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5SZ2JNb2RlbCkge1xuICAgICAgICAgICAgY2FzZSBcIkFkb2JlIFJHQiAoMTk5OClcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWzAuOTUwNDcsIDEsIDEuMDg4ODNdO1xuICAgICAgICAgICAgY2FzZSBcIkFwcGxlUkdCXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFswLjk1MDQ3LCAxLCAxLjA4ODgzXTtcbiAgICAgICAgICAgIGNhc2UgXCJCZXN0IFJHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbMC45NjQyMiwgMSwgMC44MjUyMV07XG4gICAgICAgICAgICBjYXNlIFwiQmV0YSBSR0JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWzAuOTY0MjIsIDEsIDAuODI1MjFdO1xuICAgICAgICAgICAgY2FzZSBcIkJydWNlIFJHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbMC45NTA0NywgMSwgMS4wODg4M107XG4gICAgICAgICAgICBjYXNlIFwiQ0lFIFJHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbMSwgMSwgMV07XG4gICAgICAgICAgICBjYXNlIFwiQ29sb3JNYXRjaCBSR0JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWzAuOTY0MjIsIDEsIDAuODI1MjFdO1xuICAgICAgICAgICAgY2FzZSBcIkRvbiBSR0IgNFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbMC45NjQyMiwgMSwgMC44MjUyMV07XG4gICAgICAgICAgICBjYXNlIFwiRUNJIFJHQiB2MlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbMC45NjQyMiwgMSwgMC44MjUyMV07XG4gICAgICAgICAgICBjYXNlIFwiRWt0YSBTcGFjZSBQUzVcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWzAuOTY0MjIsIDEsIDAuODI1MjFdO1xuICAgICAgICAgICAgY2FzZSBcIk5UU0MgUkdCXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFswLjk4MDc0LCAxLCAxLjE4MjMyXTtcbiAgICAgICAgICAgIGNhc2UgXCJQQUwvU0VDQU0gUkdCXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFswLjk1MDQ3LCAxLCAxLjA4ODgzXTtcbiAgICAgICAgICAgIGNhc2UgXCJQcm9QaG90byBSR0JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gWzAuOTY0MjIsIDEsIDAuODI1MjFdO1xuICAgICAgICAgICAgY2FzZSBcIlNNUFRFLUMgUkdCXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFswLjk1MDQ3LCAxLCAxLjA4ODgzXTtcbiAgICAgICAgICAgIGNhc2UgXCJzUkdCXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIFswLjk1MDQ3LCAxLCAxLjA4ODgzXTtcbiAgICAgICAgICAgIGNhc2UgXCJXaWRlIEdhbXV0IFJHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiBbMC45NjQyMiwgMSwgMC44MjUyMV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQ29tcHV0ZWQ6IEdhbW1hUkdCICsgSW5kZXhcbiAgICBnZXQgR2FtbWFSR0IoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5SZ2JNb2RlbCkge1xuICAgICAgICAgICAgY2FzZSBcIkFkb2JlIFJHQiAoMTk5OClcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogMi4yLCBpbmRleDogMiB9O1xuICAgICAgICAgICAgY2FzZSBcIkFwcGxlUkdCXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IDEuOCwgaW5kZXg6IDEgfTtcbiAgICAgICAgICAgIGNhc2UgXCJCZXN0IFJHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiAyLjIsIGluZGV4OiAyIH07XG4gICAgICAgICAgICBjYXNlIFwiQmV0YSBSR0JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogMi4yLCBpbmRleDogMiB9O1xuICAgICAgICAgICAgY2FzZSBcIkJydWNlIFJHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiAyLjIsIGluZGV4OiAyIH07XG4gICAgICAgICAgICBjYXNlIFwiQ0lFIFJHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiAyLjIsIGluZGV4OiAyIH07XG4gICAgICAgICAgICBjYXNlIFwiQ29sb3JNYXRjaCBSR0JcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogMS44LCBpbmRleDogMiB9O1xuICAgICAgICAgICAgY2FzZSBcIkRvbiBSR0IgNFwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiAyLjIsIGluZGV4OiAyIH07XG4gICAgICAgICAgICBjYXNlIFwiRUNJIFJHQiB2MlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiAwLCBpbmRleDogNCB9O1xuICAgICAgICAgICAgY2FzZSBcIkVrdGEgU3BhY2UgUFM1XCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IDIuMiwgaW5kZXg6IDIgfTtcbiAgICAgICAgICAgIGNhc2UgXCJOVFNDIFJHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiAyLjIsIGluZGV4OiAyIH07XG4gICAgICAgICAgICBjYXNlIFwiUEFML1NFQ0FNIFJHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiAyLjIsIGluZGV4OiAyIH07XG4gICAgICAgICAgICBjYXNlIFwiUHJvUGhvdG8gUkdCXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IDEuOCwgaW5kZXg6IDEgfTtcbiAgICAgICAgICAgIGNhc2UgXCJTTVBURS1DIFJHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiAyLjIsIGluZGV4OiAyIH07XG4gICAgICAgICAgICBjYXNlIFwic1JHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiAtMi4yLCBpbmRleDogMyB9O1xuICAgICAgICAgICAgY2FzZSBcIldpZGUgR2FtdXQgUkdCXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IDIuMiwgaW5kZXg6IDIgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBDb21wdXRlZDogR2FtbWEgdmFsdWVcbiAgICBnZXQgR2FtbWEoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5HYW1tYU1vZGVsLnRvU3RyaW5nKCkpIHtcbiAgICAgICAgICAgIGNhc2UgXCIxLjBcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIGNhc2UgXCIxLjhcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4gMS44O1xuICAgICAgICAgICAgY2FzZSBcIjIuMlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAyLjI7XG4gICAgICAgICAgICBjYXNlIFwic1JHQlwiOlxuICAgICAgICAgICAgICAgIHJldHVybiAtMi4yO1xuICAgICAgICAgICAgY2FzZSBcIkwqXCI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIENvbXB1dGVkOiBSR0IgdG8gWFlaIG1hdHJpeFxuICAgIC8vIFZhbHVlcyBjb21lIGZyb20gdGFibGUgb24gaHR0cDovL3d3dy5icnVjZWxpbmRibG9vbS5jb20vXG4gICAgZ2V0IE10eF9SR0IyWFlaKCkge1xuICAgICAgICBsZXQgeHIsIHlyLCB4ZywgeWcsIHhiLCB5YjtcbiAgICAgICAgc3dpdGNoICh0aGlzLlJnYk1vZGVsKSB7XG4gICAgICAgICAgICBjYXNlIFwiQWRvYmUgUkdCICgxOTk4KVwiOiB7XG4gICAgICAgICAgICAgICAgW3hyLCB5ciwgeGcsIHlnLCB4YiwgeWJdID0gWzAuNjQsIDAuMzMsIDAuMjEsIDAuNzEsIDAuMTUsIDAuMDZdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIkFwcGxlUkdCXCI6IHtcbiAgICAgICAgICAgICAgICBbeHIsIHlyLCB4ZywgeWcsIHhiLCB5Yl0gPSBbMC42MjUsIDAuMzQsIDAuMjgsIDAuNTk1LCAwLjE1NSwgMC4wN107XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiQmVzdCBSR0JcIjoge1xuICAgICAgICAgICAgICAgIFt4ciwgeXIsIHhnLCB5ZywgeGIsIHliXSA9IFswLjczNDcsIDAuMjY1MywgMC4yMTUsIDAuNzc1LCAwLjEzLCAwLjAzNV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiQmV0YSBSR0JcIjoge1xuICAgICAgICAgICAgICAgIFt4ciwgeXIsIHhnLCB5ZywgeGIsIHliXSA9IFtcbiAgICAgICAgICAgICAgICAgICAgMC42ODg4LCAwLjMxMTIsIDAuMTk4NiwgMC43NTUxLCAwLjEyNjUsIDAuMDM1MixcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIkJydWNlIFJHQlwiOiB7XG4gICAgICAgICAgICAgICAgW3hyLCB5ciwgeGcsIHlnLCB4YiwgeWJdID0gWzAuNjQsIDAuMzMsIDAuMjgsIDAuNjUsIDAuMTUsIDAuMDZdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIkNJRSBSR0JcIjoge1xuICAgICAgICAgICAgICAgIFt4ciwgeXIsIHhnLCB5ZywgeGIsIHliXSA9IFswLjczNSwgMC4yNjUsIDAuMjc0LCAwLjcxNywgMC4xNjcsIDAuMDA5XTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJDb2xvck1hdGNoIFJHQlwiOiB7XG4gICAgICAgICAgICAgICAgW3hyLCB5ciwgeGcsIHlnLCB4YiwgeWJdID0gWzAuNjMsIDAuMzQsIDAuMjk1LCAwLjYwNSwgMC4xNSwgMC4wNzVdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIkRvbiBSR0IgNFwiOiB7XG4gICAgICAgICAgICAgICAgW3hyLCB5ciwgeGcsIHlnLCB4YiwgeWJdID0gWzAuNjk2LCAwLjMsIDAuMjE1LCAwLjc2NSwgMC4xMywgMC4wMzVdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIkVDSSBSR0IgdjJcIjoge1xuICAgICAgICAgICAgICAgIFt4ciwgeXIsIHhnLCB5ZywgeGIsIHliXSA9IFswLjY3LCAwLjMzLCAwLjIxLCAwLjcxLCAwLjE0LCAwLjA4XTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJFa3RhIFNwYWNlIFBTNVwiOiB7XG4gICAgICAgICAgICAgICAgW3hyLCB5ciwgeGcsIHlnLCB4YiwgeWJdID0gWzAuNjk1LCAwLjMwNSwgMC4yNiwgMC43LCAwLjExLCAwLjAwNV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiTlRTQyBSR0JcIjoge1xuICAgICAgICAgICAgICAgIFt4ciwgeXIsIHhnLCB5ZywgeGIsIHliXSA9IFswLjY3LCAwLjMzLCAwLjIxLCAwLjcxLCAwLjE0LCAwLjA4XTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJQQUwvU0VDQU0gUkdCXCI6IHtcbiAgICAgICAgICAgICAgICBbeHIsIHlyLCB4ZywgeWcsIHhiLCB5Yl0gPSBbMC42NCwgMC4zMywgMC4yOSwgMC42LCAwLjE1LCAwLjA2XTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJQcm9QaG90byBSR0JcIjoge1xuICAgICAgICAgICAgICAgIFt4ciwgeXIsIHhnLCB5ZywgeGIsIHliXSA9IFtcbiAgICAgICAgICAgICAgICAgICAgMC43MzQ3LCAwLjI2NTMsIDAuMTU5NiwgMC44NDA0LCAwLjAzNjYsIDAuMDAwMSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIlNNUFRFLUMgUkdCXCI6IHtcbiAgICAgICAgICAgICAgICBbeHIsIHlyLCB4ZywgeWcsIHhiLCB5Yl0gPSBbMC42MywgMC4zNCwgMC4zMSwgMC41OTUsIDAuMTU1LCAwLjA3XTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJzUkdCXCI6IHtcbiAgICAgICAgICAgICAgICBbeHIsIHlyLCB4ZywgeWcsIHhiLCB5Yl0gPSBbMC42NCwgMC4zMywgMC4zLCAwLjYsIDAuMTUsIDAuMDZdO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIldpZGUgR2FtdXQgUkdCXCI6IHtcbiAgICAgICAgICAgICAgICBbeHIsIHlyLCB4ZywgeWcsIHhiLCB5Yl0gPSBbMC43MzUsIDAuMjY1LCAwLjExNSwgMC44MjYsIDAuMTU3LCAwLjAxOF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gLy8gRW5kIHN3aXRjaFxuICAgICAgICBsZXQgWF9yID0geHIgLyB5ciwgWV9yID0gMSwgWl9yID0gKDEgLSB4ciAtIHlyKSAvIHlyLCBYX2cgPSB4ZyAvIHlnLCBZX2cgPSAxLCBaX2cgPSAoMSAtIHhnIC0geWcpIC8geWcsIFhfYiA9IHhiIC8geWIsIFlfYiA9IDEsIFpfYiA9ICgxIC0geGIgLSB5YikgLyB5YiwgUldfUkdCID0gdGhpcy5NdHhfUmVmV2hpdGVSR0IsIFhfVyA9IFJXX1JHQlswXSwgWV9XID0gUldfUkdCWzFdLCBaX1cgPSBSV19SR0JbMl07XG4gICAgICAgIGxldCBbU19yLCBTX2csIFNfYl0gPSBNYXRyaXhfMS5NYXRyaXgubXVsdGlwbHlfM3gzX3RpbWVzX3RyaXBsZShNYXRyaXhfMS5NYXRyaXguaW52KFtcbiAgICAgICAgICAgIFtYX3IsIFhfZywgWF9iXSxcbiAgICAgICAgICAgIFtZX3IsIFlfZywgWV9iXSxcbiAgICAgICAgICAgIFtaX3IsIFpfZywgWl9iXSxcbiAgICAgICAgXSksIFtYX1csIFlfVywgWl9XXSk7XG4gICAgICAgIHJldHVybiBNYXRyaXhfMS5NYXRyaXgudHJhbnNwb3NlKFtcbiAgICAgICAgICAgIFtTX3IgKiBYX3IsIFNfZyAqIFhfZywgU19iICogWF9iXSxcbiAgICAgICAgICAgIFtTX3IgKiBZX3IsIFNfZyAqIFlfZywgU19iICogWV9iXSxcbiAgICAgICAgICAgIFtTX3IgKiBaX3IsIFNfZyAqIFpfZywgU19iICogWl9iXSxcbiAgICAgICAgXSk7XG4gICAgfSAvLyBFbmQgTXR4X1JHQjJYWVpcbiAgICAvLyBDb21wdXRlZDogTWF0cml4IEFkYXB0YWlvblxuICAgIGdldCBNdHhBZHAoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5BZGFwdGF0aW9uKSB7XG4gICAgICAgICAgICBjYXNlIFwiQnJhZGZvcmRcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIFswLjg5NTEsIC0wLjc1MDIsIDAuMDM4OV0sXG4gICAgICAgICAgICAgICAgICAgIFswLjI2NjQsIDEuNzEzNSwgLTAuMDY4NV0sXG4gICAgICAgICAgICAgICAgICAgIFstMC4xNjE0LCAwLjAzNjcsIDEuMDI5Nl0sXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJ2b24gS3JpZXNcIjoge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgIFswLjQwMDI0LCAtMC4yMjYzLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgWzAuNzA3NiwgMS4xNjUzMiwgMF0sXG4gICAgICAgICAgICAgICAgICAgIFstMC4wODA4MSwgMC4wNDU3LCAwLjkxODIyXSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcIlhZWiBTY2FsaW5nXCI6XG4gICAgICAgICAgICBjYXNlIFwiTm9uZVwiOiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgWzEsIDAsIDBdLFxuICAgICAgICAgICAgICAgICAgICBbMCwgMSwgMF0sXG4gICAgICAgICAgICAgICAgICAgIFswLCAwLCAxXSxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSAvLyBFbmQgbWF0cml4IEFkYXB0YXRpb25cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsaW5lYXIgTGluZWFyIHZhbHVlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IEdhbW1hIEdhbW1hIHZhbHVlXG4gICAgICovXG4gICAgY29tcGFuZChsaW5lYXIpIHtcbiAgICAgICAgbGV0IEcgPSB0aGlzLkdhbW1hO1xuICAgICAgICAvLyBEZXBlbmRzIG9uIHNpZ24gb2YgR2FtbWFcbiAgICAgICAgaWYgKEcgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbGluZWFyID49IDAgPyBNYXRoLnBvdyhsaW5lYXIsIDEgLyBHKSA6IC1NYXRoLnBvdygtbGluZWFyLCAxIC8gRyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoRyA8IDApIHtcbiAgICAgICAgICAgIC8qKiBzUkdCICovXG4gICAgICAgICAgICBsZXQgc2lnbiA9IDE7XG4gICAgICAgICAgICBpZiAobGluZWFyIDwgMCkge1xuICAgICAgICAgICAgICAgIHNpZ24gPSAtMTtcbiAgICAgICAgICAgICAgICBsaW5lYXIgPSAtbGluZWFyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChzaWduICpcbiAgICAgICAgICAgICAgICAobGluZWFyIDw9IDAuMDAzMTMwOFxuICAgICAgICAgICAgICAgICAgICA/IGxpbmVhciAqIDEyLjkyXG4gICAgICAgICAgICAgICAgICAgIDogMS4wNTUgKiBNYXRoLnBvdyhsaW5lYXIsIDEuMCAvIDIuNCkgLSAwLjA1NSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLyoqIEwqICovXG4gICAgICAgICAgICBsZXQgc2lnbiA9IDE7XG4gICAgICAgICAgICBpZiAobGluZWFyIDwgMCkge1xuICAgICAgICAgICAgICAgIHNpZ24gPSAtMTtcbiAgICAgICAgICAgICAgICBsaW5lYXIgPSAtbGluZWFyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChzaWduICpcbiAgICAgICAgICAgICAgICAobGluZWFyIDw9IDIxNi4wIC8gMjQzODkuMFxuICAgICAgICAgICAgICAgICAgICA/IChsaW5lYXIgKiAyNDM4OS4wKSAvIDI3MDAuMFxuICAgICAgICAgICAgICAgICAgICA6IDEuMTYgKiBNYXRoLnBvdyhsaW5lYXIsIDEuMCAvIDMuMCkgLSAwLjE2KSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW52ZXJzZSBjb21wYW5kIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbXBhbmRlZCBDb21wYW5kZWQgdmFsdWVcbiAgICAgKi9cbiAgICBpbnZlcnNlX2NvbXBhbmQoY29tcGFuZGVkKSB7XG4gICAgICAgIGxldCBHID0gdGhpcy5HYW1tYTtcbiAgICAgICAgaWYgKEcgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcGFuZGVkID49IDAgPyBNYXRoLnBvdyhjb21wYW5kZWQsIEcpIDogLU1hdGgucG93KC1jb21wYW5kZWQsIEcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEcgPCAwKSB7XG4gICAgICAgICAgICAvKiogc1JHQiAqL1xuICAgICAgICAgICAgbGV0IHNpZ24gPSAxO1xuICAgICAgICAgICAgaWYgKGNvbXBhbmRlZCA8IDApIHtcbiAgICAgICAgICAgICAgICBzaWduID0gLTE7XG4gICAgICAgICAgICAgICAgY29tcGFuZGVkID0gLWNvbXBhbmRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoc2lnbiAqXG4gICAgICAgICAgICAgICAgKGNvbXBhbmRlZCA8PSAwLjA0MDQ1XG4gICAgICAgICAgICAgICAgICAgID8gY29tcGFuZGVkIC8gMTIuOTJcbiAgICAgICAgICAgICAgICAgICAgOiBNYXRoLnBvdygoY29tcGFuZGVkICsgMC4wNTUpIC8gMS4wNTUsIDIuNCkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8qKiBMKiAqL1xuICAgICAgICAgICAgbGV0IHNpZ24gPSAxO1xuICAgICAgICAgICAgaWYgKGNvbXBhbmRlZCA8IDApIHtcbiAgICAgICAgICAgICAgICBzaWduID0gLTE7XG4gICAgICAgICAgICAgICAgY29tcGFuZGVkID0gLWNvbXBhbmRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoc2lnbiAqXG4gICAgICAgICAgICAgICAgKGNvbXBhbmRlZCA8PSAwLjA4XG4gICAgICAgICAgICAgICAgICAgID8gKDI3MDAuMCAqIGNvbXBhbmRlZCkgLyAyNDM4OS4wXG4gICAgICAgICAgICAgICAgICAgIDogKCgoMTAwMDAwMC4wICogY29tcGFuZGVkICsgNDgwMDAwLjApICogY29tcGFuZGVkICsgNzY4MDAuMCkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFuZGVkICtcbiAgICAgICAgICAgICAgICAgICAgICAgIDQwOTYuMCkgL1xuICAgICAgICAgICAgICAgICAgICAgICAgMTU2MDg5Ni4wKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydCBYWVogdHJpcGxlIHRvIFJHQjog4pyFXG4gICAgICogQHBhcmFtIHtbbnVtYmVyLCBudW1iZXIsIG51bWJlcl19IFhZWiB0cmlwbGUgaW4gcmFuZ2UgWzAsIDFdXG4gICAgICogT3V0cHV0cyBSR0IgdHJpcGxlIGluIHJhbmdlIFswLCAyNTVdXG4gICAgICovXG4gICAgWFlaX3RvX1JHQihYWVopIHtcbiAgICAgICAgbGV0IFhZWmQgPSBYWVo7XG4gICAgICAgIGlmICh0aGlzLkFkYXB0YXRpb24gIT0gXCJOb25lXCIpIHtcbiAgICAgICAgICAgIC8vIEdldCBzb3VyY2UvZG9tYWluIHNjYWxlIGZhY3RvcnNcbiAgICAgICAgICAgIGxldCBbQXMsIEJzLCBDc10gPSBNYXRyaXhfMS5NYXRyaXgubXVsdGlwbHlfdHJpcGxlX3RpbWVzXzN4Myh0aGlzLk10eF9SZWZXaGl0ZSwgdGhpcy5NdHhBZHApO1xuICAgICAgICAgICAgbGV0IFtBZCwgQmQsIENkXSA9IE1hdHJpeF8xLk1hdHJpeC5tdWx0aXBseV90cmlwbGVfdGltZXNfM3gzKHRoaXMuTXR4X1JlZldoaXRlUkdCLCB0aGlzLk10eEFkcCk7XG4gICAgICAgICAgICBYWVpkID0gTWF0cml4XzEuTWF0cml4Lm11bHRpcGx5X3RyaXBsZV90aW1lc18zeDMoWFlaLCBNYXRyaXhfMS5NYXRyaXgubXVsdGlwbHlfM3gzX3RpbWVzXzN4Myh0aGlzLk10eEFkcCwgTWF0cml4XzEuTWF0cml4Lm11bHRpcGx5XzN4M190aW1lc18zeDMoW1xuICAgICAgICAgICAgICAgIFtBZCAvIEFzLCAwLCAwXSxcbiAgICAgICAgICAgICAgICBbMCwgQmQgLyBCcywgMF0sXG4gICAgICAgICAgICAgICAgWzAsIDAsIENkIC8gQ3NdLFxuICAgICAgICAgICAgXSwgTWF0cml4XzEuTWF0cml4Lmludih0aGlzLk10eEFkcCkpKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IFJHQiA9IE1hdHJpeF8xLk1hdHJpeC5tdWx0aXBseV90cmlwbGVfdGltZXNfM3gzKFhZWmQsIE1hdHJpeF8xLk1hdHJpeC5pbnYodGhpcy5NdHhfUkdCMlhZWikpO1xuICAgICAgICByZXR1cm4gUkdCLm1hcCgodikgPT4gMjU1ICogdGhpcy5jb21wYW5kKHYpKTtcbiAgICB9IC8vIEVuZCBYWVpfdG9fUkdCXG4gICAgLyoqXG4gICAgICogQ29udmVydCBSR0IgdHJpcGUgdG8gWFlaOiDinIVcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBSR0IgUkdCIFRyaXBsZVxuICAgICAqIE5PVEU6IFRoaXMgYXNzdW1lcyBSR0IgaXMgc2NhbGVkIGZyb20gWzAsIDI1NV0sIFhZWiBpbiBbMCwgMV1cbiAgICAgKi9cbiAgICBSR0JfdG9fWFlaKFJHQikge1xuICAgICAgICAvLyBJbnZlcnNlIGNvbXBvdW5kIHRoZSB2YWx1ZXNcbiAgICAgICAgUkdCID0gUkdCLm1hcCgodikgPT4gdGhpcy5pbnZlcnNlX2NvbXBhbmQodiAvIDI1NSkpO1xuICAgICAgICAvLyBMaW5lYXIgUkdCIHRvIFhZWlxuICAgICAgICBsZXQgWFlaID0gTWF0cml4XzEuTWF0cml4Lm11bHRpcGx5X3RyaXBsZV90aW1lc18zeDMoUkdCLCB0aGlzLk10eF9SR0IyWFlaKTtcbiAgICAgICAgLy8gQWRhcHRhdGlvbiBpZiBuZWNlc3NhcnlcbiAgICAgICAgaWYgKHRoaXMuQWRhcHRhdGlvbiAhPSBcIk5vbmVcIikge1xuICAgICAgICAgICAgLy8gR2V0IHNvdXJjZS9kb21haW4gc2NhbGUgZmFjdG9yc1xuICAgICAgICAgICAgbGV0IFtBcywgQnMsIENzXSA9IE1hdHJpeF8xLk1hdHJpeC5tdWx0aXBseV90cmlwbGVfdGltZXNfM3gzKHRoaXMuTXR4X1JlZldoaXRlUkdCLCB0aGlzLk10eEFkcCk7XG4gICAgICAgICAgICBsZXQgW0FkLCBCZCwgQ2RdID0gTWF0cml4XzEuTWF0cml4Lm11bHRpcGx5X3RyaXBsZV90aW1lc18zeDModGhpcy5NdHhfUmVmV2hpdGUsIHRoaXMuTXR4QWRwKTtcbiAgICAgICAgICAgIHJldHVybiBNYXRyaXhfMS5NYXRyaXgubXVsdGlwbHlfdHJpcGxlX3RpbWVzXzN4MyhYWVosIE1hdHJpeF8xLk1hdHJpeC5tdWx0aXBseV8zeDNfdGltZXNfM3gzKHRoaXMuTXR4QWRwLCBNYXRyaXhfMS5NYXRyaXgubXVsdGlwbHlfM3gzX3RpbWVzXzN4MyhbXG4gICAgICAgICAgICAgICAgW0FkIC8gQXMsIDAsIDBdLFxuICAgICAgICAgICAgICAgIFswLCBCZCAvIEJzLCAwXSxcbiAgICAgICAgICAgICAgICBbMCwgMCwgQ2QgLyBDc10sXG4gICAgICAgICAgICBdLCBNYXRyaXhfMS5NYXRyaXguaW52KHRoaXMuTXR4QWRwKSkpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBYWVo7XG4gICAgICAgIH1cbiAgICB9IC8vIEVuZCBSR0IgdG8gWFlaXG4gICAgLyoqXG4gICAgICogQ29udmVydCBMYWIgdG8gWFlaXG4gICAgICogQHBhcmFtIExhYiBMYWIgdHJpcGxlXG4gICAgICogWFlaIGluIHJhbmdlIFswLCAxXVxuICAgICAqL1xuICAgIExhYl90b19YWVooTGFiKSB7XG4gICAgICAgIGxldCBMID0gTGFiWzBdLCBhID0gTGFiWzFdLCBiID0gTGFiWzJdLCBmX3kgPSAoTCArIDE2KSAvIDExNiwgZl94ID0gYSAvIDUwMCArIGZfeSwgZl96ID0gZl95IC0gYiAvIDIwMCwgeF9yID0gTWF0aC5wb3coZl94LCAzKSA+IHRoaXMua0VcbiAgICAgICAgICAgID8gTWF0aC5wb3coZl94LCAzKVxuICAgICAgICAgICAgOiAoMTE2ICogZl94IC0gMTYpIC8gdGhpcy5rSywgeV9yID0gTCA+IHRoaXMua0sgKiB0aGlzLmtFID8gTWF0aC5wb3coKEwgKyAxNikgLyAxMTYsIDMpIDogTCAvIHRoaXMua0ssIHpfciA9IE1hdGgucG93KGZfeiwgMykgPiB0aGlzLmtFXG4gICAgICAgICAgICA/IE1hdGgucG93KGZfeiwgMylcbiAgICAgICAgICAgIDogKDExNiAqIGZfeiAtIDE2KSAvIHRoaXMua0ssIFJlZldoaXRlID0gdGhpcy5NdHhfUmVmV2hpdGU7XG4gICAgICAgIHJldHVybiBbeF9yICogUmVmV2hpdGVbMF0sIHlfciAqIFJlZldoaXRlWzFdLCB6X3IgKiBSZWZXaGl0ZVsyXV07XG4gICAgfSAvLyBFbmQgTGFiIHRvIFhZWlxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIExhYiB0cmlwbGUgdG8gWFlaIHRyaXBlIGluIHJhbmdlIFswLCAxXVxuICAgICAqIEBwYXJhbSBYWVogWFlaIHRyaXBsZVxuICAgICAqL1xuICAgIFhZWl90b19MYWIoWFlaKSB7XG4gICAgICAgIGxldCBYID0gWFlaWzBdLCBZID0gWFlaWzFdLCBaID0gWFlaWzJdLCBSZWZXaGl0ZSA9IHRoaXMuTXR4X1JlZldoaXRlLCBYX3IgPSBSZWZXaGl0ZVswXSwgWV9yID0gUmVmV2hpdGVbMV0sIFpfciA9IFJlZldoaXRlWzJdLCB4X3IgPSBYIC8gWF9yLCB5X3IgPSBZIC8gWV9yLCB6X3IgPSBaIC8gWl9yLCBmX3ggPSB4X3IgPiB0aGlzLmtFID8gTWF0aC5wb3coeF9yLCAxIC8gMykgOiAodGhpcy5rSyAqIHhfciArIDE2KSAvIDExNiwgZl95ID0geV9yID4gdGhpcy5rRSA/IE1hdGgucG93KHlfciwgMSAvIDMpIDogKHRoaXMua0sgKiB5X3IgKyAxNikgLyAxMTYsIGZfeiA9IHpfciA+IHRoaXMua0UgPyBNYXRoLnBvdyh6X3IsIDEgLyAzKSA6ICh0aGlzLmtLICogel9yICsgMTYpIC8gMTE2O1xuICAgICAgICByZXR1cm4gWzExNiAqIGZfeSAtIDE2LCA1MDAgKiAoZl94IC0gZl95KSwgMjAwICogKGZfeSAtIGZfeildO1xuICAgIH0gLy8gRW5kIFhZWl90b19MYWJcbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IExhYiB0byBSR0JcbiAgICAgKiBAcGFyYW0gTGFiIExhYiB0cmlwbGVcbiAgICAgKiBOb3RlOiBSR0IgaW4gWzAsIDI1NV1cbiAgICAgKi9cbiAgICBMYWJfdG9fUkdCKExhYikge1xuICAgICAgICByZXR1cm4gdGhpcy5YWVpfdG9fUkdCKHRoaXMuTGFiX3RvX1hZWihMYWIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29udmVydCBSR0IgdG8gTGFiXG4gICAgICogQHBhcmFtIFJHQiBSR0IgdHJpcGxlIGluIHJhbmdlIFswLCAyNTVdXG4gICAgICovXG4gICAgUkdCX3RvX0xhYihSR0IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWFlaX3RvX0xhYih0aGlzLlJHQl90b19YWVooUkdCKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgeHlZIHRyaXBsZSB0byBYWVogdHJpcGxlXG4gICAgICogQHBhcmFtIHh5WSB4eVkgdHJpcGxlXG4gICAgICovXG4gICAgeHlZX3RvX1hZWih4eVkpIHtcbiAgICAgICAgbGV0IFt4LCB5LCBZXSA9IHh5WTtcbiAgICAgICAgaWYgKHkgPCAwLjAwMDAwMSkge1xuICAgICAgICAgICAgcmV0dXJuIFswLCAwLCAwXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBbKHggKiBZKSAvIHksIFksICgoMSAtIHggLSB5KSAqIFkpIC8geV07XG4gICAgICAgIH1cbiAgICB9IC8vIEVuZCB4eVlfdG9fWFlaXG4gICAgLyoqXG4gICAgICogQ29udmVydCBYWVogdG8geHlZXG4gICAgICogQHBhcmFtIFhZWiBYWVogdHJpcGxlIGluIFswLCAxXVxuICAgICAqL1xuICAgIFhZWl90b194eVkoWFlaKSB7XG4gICAgICAgIGxldCBbWCwgWSwgWl0gPSBYWVosIERlbiA9IFggKyBZICsgWjtcbiAgICAgICAgLy8gTm9uLXplcm8gRGVuOlxuICAgICAgICBpZiAoRGVuID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFtYIC8gRGVuLCBZIC8gRGVuLCBZXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBaZXJvIGRlblxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxldCBbUldfWCwgUldfWSwgUldfWl0gPSB0aGlzLk10eF9SZWZXaGl0ZSwgUldfRGVuID0gUldfWCArIFJXX1kgKyBSV19aO1xuICAgICAgICAgICAgcmV0dXJuIFtSV19YIC8gUldfRGVuLCBSV19ZIC8gUldfRGVuLCBZXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBMYWIgdHJpcGxlIHRvIExDSCB0cmlwbGVcbiAgICAgKiBAcGFyYW0gTGFiIExhYiB0cmlwbGVcbiAgICAgKi9cbiAgICBMYWJfdG9fTENIYWIoTGFiKSB7XG4gICAgICAgIGxldCBbTCwgYSwgYl0gPSBMYWI7XG4gICAgICAgIGxldCBIID0gKDE4MCAvIE1hdGguUEkpICogTWF0aC5hdGFuMihiLCBhKTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIEwsXG4gICAgICAgICAgICBNYXRoLnNxcnQoTWF0aC5wb3coYSwgMikgKyBNYXRoLnBvdyhiLCAyKSksXG4gICAgICAgICAgICBIICsgKEggPj0gMCA/IDAgOiAzNjApLFxuICAgICAgICBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMQ0ggdHJpcGxlIHRvIExhYiB0cmlwbGVcbiAgICAgKiBAcGFyYW0gTENIIExDSCBUcmlwbGVcbiAgICAgKi9cbiAgICBMQ0hhYl90b19MYWIoTENIKSB7XG4gICAgICAgIGxldCBbTCwgQywgSF0gPSBMQ0g7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBMLFxuICAgICAgICAgICAgQyAqIE1hdGguY29zKChIICogTWF0aC5QSSkgLyAxODApLFxuICAgICAgICAgICAgQyAqIE1hdGguc2luKChIICogTWF0aC5QSSkgLyAxODApLFxuICAgICAgICBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gWFlaIFhZWiBUcmlwbGVcbiAgICAgKi9cbiAgICBYWVpfdG9fTENIYWIoWFlaKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkxhYl90b19MQ0hhYih0aGlzLlhZWl90b19MYWIoWFlaKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBYWVogWFlaIFRyaXBsZVxuICAgICAqL1xuICAgIFhZWl90b19MdXYoWFlaKSB7XG4gICAgICAgIGxldCBbWCwgWSwgWl0gPSBYWVosIFJlZldoaXRlID0gdGhpcy5NdHhfUmVmV2hpdGUsIFhfciA9IFJlZldoaXRlWzBdLCBZX3IgPSBSZWZXaGl0ZVsxXSwgWl9yID0gUmVmV2hpdGVbMl0sIERlbiA9IFggKyAxNSAqIFkgKyAzICogWiwgdXAgPSBEZW4gPiAwID8gKDQgKiBYKSAvIERlbiA6IDAsIHZwID0gRGVuID4gMCA/ICg5ICogWSkgLyBEZW4gOiAwLCB1cnAgPSAoNCAqIFhfcikgLyAoWF9yICsgMTUgKiBZX3IgKyAzICogWl9yKSwgdnJwID0gKDkgKiBZX3IpIC8gKFhfciArIDE1ICogWV9yICsgMyAqIFpfciksIHlyID0gWSAvIFlfciwgTCA9IHlyID4gdGhpcy5rRSA/IDExNiAqIE1hdGgucG93KHlyLCAxIC8gMykgLSAxNiA6IHRoaXMua0sgKiB5cjtcbiAgICAgICAgcmV0dXJuIFtMLCAxMyAqIEwgKiAodXAgLSB1cnApLCAxMyAqIEwgKiAodnAgLSB2cnApXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIFhZWiBYWVogdHJpcGxlXG4gICAgICovXG4gICAgWFlaX3RvX0xDSHV2KFhZWikge1xuICAgICAgICByZXR1cm4gdGhpcy5MdXZfdG9fTENIdXYodGhpcy5YWVpfdG9fTHV2KFhZWikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMdXYgdG8gTENIdXZcbiAgICAgKiBAcGFyYW0gTHV2IEx1diB0cmlwbGVcbiAgICAgKi9cbiAgICBMdXZfdG9fTENIdXYoTHV2KSB7XG4gICAgICAgIGxldCBbTCwgdSwgdl0gPSBMdXY7XG4gICAgICAgIGxldCBIID0gKDE4MCAvIE1hdGguUEkpICogTWF0aC5hdGFuMih2LCB1KTtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIEwsXG4gICAgICAgICAgICBNYXRoLnNxcnQoTWF0aC5wb3codSwgMikgKyBNYXRoLnBvdyh2LCAyKSksXG4gICAgICAgICAgICBIICsgKEggPj0gMCA/IDAgOiAzNjApLFxuICAgICAgICBdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geHlZIHh5WSBUcmlwbGVcbiAgICAgKi9cbiAgICB4eVlfdG9fTGFiKHh5WSkge1xuICAgICAgICByZXR1cm4gdGhpcy5YWVpfdG9fTGFiKHRoaXMueHlZX3RvX1hZWih4eVkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHh5WSB4eVkgVHJpcGxlXG4gICAgICovXG4gICAgeHlZX3RvX0xDSGFiKHh5WSkge1xuICAgICAgICByZXR1cm4gdGhpcy5MYWJfdG9fTENIYWIodGhpcy5YWVpfdG9fTGFiKHRoaXMueHlZX3RvX1hZWih4eVkpKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB4eVkgeHlZIFRyaXBsZVxuICAgICAqL1xuICAgIHh5WV90b19MdXYoeHlZKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhZWl90b19MdXYodGhpcy54eVlfdG9fWFlaKHh5WSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geHlZIHh5WSB0cmlwbGVcbiAgICAgKi9cbiAgICB4eVlfdG9fTENIdXYoeHlZKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkx1dl90b19MQ0h1dih0aGlzLlhZWl90b19MdXYodGhpcy54eVlfdG9fWFlaKHh5WSkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHh5WSB4eVkgVHJpcGxlXG4gICAgICovXG4gICAgeHlZX3RvX1JHQih4eVkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWFlaX3RvX1JHQih0aGlzLnh5WV90b19YWVooeHlZKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBMYWIgTGFiIHRyaXBsZVxuICAgICAqL1xuICAgIExhYl90b194eVkoTGFiKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhZWl90b194eVkodGhpcy5MYWJfdG9fWFlaKExhYikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gTGFiIExhYiB0cmlwbGVcbiAgICAgKi9cbiAgICBMYWJfdG9fTHV2KExhYikge1xuICAgICAgICByZXR1cm4gdGhpcy5YWVpfdG9fTHV2KHRoaXMuTGFiX3RvX1hZWihMYWIpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIExhYiBMYWIgdHJpcGxlXG4gICAgICovXG4gICAgTGFiX3RvX0xDSHV2KExhYikge1xuICAgICAgICByZXR1cm4gdGhpcy5MdXZfdG9fTENIdXYodGhpcy5MYWJfdG9fTHV2KExhYikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gTENIIE51bWVyaWNUcmlwbGVcbiAgICAgKi9cbiAgICBMQ0hhYl90b19YWVooTENIKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkxhYl90b19YWVoodGhpcy5MQ0hhYl90b19MYWIoTENIKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBMQ0ggTnVtZXJpY1RyaXBsZVxuICAgICAqL1xuICAgIExDSGFiX3RvX3h5WShMQ0gpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWFlaX3RvX3h5WSh0aGlzLkxhYl90b19YWVoodGhpcy5MQ0hhYl90b19MYWIoTENIKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gTENIIE51bWVyaWNUcmlwbGVcbiAgICAgKi9cbiAgICBMQ0hhYl90b19MdXYoTENIKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhZWl90b19MdXYodGhpcy5MYWJfdG9fWFlaKHRoaXMuTENIYWJfdG9fTGFiKExDSCkpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIExDSCBOdW1lcmljVHJpcGxlXG4gICAgICovXG4gICAgTENIYWJfdG9fTENIdXYoTENIKSB7XG4gICAgICAgIHJldHVybiB0aGlzLkx1dl90b19MQ0h1dih0aGlzLkxDSGFiX3RvX0x1dihMQ0gpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIExDSCBOdW1lcmljVHJpcGxlXG4gICAgICovXG4gICAgTENIYWJfdG9fUkdCKExDSCkge1xuICAgICAgICByZXR1cm4gdGhpcy5YWVpfdG9fUkdCKHRoaXMuTENIYWJfdG9fWFlaKExDSCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gTHV2IE51bWVyaWNUcmlwbGVcbiAgICAgKi9cbiAgICBMdXZfdG9fWFlaKEx1dikge1xuICAgICAgICBsZXQgW0wsIHUsIHZdID0gTHV2O1xuICAgICAgICBsZXQgWSA9IEwgPiB0aGlzLmtLICogdGhpcy5rRSA/IE1hdGgucG93KChMICsgMTYpIC8gMTE2LCAzKSA6IEwgLyB0aGlzLmtLO1xuICAgICAgICBsZXQgUmVmV2hpdGUgPSB0aGlzLk10eF9SZWZXaGl0ZSwgWF9yID0gUmVmV2hpdGVbMF0sIFlfciA9IFJlZldoaXRlWzFdLCBaX3IgPSBSZWZXaGl0ZVsyXSwgRGVuID0gWF9yICsgMTUgKiBZX3IgKyAzICogWl9yLCB2XzAgPSAoOSAqIFlfcikgLyBEZW4sIHVfMCA9ICg0ICogWF9yKSAvIERlbiwgZCA9IFkgKiAoKDM5ICogTCkgLyAodiArIDEzICogTCAqIHZfMCkgLSA1KSwgYyA9IC0xIC8gMywgYiA9IC01ICogWSwgYSA9ICgxIC8gMykgKiAoKDUyICogTCkgLyAodSArIDEzICogTCAqIHVfMCkgLSAxKSwgWCA9IChkIC0gYikgLyAoYSAtIGMpLCBaID0gWCAqIGEgKyBiO1xuICAgICAgICByZXR1cm4gW1gsIFksIFpdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gTHV2IE51bWVyaWNUcmlwbGVcbiAgICAgKi9cbiAgICBMdXZfdG9feHlZKEx1dikge1xuICAgICAgICByZXR1cm4gdGhpcy5YWVpfdG9feHlZKHRoaXMuTHV2X3RvX1hZWihMdXYpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIEx1diBOdW1lcmljVHJpcGxlXG4gICAgICovXG4gICAgTHV2X3RvX0xhYihMdXYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWFlaX3RvX0xhYih0aGlzLkx1dl90b19YWVooTHV2KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBMdXYgTnVtZXJpY1RyaXBsZVxuICAgICAqL1xuICAgIEx1dl90b19MQ0hhYihMdXYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTGFiX3RvX0xDSGFiKHRoaXMuTHV2X3RvX0xhYihMdXYpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIEx1diBOdW1lcmljVHJpcGxlXG4gICAgICovXG4gICAgTHV2X3RvX1JHQihMdXYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWFlaX3RvX1JHQih0aGlzLkx1dl90b19YWVooTHV2KSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBMQ0ggTnVtZXJpY1RyaXBsZVxuICAgICAqL1xuICAgIExDSHV2X3RvX0x1dihMQ0gpIHtcbiAgICAgICAgbGV0IFtMLCBDLCBIXSA9IExDSDtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIEwsXG4gICAgICAgICAgICBDICogTWF0aC5jb3MoKEggKiBNYXRoLlBJKSAvIDE4MCksXG4gICAgICAgICAgICBDICogTWF0aC5zaW4oKEggKiBNYXRoLlBJKSAvIDE4MCksXG4gICAgICAgIF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBMQ0ggTnVtZXJpY1RyaXBsZVxuICAgICAqL1xuICAgIExDSHV2X3RvX1hZWihMQ0gpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTHV2X3RvX1hZWih0aGlzLkxDSHV2X3RvX0x1dihMQ0gpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIExDSCBOdW1lcmljVHJpcGxlXG4gICAgICovXG4gICAgTENIdXZfdG9feHlZKExDSCkge1xuICAgICAgICByZXR1cm4gdGhpcy5YWVpfdG9feHlZKHRoaXMuTENIdXZfdG9fWFlaKExDSCkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gTENIIE51bWVyaWNUcmlwbGVcbiAgICAgKi9cbiAgICBMQ0h1dl90b19MYWIoTENIKSB7XG4gICAgICAgIHJldHVybiB0aGlzLlhZWl90b19MYWIodGhpcy5MQ0h1dl90b19YWVooTENIKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBMQ0ggTnVtZXJpY1RyaXBsZVxuICAgICAqL1xuICAgIExDSHV2X3RvX0xDSGFiKExDSCkge1xuICAgICAgICByZXR1cm4gdGhpcy5MYWJfdG9fTENIYWIodGhpcy5MQ0h1dl90b19MYWIoTENIKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBMQ0ggTnVtZXJpY1RyaXBsZVxuICAgICAqL1xuICAgIExDSHV2X3RvX1JHQihMQ0gpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWFlaX3RvX1JHQih0aGlzLkxDSHV2X3RvX1hZWihMQ0gpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIFJHQiBOdW1lcmljVHJpcGxlXG4gICAgICovXG4gICAgUkdCX3RvX3h5WShSR0IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWFlaX3RvX3h5WSh0aGlzLlJHQl90b19YWVooUkdCKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBSR0IgTnVtZXJpY1RyaXBsZVxuICAgICAqL1xuICAgIFJHQl90b19MQ0hhYihSR0IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTGFiX3RvX0xDSGFiKHRoaXMuUkdCX3RvX0xhYihSR0IpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQHBhcmFtIFJHQiBOdW1lcmljVHJpcGxlXG4gICAgICovXG4gICAgUkdCX3RvX0x1dihSR0IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuWFlaX3RvX0x1dih0aGlzLlJHQl90b19YWVooUkdCKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBSR0IgTnVtZXJpY1RyaXBsZVxuICAgICAqL1xuICAgIFJHQl90b19MQ0h1dihSR0IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuTHV2X3RvX0xDSHV2KHRoaXMuUkdCX3RvX0x1dihSR0IpKTtcbiAgICB9XG59IC8vIEVuZCBjbGFzcyBkZWZpbml0aW9uXG5leHBvcnRzLkNvbG9yQ29udmVydGVyID0gQ29sb3JDb252ZXJ0ZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///564\n')},556:()=>{eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTU2LmpzIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29sb3VyLWJsaW5kLXNpbXVsYXRvci8uL3NyYy9zdHlsZXMuc2Nzcz81NzRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///556\n")},926:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n;// CONCATENATED MODULE: ./src/math/MathExtensions.ts\nclass MathUtilities {\n    static isZero(value) {\n        return Math.abs(value) < 1e-9;\n    }\n    static degreesToGradient(degrees) {\n        if (degrees === 90) {\n            return Number.POSITIVE_INFINITY;\n        }\n        else if (degrees === 270) {\n            return Number.NEGATIVE_INFINITY;\n        }\n        return Math.tan(degrees * Math.PI / 180);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/math/Line.ts\n\nclass Line {\n    constructor(...argv) {\n        if (argv.length == 2) {\n            this.LineFormula = { gradient: argv[0], yIntercept: argv[1] };\n        }\n        else {\n            this.LineFormula = argv[0];\n        }\n    }\n    static yIntercept(position, gradient) {\n        const riseFromOrigin = position.x * gradient;\n        return position.y - riseFromOrigin;\n    }\n    IsPointLeftOfLine(position) {\n        if (typeof this.LineFormula === "number") {\n            return (position.x < this.LineFormula);\n        }\n        if (this.LineFormula.gradient === 0) {\n            return (position.y > this.LineFormula.yIntercept);\n        }\n        return (position.x < (position.y - this.LineFormula.yIntercept) / this.LineFormula.gradient);\n    }\n    IsPointRightOfLine(position) {\n        if (typeof this.LineFormula === "number") {\n            return (position.x > this.LineFormula);\n        }\n        if (this.LineFormula.gradient === 0) {\n            return (position.y < this.LineFormula.yIntercept);\n        }\n        return (position.x > (position.y - this.LineFormula.yIntercept) / this.LineFormula.gradient);\n    }\n    isPointOnLine(position) {\n        if (typeof this.LineFormula === "number") {\n            return (MathUtilities.isZero(position.x - this.LineFormula));\n        }\n        if (this.LineFormula.gradient === 0) {\n            return (MathUtilities.isZero(position.y - this.LineFormula.yIntercept));\n        }\n        return (MathUtilities.isZero(position.y - (this.LineFormula.gradient * position.x) + this.LineFormula.yIntercept));\n    }\n    getPointAlongLine(position, distance) {\n        if (!this.isPointOnLine(position)) {\n            throw new Error("point is not on the Line.");\n        }\n        if (typeof this.LineFormula === "number") {\n            return ({ x: position.x, y: position.y + distance });\n        }\n        if (this.LineFormula.gradient === 0) {\n            return ({ x: position.x + distance, y: position.y });\n        }\n        const angle = Math.atan(this.LineFormula.gradient);\n        const x = Math.cos(angle) * distance + position.x;\n        const y = this.LineFormula.gradient * x + this.LineFormula.yIntercept;\n        return { x: x, y: y };\n    }\n}\n\n;// CONCATENATED MODULE: ./src/calibration/CalibrationBinarySearch.ts\n\n\nclass CalibrationBinarySearch {\n    constructor(origin, angle, initialDistance) {\n        this.origin = origin;\n        const gradient = MathUtilities.degreesToGradient(angle);\n        if (gradient === Infinity || gradient === -Infinity) {\n            this.searchLine = new Line(origin.x);\n        }\n        else {\n            const yIntercept = Line.yIntercept(origin, gradient);\n            this.searchLine = new Line(gradient, yIntercept);\n        }\n        this.initialDistance = initialDistance;\n        this.angle = angle;\n        if (this.angle > 90 && this.angle <= 270) {\n            this.initialDistance *= -1;\n        }\n        this.lowerBound = 0;\n        this.upperBound = null;\n        this.current = this.initialDistance;\n    }\n    prepareNextPoint(prevoiousFound) {\n        if (prevoiousFound) {\n            this.upperBound = this.current;\n        }\n        else {\n            this.lowerBound = this.current;\n        }\n        if (this.upperBound === null) {\n            this.current = this.current * 2;\n        }\n        else {\n            this.current = (this.upperBound + this.lowerBound) / 2;\n        }\n        console.log(`Gap between items: ${this.upperBound === null ? "searching..." : this.upperBound - this.lowerBound}`);\n    }\n    isGapLessThan(gap) {\n        if (this.upperBound === null) {\n            return false;\n        }\n        else {\n            return (Math.abs(this.upperBound - this.lowerBound) <= gap);\n        }\n    }\n    getCurrentPoint() {\n        console.log(`GetPoint - Gap between items: ${this.upperBound === null ? "searching..." : this.upperBound - this.lowerBound} current:${this.current}`);\n        const currentPoint = this.searchLine.getPointAlongLine(this.origin, this.current);\n        if (isNaN(currentPoint.x) || isNaN(currentPoint.y)) {\n            console.log(`Bad value`);\n        }\n        return currentPoint;\n    }\n    getFinalPoint() {\n        return this.searchLine.getPointAlongLine(this.origin, this.lowerBound);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/calibration/CalibrationImage.ts\nclass CalibrationImage {\n    constructor(calibrationCanvas) {\n        this.originX = 51 * 8 / 2;\n        this.originY = 51 * 8 / 2;\n        this.totalX = 51 * 8;\n        this.totalY = 51 * 8;\n        this.calibrationCanvas = calibrationCanvas;\n        this.calibrationCanvas.width = 8 * 51;\n        this.calibrationCanvas.height = 8 * 51;\n        this.calibrationCanvas.style.backgroundColor = "#000000";\n        const myContext = this.calibrationCanvas.getContext("2d");\n        if (myContext === null) {\n            throw new Error("Can\'t get context");\n        }\n        this.context = myContext;\n        this.context.globalCompositeOperation = "source-over";\n    }\n    initialiseCanvas(calibrationGrid) {\n        for (let column = 0; column <= 50; column++) {\n            for (let row = 0; row <= 50; row++) {\n                CalibrationImage.drawCircle(column, row, calibrationGrid.getColourByColumnRow(column, row), this.context);\n            }\n        }\n    }\n    static drawCircle(column, row, color, context) {\n        const drawX = column * 8;\n        const drawY = row * 8;\n        context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n        context.fillRect(drawX + 3, drawY + 2, 1, 1);\n        context.fillRect(drawX + 4, drawY + 2, 1, 1);\n        context.fillRect(drawX + 2, drawY + 3, 1, 1);\n        context.fillRect(drawX + 3, drawY + 3, 1, 1);\n        context.fillRect(drawX + 4, drawY + 3, 1, 1);\n        context.fillRect(drawX + 5, drawY + 3, 1, 1);\n        context.fillRect(drawX + 2, drawY + 4, 1, 1);\n        context.fillRect(drawX + 3, drawY + 4, 1, 1);\n        context.fillRect(drawX + 4, drawY + 4, 1, 1);\n        context.fillRect(drawX + 5, drawY + 4, 1, 1);\n        context.fillRect(drawX + 3, drawY + 5, 1, 1);\n        context.fillRect(drawX + 4, drawY + 5, 1, 1);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/calibration/CalibrationGrid.ts\nclass CalibrationGrid {\n    constructor() {\n        this.grid = [];\n        for (let column = 0; column < 51; column++) {\n            const rowArray = [];\n            for (let row = 0; row < 51; row++) {\n                rowArray.push([0, 0, 0]);\n            }\n            this.grid.push(rowArray);\n        }\n    }\n    setColourByXY(x, y, colour) {\n        if (x < -25 || x > 25) {\n            throw new Error("x must be between -25 and 25 inclusive");\n        }\n        if (y < -25 || y > 25) {\n            throw new Error("y must be between -25 and 25 inclusive");\n        }\n        const column = x + 25;\n        const row = y + 25;\n        this.grid[column][row] = colour;\n    }\n    getColourByXY(x, y) {\n        if (x < -25 || x > 25) {\n            throw new Error("x must be between -25 and 25 inclusive");\n        }\n        if (y < -25 || y > 25) {\n            throw new Error("y must be between -25 and 25 inclusive");\n        }\n        const column = x + 25;\n        const row = y + 25;\n        return (this.grid[column][row]);\n    }\n    setColourByColumnRow(column, row, colour) {\n        if (column < 0 || column > 50) {\n            throw new Error("column must be between 0 and 50 inclusive");\n        }\n        if (row < 0 || row > 50) {\n            throw new Error("row must be between 0 and 50 inclusive");\n        }\n        const newRow = 50 - row;\n        this.grid[column][newRow] = colour;\n    }\n    getColourByColumnRow(column, row) {\n        if (column < 0 || column > 51) {\n            throw new Error("column must be between 0 and 51 inclusive");\n        }\n        if (row < 0 || row > 51) {\n            throw new Error("row must be between 0 and 51 inclusive");\n        }\n        const newRow = 50 - row;\n        return (this.grid[column][newRow]);\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/cie-colorconverter/dist/index.js\nvar dist = __webpack_require__(564);\n;// CONCATENATED MODULE: ./src/calibration/SectorUtilities.ts\n\n\nvar Quadrant;\n(function (Quadrant) {\n    Quadrant[Quadrant["North"] = 0] = "North";\n    Quadrant[Quadrant["NorthEast"] = 1] = "NorthEast";\n    Quadrant[Quadrant["East"] = 2] = "East";\n    Quadrant[Quadrant["SouthEast"] = 3] = "SouthEast";\n    Quadrant[Quadrant["South"] = 4] = "South";\n    Quadrant[Quadrant["SouthWest"] = 5] = "SouthWest";\n    Quadrant[Quadrant["West"] = 6] = "West";\n    Quadrant[Quadrant["NorthWest"] = 7] = "NorthWest";\n})(Quadrant || (Quadrant = {}));\nclass SectorUtilities {\n    static GetSectorDefinition(quadrant) {\n        let sectorDefinition;\n        switch (quadrant) {\n            case Quadrant.North: {\n                sectorDefinition = {\n                    gradientAntiClockwise: new Line(-1 * SectorUtilities.degrees67Gradient, 0),\n                    gradientClockwise: new Line(SectorUtilities.degrees67Gradient, 0),\n                    gradientAntiClockwiseRight: true,\n                    gradientClockwiseRight: false,\n                };\n                break;\n            }\n            case Quadrant.NorthEast: {\n                sectorDefinition = {\n                    gradientAntiClockwise: new Line(SectorUtilities.degrees67Gradient, 0),\n                    gradientClockwise: new Line(SectorUtilities.degrees22Gradient, 0),\n                    gradientAntiClockwiseRight: true,\n                    gradientClockwiseRight: false,\n                };\n                break;\n            }\n            case Quadrant.East: {\n                sectorDefinition = {\n                    gradientAntiClockwise: new Line(SectorUtilities.degrees22Gradient, 0),\n                    gradientClockwise: new Line(-1 * SectorUtilities.degrees22Gradient, 0),\n                    gradientAntiClockwiseRight: true,\n                    gradientClockwiseRight: true,\n                };\n                break;\n            }\n            case Quadrant.SouthEast: {\n                sectorDefinition = {\n                    gradientAntiClockwise: new Line(-1 * SectorUtilities.degrees22Gradient, 0),\n                    gradientClockwise: new Line(-1 * SectorUtilities.degrees67Gradient, 0),\n                    gradientAntiClockwiseRight: false,\n                    gradientClockwiseRight: true,\n                };\n                break;\n            }\n            case Quadrant.South: {\n                sectorDefinition = {\n                    gradientAntiClockwise: new Line(-1 * SectorUtilities.degrees67Gradient, 0),\n                    gradientClockwise: new Line(SectorUtilities.degrees67Gradient, 0),\n                    gradientAntiClockwiseRight: false,\n                    gradientClockwiseRight: true,\n                };\n                break;\n            }\n            case Quadrant.SouthWest: {\n                sectorDefinition = {\n                    gradientAntiClockwise: new Line(SectorUtilities.degrees67Gradient, 0),\n                    gradientClockwise: new Line(SectorUtilities.degrees22Gradient, 0),\n                    gradientAntiClockwiseRight: false,\n                    gradientClockwiseRight: true,\n                };\n                break;\n            }\n            case Quadrant.West: {\n                sectorDefinition = {\n                    gradientAntiClockwise: new Line(SectorUtilities.degrees22Gradient, 0),\n                    gradientClockwise: new Line(-1 * SectorUtilities.degrees22Gradient, 0),\n                    gradientAntiClockwiseRight: false,\n                    gradientClockwiseRight: false,\n                };\n                break;\n            }\n            case Quadrant.NorthWest: {\n                sectorDefinition = {\n                    gradientAntiClockwise: new Line(-1 * SectorUtilities.degrees22Gradient, 0),\n                    gradientClockwise: new Line(-1 * SectorUtilities.degrees67Gradient, 0),\n                    gradientAntiClockwiseRight: true,\n                    gradientClockwiseRight: false,\n                };\n                break;\n            }\n            default: {\n                throw new Error("Invalid quadrant");\n            }\n        }\n        return sectorDefinition;\n    }\n    static IsPointInSector(position, sectorDefinition) {\n        if (sectorDefinition.gradientClockwise.isPointOnLine(position)\n            || sectorDefinition.gradientAntiClockwise.isPointOnLine(position)) {\n            return false;\n        }\n        let anticlockwiseOkay;\n        if (sectorDefinition.gradientAntiClockwiseRight) {\n            anticlockwiseOkay = sectorDefinition.gradientAntiClockwise.IsPointRightOfLine(position);\n        }\n        else {\n            anticlockwiseOkay = sectorDefinition.gradientAntiClockwise.IsPointLeftOfLine(position);\n        }\n        let clockwiseOkay;\n        if (sectorDefinition.gradientClockwiseRight) {\n            clockwiseOkay = sectorDefinition.gradientClockwise.IsPointRightOfLine(position);\n        }\n        else {\n            clockwiseOkay = sectorDefinition.gradientClockwise.IsPointLeftOfLine(position);\n        }\n        return (anticlockwiseOkay && clockwiseOkay);\n    }\n}\nSectorUtilities.degrees22Gradient = MathUtilities.degreesToGradient(22.5);\nSectorUtilities.degrees67Gradient = MathUtilities.degreesToGradient(67.5);\n\n;// CONCATENATED MODULE: ./src/calibration/CalibrationSetup.ts\n\n\n\nfunction setupCalibration(baseLuv, testLuv, clearedQuadrant) {\n    const sectorDefinition = SectorUtilities.GetSectorDefinition(clearedQuadrant);\n    const calibrationGrid = new CalibrationGrid();\n    const converter = new dist/* ColorConverter */.N();\n    converter.RefWhite = "D65";\n    converter.GammaModel = "sRGB";\n    for (let x = -25; x <= 25; x++) {\n        for (let y = -25; y <= 25; y++) {\n            const circleRadius = Math.sqrt(x ** 2 + y ** 2);\n            const luminanceVariationBound = 0.5;\n            const luminanceVariation = (Math.random() * luminanceVariationBound - luminanceVariationBound / 2) + 1;\n            if ((circleRadius > 13.5 && circleRadius <= 20.5) && !SectorUtilities.IsPointInSector({ x: x, y: y }, sectorDefinition)) {\n                calibrationGrid.setColourByXY(x, y, converter.Luv_to_RGB([testLuv[0] * luminanceVariation, testLuv[1], testLuv[2]]));\n            }\n            else {\n                calibrationGrid.setColourByXY(x, y, converter.Luv_to_RGB([baseLuv[0] * luminanceVariation, baseLuv[1], baseLuv[2]]));\n            }\n        }\n    }\n    return calibrationGrid;\n}\n\n;// CONCATENATED MODULE: ./src/calibration/CalibrationTest.ts\n\n\n\nclass CalibrationTest {\n    constructor(parentDiv, baseLuv, testLuv) {\n        this.parentDiv = parentDiv;\n        this.container = document.createElement("div");\n        this.parentDiv.appendChild(this.container);\n        this.container.style.background = "#000000";\n        this.container.style.height = "100%";\n        this.container.style.alignItems = "center";\n        this.container.style.display = "flex";\n        this.container.style.flexDirection = "column";\n        this.unableToTell = document.createElement("button");\n        this.unableToTell.innerText = "Unable to tell";\n        this.container.appendChild(this.unableToTell);\n        this.canvas = document.createElement("canvas");\n        this.canvas.style.margin = "auto";\n        this.container.appendChild(this.canvas);\n        this.calibrationImage = new CalibrationImage(this.canvas);\n        this.baseLuv = baseLuv;\n        this.testLuv = testLuv;\n        this.lastTime = 0;\n        let quadrantSelector = Math.random();\n        while (quadrantSelector === 1) {\n            quadrantSelector = Math.random();\n        }\n        if (quadrantSelector < 0.125) {\n            this.quadrant = Quadrant.North;\n        }\n        else if (quadrantSelector < 0.25) {\n            this.quadrant = Quadrant.NorthEast;\n        }\n        else if (quadrantSelector < 0.375) {\n            this.quadrant = Quadrant.East;\n        }\n        else if (quadrantSelector < 0.5) {\n            this.quadrant = Quadrant.SouthEast;\n        }\n        else if (quadrantSelector < 0.625) {\n            this.quadrant = Quadrant.South;\n        }\n        else if (quadrantSelector < 0.75) {\n            this.quadrant = Quadrant.SouthWest;\n        }\n        else if (quadrantSelector < 0.875) {\n            this.quadrant = Quadrant.West;\n        }\n        else {\n            this.quadrant = Quadrant.NorthWest;\n        }\n        this.animationRunning = false;\n    }\n    async getCalibrationResult() {\n        this.animationRunning = true;\n        window.requestAnimationFrame((time) => { this.animate(time); });\n        return new Promise((resolve) => {\n            this.canvas.addEventListener("click", (event) => {\n                this.animationRunning = false;\n                const x = event.offsetX - this.calibrationImage.originX;\n                const y = this.calibrationImage.totalY - event.offsetY - this.calibrationImage.originY;\n                const sectorDefinition = SectorUtilities.GetSectorDefinition(this.quadrant);\n                const correctClick = SectorUtilities.IsPointInSector({ x: x, y: y }, sectorDefinition);\n                console.log(`OffsetX=${event.offsetX}, OffsetY=${event.offsetY}, X=${x}, Y=${y}, correct=${correctClick ? "true" : "false"}`);\n                this.container.remove();\n                resolve(correctClick);\n            }, { once: true });\n            this.unableToTell.addEventListener("click", () => {\n                this.animationRunning = false;\n                this.container.remove();\n                resolve(false);\n            }, { once: true });\n        });\n    }\n    animate(time) {\n        if (this.animationRunning) {\n            if (time - this.lastTime > 50) {\n                const generatedGrid = setupCalibration(this.baseLuv, this.testLuv, this.quadrant);\n                this.calibrationImage.initialiseCanvas(generatedGrid);\n                this.lastTime = time;\n            }\n            window.requestAnimationFrame((newTime) => { this.animate(newTime); });\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/calibration/CalibrationScheduler.ts\n\n\nclass CalibrationScheduler {\n    constructor() {\n        this.initialPoint = { x: 0, y: 0 };\n        this.luminance = 50;\n        this.calibrationSearch = [\n            new CalibrationBinarySearch(this.initialPoint, 0, 10),\n            new CalibrationBinarySearch(this.initialPoint, 30, 10),\n            new CalibrationBinarySearch(this.initialPoint, 60, 10),\n            new CalibrationBinarySearch(this.initialPoint, 90, 10),\n            new CalibrationBinarySearch(this.initialPoint, 120, 10),\n            new CalibrationBinarySearch(this.initialPoint, 150, 10),\n            new CalibrationBinarySearch(this.initialPoint, 180, 10),\n            new CalibrationBinarySearch(this.initialPoint, 210, 10),\n            new CalibrationBinarySearch(this.initialPoint, 240, 10),\n            new CalibrationBinarySearch(this.initialPoint, 270, 10),\n            new CalibrationBinarySearch(this.initialPoint, 300, 10),\n            new CalibrationBinarySearch(this.initialPoint, 330, 10),\n        ];\n        this.foundCalibrations = [];\n    }\n    async findPoint() {\n        const introductionContainer = document.querySelector("#introduction");\n        const calibrationHost = document.querySelector("#canvasHost");\n        if (introductionContainer === null) {\n            throw new Error("Can\'t locate intorduction container");\n        }\n        if (calibrationHost === null) {\n            throw new Error("Can\'t find canvashost");\n        }\n        introductionContainer.classList.add("hide-all");\n        calibrationHost.classList.remove("hide-all");\n        while (this.calibrationSearch.length !== 0) {\n            const currentIndex = Math.floor(Math.random() * this.calibrationSearch.length);\n            if (currentIndex === this.calibrationSearch.length) {\n                continue;\n            }\n            const currentCalibration = this.calibrationSearch[currentIndex];\n            if (currentCalibration === undefined) {\n                throw new Error("Unable to find calibration");\n            }\n            const currentPoint = currentCalibration.getCurrentPoint();\n            if (isNaN(currentPoint.x) || isNaN(currentPoint.y)) {\n                console.log(`Bad value`);\n            }\n            else {\n                console.log(`Point x=${currentPoint.x} y=${currentPoint.y}`);\n            }\n            let tester = new CalibrationTest(calibrationHost, [this.luminance, this.initialPoint.x, this.initialPoint.y], [this.luminance, currentPoint.x, currentPoint.y]);\n            let result = await tester.getCalibrationResult();\n            currentCalibration.prepareNextPoint(result);\n            if (currentCalibration.isGapLessThan(0.001)) {\n                this.foundCalibrations.push(currentCalibration);\n                this.calibrationSearch.splice(currentIndex, 1);\n            }\n        }\n        this.foundCalibrations.forEach((currentSearch) => {\n            const currentPoint = currentSearch.getFinalPoint();\n            console.log(`Final point: X:${currentPoint.x}, Y:${currentPoint.y}`);\n        });\n    }\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\nconst approach1Button = document.querySelector("#approach1");\nif (approach1Button === null) {\n    throw new Error("Can\'t locate intorduction container");\n}\napproach1Button.addEventListener("click", async () => {\n    let foo = new CalibrationScheduler();\n    await foo.findPoint();\n});\nconst x = 0.403;\nconst y = 0.442;\nconst Y = 0.5;\nconst X = Y / y * x;\nconst Z = Y / y * (1 - x - y);\nconst converter = new dist/* ColorConverter */.N();\nconverter.RefWhite = "D65";\nconverter.GammaModel = "sRGB";\nconst Luv = converter.XYZ_to_Luv([X, Y, Z]);\nconsole.count(`Luv=[${Luv[0]}, ${Luv[1]}, ${Luv[2]}], u\'=${4 * X / (X + 15 * Y + 3 * Z)} v\'=${9 * Y / (X + 15 * Y + 3 * Z)}`);\nconsole.log("foo");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixHQUFHO1lBQ3JCLElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3JELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQ3RELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQ3RELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1lBQ3RELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQ3ZELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQ3ZELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQ3ZELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQ3ZELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQ3ZELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQ3ZELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1lBQ3ZELElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1NBQzFELENBQUM7UUFFRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLENBQUM7SUFFTSxLQUFLLENBQUMsU0FBUztRQUNsQixNQUFNLHFCQUFxQixHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQWlCLGVBQWUsQ0FBQyxDQUFD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SyxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb2xvdXItYmxpbmQtc2ltdWxhdG9yLy4vc3JjL21hdGgvTWF0aEV4dGVuc2lvbnMudHM/ODU2OCIsIndlYnBhY2s6Ly9jb2xvdXItYmxpbmQtc2ltdWxhdG9yLy4vc3JjL21hdGgvTGluZS50cz9hMGE2Iiwid2VicGFjazovL2NvbG91ci1ibGluZC1zaW11bGF0b3IvLi9zcmMvY2FsaWJyYXRpb24vQ2FsaWJyYXRpb25CaW5hcnlTZWFyY2gudHM/ZDc1ZSIsIndlYnBhY2s6Ly9jb2xvdXItYmxpbmQtc2ltdWxhdG9yLy4vc3JjL2NhbGlicmF0aW9uL0NhbGlicmF0aW9uSW1hZ2UudHM/OWEyNCIsIndlYnBhY2s6Ly9jb2xvdXItYmxpbmQtc2ltdWxhdG9yLy4vc3JjL2NhbGlicmF0aW9uL0NhbGlicmF0aW9uR3JpZC50cz80YzM1Iiwid2VicGFjazovL2NvbG91ci1ibGluZC1zaW11bGF0b3IvLi9zcmMvY2FsaWJyYXRpb24vU2VjdG9yVXRpbGl0aWVzLnRzPzNlNTAiLCJ3ZWJwYWNrOi8vY29sb3VyLWJsaW5kLXNpbXVsYXRvci8uL3NyYy9jYWxpYnJhdGlvbi9DYWxpYnJhdGlvblNldHVwLnRzPzA0YTIiLCJ3ZWJwYWNrOi8vY29sb3VyLWJsaW5kLXNpbXVsYXRvci8uL3NyYy9jYWxpYnJhdGlvbi9DYWxpYnJhdGlvblRlc3QudHM/NWY0ZiIsIndlYnBhY2s6Ly9jb2xvdXItYmxpbmQtc2ltdWxhdG9yLy4vc3JjL2NhbGlicmF0aW9uL0NhbGlicmF0aW9uU2NoZWR1bGVyLnRzP2FlNTMiLCJ3ZWJwYWNrOi8vY29sb3VyLWJsaW5kLXNpbXVsYXRvci8uL3NyYy9pbmRleC50cz9mZmI0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBNYXRoVXRpbGl0aWVzIHtcblx0cHVibGljIHN0YXRpYyBpc1plcm8odmFsdWU6IG51bWJlcik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBNYXRoLmFicyh2YWx1ZSkgPCAxZS05O1xuXHR9XG5cblx0cHVibGljIHN0YXRpYyBkZWdyZWVzVG9HcmFkaWVudChkZWdyZWVzOiBudW1iZXIpOiBudW1iZXIge1xuXHRcdGlmIChkZWdyZWVzID09PSA5MCkge1xuXHRcdFx0cmV0dXJuIE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHR9IGVsc2UgaWYgKGRlZ3JlZXMgPT09IDI3MCkge1xuXHRcdFx0cmV0dXJuIE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcblx0XHR9XG5cdFx0cmV0dXJuIE1hdGgudGFuKGRlZ3JlZXMgKiBNYXRoLlBJIC8gMTgwKTtcblx0fVxufVxuXG4iLCJpbXBvcnQgdHlwZSB7IFBvaW50IH0gZnJvbSBcIi4vQ2FydGVzaWFuXCI7XG5pbXBvcnQgeyBNYXRoVXRpbGl0aWVzIH0gZnJvbSBcIi4vTWF0aEV4dGVuc2lvbnNcIjtcblxudHlwZSBDYXJ0ZXNpYW5MaW5lID0ge1xuICAgIHlJbnRlcmNlcHQ6IG51bWJlcjtcbiAgICBncmFkaWVudDogbnVtYmVyO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBMaW5lIHtcbiAgICByZWFkb25seSBMaW5lRm9ybXVsYTogQ2FydGVzaWFuTGluZSB8IG51bWJlcjtcblxuICAgIHB1YmxpYyBzdGF0aWMgeUludGVyY2VwdChwb3NpdGlvbjogUG9pbnQsIGdyYWRpZW50OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICBjb25zdCByaXNlRnJvbU9yaWdpbiA9IHBvc2l0aW9uLnggKiBncmFkaWVudDtcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uLnkgLSByaXNlRnJvbU9yaWdpbjtcbiAgICB9XG5cbiAgICAvLyBjb25zdHJ1Y3QgYSBsaW5lIGluIHRoZSBmb3JtIG9mIHkgPSBteCArIGFcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoZ3JhZGllbnQ6IG51bWJlciwgeUludGVyY2VwdDogbnVtYmVyKTtcblxuICAgIC8vIGNvbnN0cnVjdCBhIHZlcnRpY2FsIGxpbmUgaW4gdGhlIGZvcm0gb2YgeCA9IG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogbnVtYmVyKTtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvciguLi5hcmd2OiBudW1iZXJbXSkge1xuICAgICAgICBpZiAoYXJndi5sZW5ndGggPT0gMikge1xuICAgICAgICAgICAgdGhpcy5MaW5lRm9ybXVsYSA9IHsgZ3JhZGllbnQ6IGFyZ3ZbMF0hLCB5SW50ZXJjZXB0OiBhcmd2WzFdISB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5MaW5lRm9ybXVsYSA9IGFyZ3ZbMF0hO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gSXMgdGhlIHBvaW50IHRvIHRoZSBsZWZ0IG9mIGEgbGluZSAoZm9yIGEgaG9yaXpvbnRhbCBsaW5lLCBwb2ludCBpcyBhYm92ZSlcbiAgICBwdWJsaWMgSXNQb2ludExlZnRPZkxpbmUocG9zaXRpb246IFBvaW50KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5MaW5lRm9ybXVsYSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgLy8gSWYgaXQncyBhIGxpbmUsIHRoaXMgaXMgYW4gZWFzeSB0ZXN0LlxuICAgICAgICAgICAgcmV0dXJuIChwb3NpdGlvbi54IDwgdGhpcy5MaW5lRm9ybXVsYSlcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE91ciBmb3JtdWxhIGlzIGluIHRoZSBmb3JtIG9mIHkgPSBteCArIGNcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gZ3JhZGllbnQsIGpzdXQgY2hlY2sgaWYgaXQncyBhYm92ZS4uLlxuICAgICAgICBpZiAodGhpcy5MaW5lRm9ybXVsYS5ncmFkaWVudCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIChwb3NpdGlvbi55ID4gdGhpcy5MaW5lRm9ybXVsYS55SW50ZXJjZXB0KVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIGp1c3QgY2hlY2tcblxuICAgICAgICAvLyB5PW14K2NcbiAgICAgICAgLy8gKHktYykvbT14XG4gICAgICAgIHJldHVybiAocG9zaXRpb24ueCA8IChwb3NpdGlvbi55IC0gdGhpcy5MaW5lRm9ybXVsYS55SW50ZXJjZXB0KSAvIHRoaXMuTGluZUZvcm11bGEuZ3JhZGllbnQpXG4gICAgfVxuXG4gICAgLy8gSXMgdGhlIHBvaW50IHRvIHRoZSByaWdodCBvZiBhIGxpbmUgKGZvciBhIGhvcml6b250YWwgbGluZSwgcG9pbnQgaXMgYmVsb3cpXG4gICAgcHVibGljIElzUG9pbnRSaWdodE9mTGluZShwb3NpdGlvbjogUG9pbnQpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLkxpbmVGb3JtdWxhID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAvLyBJZiBpdCdzIGEgbGluZSwgdGhpcyBpcyBhbiBlYXN5IHRlc3QuXG4gICAgICAgICAgICByZXR1cm4gKHBvc2l0aW9uLnggPiB0aGlzLkxpbmVGb3JtdWxhKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3VyIGZvcm11bGEgaXMgaW4gdGhlIGZvcm0gb2YgeSA9IG14ICsgY1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBncmFkaWVudCwganN1dCBjaGVjayBpZiBpdCdzIGFib3ZlLi4uXG4gICAgICAgIGlmICh0aGlzLkxpbmVGb3JtdWxhLmdyYWRpZW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gKHBvc2l0aW9uLnkgPCB0aGlzLkxpbmVGb3JtdWxhLnlJbnRlcmNlcHQpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBPdGhlcndpc2UganVzdCBjaGVja1xuXG4gICAgICAgIC8vIHk9bXgrY1xuICAgICAgICAvLyAoeS1jKS9tPXhcbiAgICAgICAgcmV0dXJuIChwb3NpdGlvbi54ID4gKHBvc2l0aW9uLnkgLSB0aGlzLkxpbmVGb3JtdWxhLnlJbnRlcmNlcHQpIC8gdGhpcy5MaW5lRm9ybXVsYS5ncmFkaWVudClcblxuICAgIH1cblxuICAgIHB1YmxpYyBpc1BvaW50T25MaW5lKHBvc2l0aW9uOiBQb2ludCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodHlwZW9mIHRoaXMuTGluZUZvcm11bGEgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIC8vIElmIGl0J3MgYSBsaW5lLCB0aGlzIGlzIGFuIGVhc3kgdGVzdC5cbiAgICAgICAgICAgIHJldHVybiAoTWF0aFV0aWxpdGllcy5pc1plcm8ocG9zaXRpb24ueCAtIHRoaXMuTGluZUZvcm11bGEpKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3VyIGZvcm11bGEgaXMgaW4gdGhlIGZvcm0gb2YgeSA9IG14ICsgY1xuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBncmFkaWVudCwganN1dCBjaGVjayBpZiBpdCdzIGFib3ZlLi4uXG4gICAgICAgIGlmICh0aGlzLkxpbmVGb3JtdWxhLmdyYWRpZW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gKE1hdGhVdGlsaXRpZXMuaXNaZXJvKHBvc2l0aW9uLnkgLSB0aGlzLkxpbmVGb3JtdWxhLnlJbnRlcmNlcHQpKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT3RoZXJ3aXNlIGp1c3QgY2hlY2tcblxuICAgICAgICAvLyB5PW14K2NcbiAgICAgICAgLy8gKHktYykvbT14XG4gICAgICAgIHJldHVybiAoTWF0aFV0aWxpdGllcy5pc1plcm8ocG9zaXRpb24ueSAtICh0aGlzLkxpbmVGb3JtdWxhLmdyYWRpZW50ICogcG9zaXRpb24ueCkgKyB0aGlzLkxpbmVGb3JtdWxhLnlJbnRlcmNlcHQpKVxuICAgIH1cblxuICAgIC8vIEEgcG9zaXRpdmUgZGlzdGFuY2UgbW92ZXMgcmlnaHQsIG9yIHVwIG9uIGEgdmVydGljYWwgbGluZVxuXG4gICAgcHVibGljIGdldFBvaW50QWxvbmdMaW5lKHBvc2l0aW9uOiBQb2ludCwgZGlzdGFuY2U6IG51bWJlcik6IFBvaW50IHtcbiAgICAgICAgaWYgKCF0aGlzLmlzUG9pbnRPbkxpbmUocG9zaXRpb24pKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwb2ludCBpcyBub3Qgb24gdGhlIExpbmUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5MaW5lRm9ybXVsYSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgLy8gSWYgaXQncyBhIGxpbmUsIHRoaXMgaXMgYW4gZWFzeSB0ZXN0LlxuICAgICAgICAgICAgcmV0dXJuICh7IHg6IHBvc2l0aW9uLngsIHk6IHBvc2l0aW9uLnkgKyBkaXN0YW5jZSB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLkxpbmVGb3JtdWxhLmdyYWRpZW50ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gKHsgeDogcG9zaXRpb24ueCArIGRpc3RhbmNlLCB5OiBwb3NpdGlvbi55IH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhbmdsZT1NYXRoLmF0YW4odGhpcy5MaW5lRm9ybXVsYS5ncmFkaWVudCk7XG4gICAgICAgIGNvbnN0IHg9TWF0aC5jb3MoYW5nbGUpKmRpc3RhbmNlK3Bvc2l0aW9uLng7XG5cbiAgICAgICAgY29uc3QgeSA9IHRoaXMuTGluZUZvcm11bGEuZ3JhZGllbnQgKiB4ICsgdGhpcy5MaW5lRm9ybXVsYS55SW50ZXJjZXB0O1xuXG4gICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcbiAgICB9XG59IiwiaW1wb3J0IHR5cGUgeyBQb2ludCB9IGZyb20gXCIuLi9tYXRoL0NhcnRlc2lhblwiXG5pbXBvcnQgeyBMaW5lIH0gZnJvbSBcIi4uL21hdGgvTGluZVwiO1xuaW1wb3J0IHsgTWF0aFV0aWxpdGllcyB9IGZyb20gXCIuLi9tYXRoL01hdGhFeHRlbnNpb25zXCI7XG5cbmV4cG9ydCBjbGFzcyBDYWxpYnJhdGlvbkJpbmFyeVNlYXJjaCB7XG4gICAgcHJpdmF0ZSBvcmlnaW46IFBvaW50O1xuXG4gICAgcHJpdmF0ZSBzZWFyY2hMaW5lOiBMaW5lO1xuXG4gICAgcHJpdmF0ZSB1cHBlckJvdW5kOiBudW1iZXIgfCBudWxsO1xuICAgIHByaXZhdGUgbG93ZXJCb3VuZDogbnVtYmVyXG5cbiAgICBwcml2YXRlIGN1cnJlbnQ6IG51bWJlcjtcblxuICAgIHByaXZhdGUgaW5pdGlhbERpc3RhbmNlOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgcmVhZG9ubHkgYW5nbGU6IG51bWJlcjtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihvcmlnaW46IFBvaW50LCBhbmdsZTogbnVtYmVyLCBpbml0aWFsRGlzdGFuY2U6IG51bWJlcikge1xuICAgICAgICB0aGlzLm9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgY29uc3QgZ3JhZGllbnQgPSBNYXRoVXRpbGl0aWVzLmRlZ3JlZXNUb0dyYWRpZW50KGFuZ2xlKTtcbiAgICAgICAgaWYgKGdyYWRpZW50ID09PSBJbmZpbml0eSB8fCBncmFkaWVudCA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgICB0aGlzLnNlYXJjaExpbmUgPSBuZXcgTGluZShvcmlnaW4ueCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB5SW50ZXJjZXB0ID0gTGluZS55SW50ZXJjZXB0KG9yaWdpbiwgZ3JhZGllbnQpO1xuICAgICAgICAgICAgdGhpcy5zZWFyY2hMaW5lID0gbmV3IExpbmUoZ3JhZGllbnQsIHlJbnRlcmNlcHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbml0aWFsRGlzdGFuY2UgPSBpbml0aWFsRGlzdGFuY2U7XG5cbiAgICAgICAgdGhpcy5hbmdsZSA9IGFuZ2xlO1xuXG4gICAgICAgIGlmICh0aGlzLmFuZ2xlID4gOTAgJiYgdGhpcy5hbmdsZSA8PSAyNzApIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbERpc3RhbmNlICo9IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgY3VycmVudCBtaW5pbXVtXG4gICAgICAgIHRoaXMubG93ZXJCb3VuZCA9IDA7XG4gICAgICAgIHRoaXMudXBwZXJCb3VuZCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5pbml0aWFsRGlzdGFuY2U7XG5cbiAgICB9XG5cbiAgICBwdWJsaWMgcHJlcGFyZU5leHRQb2ludChwcmV2b2lvdXNGb3VuZDogYm9vbGVhbikge1xuICAgICAgICBpZiAocHJldm9pb3VzRm91bmQpIHtcbiAgICAgICAgICAgIHRoaXMudXBwZXJCb3VuZCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG93ZXJCb3VuZCA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnVwcGVyQm91bmQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIHN0aWxsIGxvb2tpbmcgZm9yIGFuIHVwcGVyYm91bmRcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuY3VycmVudCAqIDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSAodGhpcy51cHBlckJvdW5kICsgdGhpcy5sb3dlckJvdW5kKSAvIDJcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKGBHYXAgYmV0d2VlbiBpdGVtczogJHt0aGlzLnVwcGVyQm91bmQgPT09IG51bGwgPyBcInNlYXJjaGluZy4uLlwiIDogdGhpcy51cHBlckJvdW5kIC0gdGhpcy5sb3dlckJvdW5kfWApO1xuICAgIH1cblxuICAgIHB1YmxpYyBpc0dhcExlc3NUaGFuKGdhcDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICh0aGlzLnVwcGVyQm91bmQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAoTWF0aC5hYnModGhpcy51cHBlckJvdW5kIC0gdGhpcy5sb3dlckJvdW5kKSA8PSBnYXApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldEN1cnJlbnRQb2ludCgpOiBQb2ludCB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBHZXRQb2ludCAtIEdhcCBiZXR3ZWVuIGl0ZW1zOiAke3RoaXMudXBwZXJCb3VuZCA9PT0gbnVsbCA/IFwic2VhcmNoaW5nLi4uXCIgOiB0aGlzLnVwcGVyQm91bmQgLSB0aGlzLmxvd2VyQm91bmR9IGN1cnJlbnQ6JHt0aGlzLmN1cnJlbnR9YCk7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQb2ludCA9IHRoaXMuc2VhcmNoTGluZS5nZXRQb2ludEFsb25nTGluZSh0aGlzLm9yaWdpbiwgdGhpcy5jdXJyZW50KTtcbiAgICAgICAgaWYgKGlzTmFOKGN1cnJlbnRQb2ludC54KSB8fCBpc05hTihjdXJyZW50UG9pbnQueSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBCYWQgdmFsdWVgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3VycmVudFBvaW50O1xuICAgIH1cblxuXG4gICAgcHVibGljIGdldEZpbmFsUG9pbnQoKTogUG9pbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWFyY2hMaW5lLmdldFBvaW50QWxvbmdMaW5lKHRoaXMub3JpZ2luLCB0aGlzLmxvd2VyQm91bmQpO1xuICAgIH1cbn0iLCJpbXBvcnQgdHlwZSB7IE51bWVyaWNUcmlwbGUgfSBmcm9tIFwiY2llLWNvbG9yY29udmVydGVyL2Rpc3QvTWF0cml4XCI7XG5pbXBvcnQgdHlwZSB7IENhbGlicmF0aW9uR3JpZCB9IGZyb20gXCIuL0NhbGlicmF0aW9uR3JpZFwiO1xuXG5leHBvcnQgY2xhc3MgQ2FsaWJyYXRpb25JbWFnZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjYWxpYnJhdGlvbkNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcbiAgICBwdWJsaWMgcmVhZG9ubHkgb3JpZ2luWD01MSo4LzI7XG4gICAgcHVibGljIHJlYWRvbmx5IG9yaWdpblk9NTEqOC8yO1xuICAgIHB1YmxpYyByZWFkb25seSB0b3RhbFg9NTEqODtcbiAgICBwdWJsaWMgcmVhZG9ubHkgdG90YWxZPTUxKjg7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoY2FsaWJyYXRpb25DYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuY2FsaWJyYXRpb25DYW52YXMgPSBjYWxpYnJhdGlvbkNhbnZhcztcbiAgICAgICAgdGhpcy5jYWxpYnJhdGlvbkNhbnZhcy53aWR0aCA9IDggKiA1MTtcbiAgICAgICAgdGhpcy5jYWxpYnJhdGlvbkNhbnZhcy5oZWlnaHQgPSA4ICogNTE7XG4gICAgICAgIHRoaXMuY2FsaWJyYXRpb25DYW52YXMuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjMDAwMDAwXCI7XG4gICAgICAgIGNvbnN0IG15Q29udGV4dCA9IHRoaXMuY2FsaWJyYXRpb25DYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgICAgICBpZiAobXlDb250ZXh0PT09bnVsbCl7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBnZXQgY29udGV4dFwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbnRleHQ9bXlDb250ZXh0O1xuICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2Utb3ZlclwiO1xuICAgIH1cblxuICAgIHB1YmxpYyBpbml0aWFsaXNlQ2FudmFzKGNhbGlicmF0aW9uR3JpZDogQ2FsaWJyYXRpb25HcmlkKTogdm9pZCB7XG4gICAgICAgIGZvciAobGV0IGNvbHVtbiA9IDA7IGNvbHVtbiA8PSA1MDsgY29sdW1uKyspIHtcbiAgICAgICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8PSA1MDsgcm93KyspIHtcbiAgICAgICAgICAgICAgICBDYWxpYnJhdGlvbkltYWdlLmRyYXdDaXJjbGUoY29sdW1uLCByb3csIGNhbGlicmF0aW9uR3JpZC5nZXRDb2xvdXJCeUNvbHVtblJvdyhjb2x1bW4sIHJvdyksIHRoaXMuY29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIHByaXZhdGUgc3RhdGljIGRyYXdDaXJjbGUoY29sdW1uOiBudW1iZXIsIHJvdzogbnVtYmVyLCBjb2xvcjogTnVtZXJpY1RyaXBsZSwgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGRyYXdYID0gY29sdW1uICogODtcbiAgICAgICAgY29uc3QgZHJhd1kgPSByb3cgKiA4O1xuXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gYHJnYigke2NvbG9yWzBdfSwke2NvbG9yWzFdfSwke2NvbG9yWzJdfSlgO1xuXG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoZHJhd1ggKyAzLCBkcmF3WSArIDIsIDEsIDEpO1xuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGRyYXdYICsgNCwgZHJhd1kgKyAyLCAxLCAxKTtcbiAgICAgICAgY29udGV4dC5maWxsUmVjdChkcmF3WCArIDIsIGRyYXdZICsgMywgMSwgMSk7XG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoZHJhd1ggKyAzLCBkcmF3WSArIDMsIDEsIDEpO1xuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGRyYXdYICsgNCwgZHJhd1kgKyAzLCAxLCAxKTtcbiAgICAgICAgY29udGV4dC5maWxsUmVjdChkcmF3WCArIDUsIGRyYXdZICsgMywgMSwgMSk7XG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoZHJhd1ggKyAyLCBkcmF3WSArIDQsIDEsIDEpO1xuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGRyYXdYICsgMywgZHJhd1kgKyA0LCAxLCAxKTtcbiAgICAgICAgY29udGV4dC5maWxsUmVjdChkcmF3WCArIDQsIGRyYXdZICsgNCwgMSwgMSk7XG4gICAgICAgIGNvbnRleHQuZmlsbFJlY3QoZHJhd1ggKyA1LCBkcmF3WSArIDQsIDEsIDEpO1xuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KGRyYXdYICsgMywgZHJhd1kgKyA1LCAxLCAxKTtcbiAgICAgICAgY29udGV4dC5maWxsUmVjdChkcmF3WCArIDQsIGRyYXdZICsgNSwgMSwgMSk7XG4gICAgfVxufSIsImltcG9ydCB0eXBlIHsgTnVtZXJpY1RyaXBsZSB9IGZyb20gXCJjaWUtY29sb3Jjb252ZXJ0ZXIvZGlzdC9NYXRyaXhcIjtcblxuZXhwb3J0IGNsYXNzIENhbGlicmF0aW9uR3JpZCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBncmlkOiBOdW1lcmljVHJpcGxlW11bXSA9IFtdO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBJbml0aWFsaXNlIHRoZSBtYXRyaXggYXJyYXkuICAgICAgICBcbiAgICAgICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgNTE7IGNvbHVtbisrKSB7XG4gICAgICAgICAgICBjb25zdCByb3dBcnJheTogTnVtZXJpY1RyaXBsZVtdID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCA1MTsgcm93KyspIHtcblxuICAgICAgICAgICAgICAgIHJvd0FycmF5LnB1c2goWzAsIDAsIDBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ3JpZC5wdXNoKHJvd0FycmF5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFdoZW4gd2UgZ2VuZXJhdGUgdGhlc2UsIHdlIHdhbnQgdG8gdXNlIHggYW5kIHkgcmFuZ2luZyBmcm9tIC0yNSB0byAyNSwgd2l0aHRoZSBvcmlnaW4gaW4gdGhlIGNlbnRyZVxuICAgIHB1YmxpYyBzZXRDb2xvdXJCeVhZKHg6IG51bWJlciwgeTogbnVtYmVyLCBjb2xvdXI6IE51bWVyaWNUcmlwbGUpOiB2b2lkIHtcbiAgICAgICAgaWYgKHggPCAtMjUgfHwgeCA+IDI1KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ4IG11c3QgYmUgYmV0d2VlbiAtMjUgYW5kIDI1IGluY2x1c2l2ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeSA8IC0yNSB8fCB5ID4gMjUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInkgbXVzdCBiZSBiZXR3ZWVuIC0yNSBhbmQgMjUgaW5jbHVzaXZlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29sdW1uID0geCArIDI1O1xuICAgICAgICBjb25zdCByb3cgPSB5ICsgMjU7XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgdGhpcy5ncmlkW2NvbHVtbl0hW3Jvd10gPSBjb2xvdXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvbG91ckJ5WFkoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBOdW1lcmljVHJpcGxlIHtcbiAgICAgICAgaWYgKHggPCAtMjUgfHwgeCA+IDI1KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ4IG11c3QgYmUgYmV0d2VlbiAtMjUgYW5kIDI1IGluY2x1c2l2ZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoeSA8IC0yNSB8fCB5ID4gMjUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInkgbXVzdCBiZSBiZXR3ZWVuIC0yNSBhbmQgMjUgaW5jbHVzaXZlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29sdW1uID0geCArIDI1O1xuICAgICAgICBjb25zdCByb3cgPSB5ICsgMjU7XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgcmV0dXJuICh0aGlzLmdyaWRbY29sdW1uXSFbcm93XSEpO1xuICAgIH1cblxuICAgIC8vIFdoZW4gd2Ugd2FudCB0byBkcmF3IHRoZXNlIG9uIHRoZSBzY3JlZW4sIHdlIHdhbnQgdG8gdXNlIHJvdy9jb2x1bW4gZnJvbSAwIHRvIDUxIHdpdGggdGhlIG9yaWdpbiBpblxuICAgIC8vIHRoZSB0b3AgbGVmdCwgc28gYXMgd2UgbW92ZSBkb3duLCB3ZSBuZWVkIHRvIGluY3JlYXNlIHRoZSBudW1iZXJzICAgIFxuICAgIHB1YmxpYyBzZXRDb2xvdXJCeUNvbHVtblJvdyhjb2x1bW46IG51bWJlciwgcm93OiBudW1iZXIsIGNvbG91cjogTnVtZXJpY1RyaXBsZSk6IHZvaWQge1xuICAgICAgICBpZiAoY29sdW1uIDwgMCB8fCBjb2x1bW4gPiA1MCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29sdW1uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA1MCBpbmNsdXNpdmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvdyA8IDAgfHwgcm93ID4gNTApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJvdyBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNTAgaW5jbHVzaXZlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3Um93ID0gNTAgLSByb3c7XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgdGhpcy5ncmlkW2NvbHVtbl0hW25ld1Jvd10gPSBjb2xvdXI7XG4gICAgfVxuXG4gICAgcHVibGljIGdldENvbG91ckJ5Q29sdW1uUm93KGNvbHVtbjogbnVtYmVyLCByb3c6IG51bWJlcik6IE51bWVyaWNUcmlwbGUge1xuICAgICAgICBpZiAoY29sdW1uIDwgMCB8fCBjb2x1bW4gPiA1MSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY29sdW1uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA1MSBpbmNsdXNpdmVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJvdyA8IDAgfHwgcm93ID4gNTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJvdyBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNTEgaW5jbHVzaXZlXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3Um93ID0gNTAgLSByb3c7XG5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgcmV0dXJuICh0aGlzLmdyaWRbY29sdW1uXSFbbmV3Um93XSEpO1xuICAgIH1cblxuXG59IiwiaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuLi9tYXRoL0xpbmVcIjtcbmltcG9ydCB7IE1hdGhVdGlsaXRpZXMgfSBmcm9tIFwiLi4vbWF0aC9NYXRoRXh0ZW5zaW9uc1wiO1xuaW1wb3J0IHR5cGUgeyBQb2ludCB9IGZyb20gXCIuLi9tYXRoL0NhcnRlc2lhblwiO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG5leHBvcnQgY29uc3QgZW51bSBRdWFkcmFudCB7XG4gICAgTm9ydGgsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBOb3J0aEVhc3QsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBFYXN0LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgU291dGhFYXN0LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgU291dGgsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBTb3V0aFdlc3QsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBXZXN0LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgTm9ydGhXZXN0LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG59XG5cbmV4cG9ydCB0eXBlIFNlY3RvckRlZmluaXRpb24gPSB7XG4gICAgLy8gVGhlIGdyYWRpZW50cyBvZiB0aGUgY2xvY2t3aXNlIGFuZCBhbnRpY2xvY2t3aXNlIGVkZ2VzIG9mIHRoZSBzZWdtZW50XG4gICAgZ3JhZGllbnRBbnRpQ2xvY2t3aXNlOiBMaW5lO1xuICAgIGdyYWRpZW50Q2xvY2t3aXNlOiBMaW5lO1xuXG4gICAgLy8gVGhlIHBvc2l0aW9uIG9mIHRoZSBlZGdlIHJlbGF0aXZlIHRvIGEgcG9pbnQgaW4gdGhlIHdlZGdlLlxuICAgIC8vIElmIHRoaXMgaXMgcG9zaXRpdmUsIHRoZSBwb2ludHMgd2Ugd2FudCBhcmUgdG8gdGhlIHJpZ2h0IG9mIHRoZSBlZGdlLCBpZiBpdCBpcyBuZWdhdGl2ZSwgdGhlIGxlZnRcbiAgICBncmFkaWVudEFudGlDbG9ja3dpc2VSaWdodDogYm9vbGVhbjtcbiAgICBncmFkaWVudENsb2Nrd2lzZVJpZ2h0OiBib29sZWFuO1xufTtcblxuZXhwb3J0IGNsYXNzIFNlY3RvclV0aWxpdGllcyB7XG5cbiAgICAvLyBUbyBmaW5kIHRoZSBzZWdtZW50IHRoYXQgd2UncmUgbm90IGludGVyZXN0ZWQgaW4sIHdlIG5lZWQgdGhlIGdyYWRpZW50cyBvZiB0aGUgdHdvIGxpbmVzXG4gICAgLy8gdGhhdCBkZWxpbmlhdGUgb3VyIHNlZ21lbnRzLCBhdCBlaXRoZXIgMjIuNSBvciA2Ny41IGRlZ3JlZXNcbiAgICAvLyBUaGUgbGluZXMgb24gdGhlIGVkZ2Ugb2Ygb3VyIHNsaWNlIGFyZSBlaXRoZXIgYXQgKy8tIDIyLjUgYW5kICsvLTY3LjUgZGVncmVlcy5cblxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IGRlZ3JlZXMyMkdyYWRpZW50ID0gTWF0aFV0aWxpdGllcy5kZWdyZWVzVG9HcmFkaWVudCgyMi41KTtcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBkZWdyZWVzNjdHcmFkaWVudCA9IE1hdGhVdGlsaXRpZXMuZGVncmVlc1RvR3JhZGllbnQoNjcuNSk7XG5cbiAgICBwdWJsaWMgc3RhdGljIEdldFNlY3RvckRlZmluaXRpb24ocXVhZHJhbnQ6IFF1YWRyYW50KTogU2VjdG9yRGVmaW5pdGlvbiB7XG5cbiAgICAgICAgLy8gR2V0IHRoZSBncmFkaWVudHMgb2YgdGhlIHR3byBsaW5lcyB3ZSdyZSBpbnRlcmVzdGVkIGluLCB3aXRoIHRoZSBmaXJzdCBiZWluZyB0aGUgYW50aSBjbG9ja3dpc2UgYm9yZGVyLCBcbiAgICAgICAgLy8gYW5kIHRoZSBzZWNvbmQgYmVpbmcgdGhlIGNsb2Nrd2lzZVxuXG4gICAgICAgIGxldCBzZWN0b3JEZWZpbml0aW9uOiBTZWN0b3JEZWZpbml0aW9uO1xuXG4gICAgICAgIHN3aXRjaCAocXVhZHJhbnQpIHtcbiAgICAgICAgICAgIGNhc2UgUXVhZHJhbnQuTm9ydGg6IHtcbiAgICAgICAgICAgICAgICBzZWN0b3JEZWZpbml0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBncmFkaWVudEFudGlDbG9ja3dpc2U6IG5ldyBMaW5lKC0xICogU2VjdG9yVXRpbGl0aWVzLmRlZ3JlZXM2N0dyYWRpZW50LCAwKSxcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRDbG9ja3dpc2U6IG5ldyBMaW5lKFNlY3RvclV0aWxpdGllcy5kZWdyZWVzNjdHcmFkaWVudCwgMCksXG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50QW50aUNsb2Nrd2lzZVJpZ2h0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBncmFkaWVudENsb2Nrd2lzZVJpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBRdWFkcmFudC5Ob3J0aEVhc3Q6IHtcbiAgICAgICAgICAgICAgICBzZWN0b3JEZWZpbml0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBncmFkaWVudEFudGlDbG9ja3dpc2U6IG5ldyBMaW5lKFNlY3RvclV0aWxpdGllcy5kZWdyZWVzNjdHcmFkaWVudCwgMCksXG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50Q2xvY2t3aXNlOiBuZXcgTGluZShTZWN0b3JVdGlsaXRpZXMuZGVncmVlczIyR3JhZGllbnQsIDApLFxuICAgICAgICAgICAgICAgICAgICBncmFkaWVudEFudGlDbG9ja3dpc2VSaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRDbG9ja3dpc2VSaWdodDogZmFsc2UsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgUXVhZHJhbnQuRWFzdDoge1xuICAgICAgICAgICAgICAgIHNlY3RvckRlZmluaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50QW50aUNsb2Nrd2lzZTogbmV3IExpbmUoU2VjdG9yVXRpbGl0aWVzLmRlZ3JlZXMyMkdyYWRpZW50LCAwKSxcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRDbG9ja3dpc2U6IG5ldyBMaW5lKC0xICogU2VjdG9yVXRpbGl0aWVzLmRlZ3JlZXMyMkdyYWRpZW50LCAwKSxcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRBbnRpQ2xvY2t3aXNlUmlnaHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50Q2xvY2t3aXNlUmlnaHQ6IHRydWUsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgUXVhZHJhbnQuU291dGhFYXN0OiB7XG4gICAgICAgICAgICAgICAgc2VjdG9yRGVmaW5pdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRBbnRpQ2xvY2t3aXNlOiBuZXcgTGluZSgtMSAqIFNlY3RvclV0aWxpdGllcy5kZWdyZWVzMjJHcmFkaWVudCwgMCksXG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50Q2xvY2t3aXNlOiBuZXcgTGluZSgtMSAqIFNlY3RvclV0aWxpdGllcy5kZWdyZWVzNjdHcmFkaWVudCwgMCksXG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50QW50aUNsb2Nrd2lzZVJpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRDbG9ja3dpc2VSaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBRdWFkcmFudC5Tb3V0aDoge1xuICAgICAgICAgICAgICAgIHNlY3RvckRlZmluaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50QW50aUNsb2Nrd2lzZTogbmV3IExpbmUoLTEgKiBTZWN0b3JVdGlsaXRpZXMuZGVncmVlczY3R3JhZGllbnQsIDApLFxuICAgICAgICAgICAgICAgICAgICBncmFkaWVudENsb2Nrd2lzZTogbmV3IExpbmUoU2VjdG9yVXRpbGl0aWVzLmRlZ3JlZXM2N0dyYWRpZW50LCAwKSxcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRBbnRpQ2xvY2t3aXNlUmlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBncmFkaWVudENsb2Nrd2lzZVJpZ2h0OiB0cnVlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFF1YWRyYW50LlNvdXRoV2VzdDoge1xuICAgICAgICAgICAgICAgIHNlY3RvckRlZmluaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50QW50aUNsb2Nrd2lzZTogbmV3IExpbmUoU2VjdG9yVXRpbGl0aWVzLmRlZ3JlZXM2N0dyYWRpZW50LCAwKSxcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRDbG9ja3dpc2U6IG5ldyBMaW5lKFNlY3RvclV0aWxpdGllcy5kZWdyZWVzMjJHcmFkaWVudCwgMCksXG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50QW50aUNsb2Nrd2lzZVJpZ2h0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRDbG9ja3dpc2VSaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBRdWFkcmFudC5XZXN0OiB7XG4gICAgICAgICAgICAgICAgc2VjdG9yRGVmaW5pdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRBbnRpQ2xvY2t3aXNlOiBuZXcgTGluZShTZWN0b3JVdGlsaXRpZXMuZGVncmVlczIyR3JhZGllbnQsIDApLFxuICAgICAgICAgICAgICAgICAgICBncmFkaWVudENsb2Nrd2lzZTogbmV3IExpbmUoLTEgKiBTZWN0b3JVdGlsaXRpZXMuZGVncmVlczIyR3JhZGllbnQsIDApLFxuICAgICAgICAgICAgICAgICAgICBncmFkaWVudEFudGlDbG9ja3dpc2VSaWdodDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50Q2xvY2t3aXNlUmlnaHQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFF1YWRyYW50Lk5vcnRoV2VzdDoge1xuICAgICAgICAgICAgICAgIHNlY3RvckRlZmluaXRpb24gPSB7XG4gICAgICAgICAgICAgICAgICAgIGdyYWRpZW50QW50aUNsb2Nrd2lzZTogbmV3IExpbmUoLTEgKiBTZWN0b3JVdGlsaXRpZXMuZGVncmVlczIyR3JhZGllbnQsIDApLFxuICAgICAgICAgICAgICAgICAgICBncmFkaWVudENsb2Nrd2lzZTogbmV3IExpbmUoLTEgKiBTZWN0b3JVdGlsaXRpZXMuZGVncmVlczY3R3JhZGllbnQsIDApLFxuICAgICAgICAgICAgICAgICAgICBncmFkaWVudEFudGlDbG9ja3dpc2VSaWdodDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRDbG9ja3dpc2VSaWdodDogZmFsc2UsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHF1YWRyYW50XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzZWN0b3JEZWZpbml0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgSXNQb2ludEluU2VjdG9yKHBvc2l0aW9uOiBQb2ludCwgc2VjdG9yRGVmaW5pdGlvbjogU2VjdG9yRGVmaW5pdGlvbik6IGJvb2xlYW4ge1xuICAgICAgICAvLyBJZiBpdCdzIG9uIGEgbGluZSB3ZSBhcmVuJ3QgaW50ZXJlc3RlZFxuICAgICAgICBpZiAoc2VjdG9yRGVmaW5pdGlvbi5ncmFkaWVudENsb2Nrd2lzZS5pc1BvaW50T25MaW5lKHBvc2l0aW9uKVxuICAgICAgICAgICAgfHwgc2VjdG9yRGVmaW5pdGlvbi5ncmFkaWVudEFudGlDbG9ja3dpc2UuaXNQb2ludE9uTGluZShwb3NpdGlvbikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGFudGljbG9ja3dpc2VPa2F5OiBib29sZWFuO1xuICAgICAgICBpZiAoc2VjdG9yRGVmaW5pdGlvbi5ncmFkaWVudEFudGlDbG9ja3dpc2VSaWdodCkge1xuICAgICAgICAgICAgYW50aWNsb2Nrd2lzZU9rYXk9c2VjdG9yRGVmaW5pdGlvbi5ncmFkaWVudEFudGlDbG9ja3dpc2UuSXNQb2ludFJpZ2h0T2ZMaW5lKHBvc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFudGljbG9ja3dpc2VPa2F5PXNlY3RvckRlZmluaXRpb24uZ3JhZGllbnRBbnRpQ2xvY2t3aXNlLklzUG9pbnRMZWZ0T2ZMaW5lKHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBjbG9ja3dpc2VPa2F5OiBib29sZWFuO1xuICAgICAgICBpZiAoc2VjdG9yRGVmaW5pdGlvbi5ncmFkaWVudENsb2Nrd2lzZVJpZ2h0KSB7XG4gICAgICAgICAgICBjbG9ja3dpc2VPa2F5PXNlY3RvckRlZmluaXRpb24uZ3JhZGllbnRDbG9ja3dpc2UuSXNQb2ludFJpZ2h0T2ZMaW5lKHBvc2l0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsb2Nrd2lzZU9rYXk9c2VjdG9yRGVmaW5pdGlvbi5ncmFkaWVudENsb2Nrd2lzZS5Jc1BvaW50TGVmdE9mTGluZShwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKGFudGljbG9ja3dpc2VPa2F5ICYmIGNsb2Nrd2lzZU9rYXkpO1xuICAgIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgTnVtZXJpY1RyaXBsZSB9IGZyb20gXCJjaWUtY29sb3Jjb252ZXJ0ZXIvZGlzdC9NYXRyaXhcIjtcbmltcG9ydCB7IENhbGlicmF0aW9uR3JpZCB9IGZyb20gXCIuL0NhbGlicmF0aW9uR3JpZFwiO1xuaW1wb3J0IHsgQ29sb3JDb252ZXJ0ZXIgfSBmcm9tIFwiY2llLWNvbG9yY29udmVydGVyXCI7XG5pbXBvcnQgdHlwZSB7IFF1YWRyYW50IH0gZnJvbSBcIi4vU2VjdG9yVXRpbGl0aWVzXCI7XG5pbXBvcnQgeyBTZWN0b3JVdGlsaXRpZXMgfSBmcm9tIFwiLi9TZWN0b3JVdGlsaXRpZXNcIjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1kdXBsaWNhdGUtaW1wb3J0c1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cENhbGlicmF0aW9uKGJhc2VMdXY6IE51bWVyaWNUcmlwbGUsIHRlc3RMdXY6IE51bWVyaWNUcmlwbGUsIGNsZWFyZWRRdWFkcmFudDogUXVhZHJhbnQpOiBDYWxpYnJhdGlvbkdyaWQge1xuICAgIGNvbnN0IHNlY3RvckRlZmluaXRpb24gPSBTZWN0b3JVdGlsaXRpZXMuR2V0U2VjdG9yRGVmaW5pdGlvbihjbGVhcmVkUXVhZHJhbnQpO1xuXG4gICAgY29uc3QgY2FsaWJyYXRpb25HcmlkID0gbmV3IENhbGlicmF0aW9uR3JpZCgpO1xuXG4gICAgY29uc3QgY29udmVydGVyID0gbmV3IENvbG9yQ29udmVydGVyKCk7XG5cbiAgICBjb252ZXJ0ZXIuUmVmV2hpdGUgPSBcIkQ2NVwiO1xuICAgIGNvbnZlcnRlci5HYW1tYU1vZGVsPVwic1JHQlwiO1xuXG4gICAgZm9yIChsZXQgeCA9IC0yNTsgeCA8PSAyNTsgeCsrKSB7XG4gICAgICAgIGZvciAobGV0IHkgPSAtMjU7IHkgPD0gMjU7IHkrKykge1xuICAgICAgICAgICAgLy8gVG8gc2VlIGlmIHBvaW50cyBhcmUgaW4gdGhlIGNpcmNsZSwgdXNlIHRoZSBmb3JtdWxhIGZvciBhIGNpcmNsZTogeF4yK3leMj1yYWRpdXNeMixcbiAgICAgICAgICAgIC8vIGFuZCBzZWUgaWYgdGhlIHJhZGl1cyBmYWxscyBpbnRvIHRoZSBvbmUgdGhhdCB3ZSB3YW50LiBPbmx5IGNhbGN1bGF0ZSBpdCBvbmNlLi4uXG4gICAgICAgICAgICBjb25zdCBjaXJjbGVSYWRpdXMgPSBNYXRoLnNxcnQoeCAqKiAyICsgeSAqKiAyKTtcblxuXG4gICAgICAgICAgICBjb25zdCBsdW1pbmFuY2VWYXJpYXRpb25Cb3VuZCA9IDAuNTtcbiAgICAgICAgICAgIGNvbnN0IGx1bWluYW5jZVZhcmlhdGlvbiA9IChNYXRoLnJhbmRvbSgpICogbHVtaW5hbmNlVmFyaWF0aW9uQm91bmQgLSBsdW1pbmFuY2VWYXJpYXRpb25Cb3VuZCAvIDIpICsgMTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byBkcmF3IGEgY29sb3VyIHBvaW50LCBvciBhIGJhY2tncm91bmQgcG9pbnQuIFdlIHdhbnQgdG8gZHJhd1xuICAgICAgICAgICAgLy8gYSBjb2xvdXIgcG9pbnQsIG9uIHRoZSBjaXJjbGUsIHVubGVzcyBpdCdzIGFsc28gcGFydCBvZiB0aGUgZW1wdHkgd2VkZ2UuXG4gICAgICAgICAgICBpZiAoKGNpcmNsZVJhZGl1cyA+IDEzLjUgJiYgY2lyY2xlUmFkaXVzIDw9IDIwLjUpICYmICFTZWN0b3JVdGlsaXRpZXMuSXNQb2ludEluU2VjdG9yKHt4OngsIHk6eX0sIHNlY3RvckRlZmluaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgY2FsaWJyYXRpb25HcmlkLnNldENvbG91ckJ5WFkoeCwgeSwgY29udmVydGVyLkx1dl90b19SR0IoW3Rlc3RMdXZbMF0gKiBsdW1pbmFuY2VWYXJpYXRpb24sIHRlc3RMdXZbMV0sIHRlc3RMdXZbMl1dKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYWxpYnJhdGlvbkdyaWQuc2V0Q29sb3VyQnlYWSh4LCB5LCBjb252ZXJ0ZXIuTHV2X3RvX1JHQihbYmFzZUx1dlswXSAqIGx1bWluYW5jZVZhcmlhdGlvbiwgYmFzZUx1dlsxXSwgYmFzZUx1dlsyXV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjYWxpYnJhdGlvbkdyaWQ7XG59IiwiaW1wb3J0IHR5cGUgeyBOdW1lcmljVHJpcGxlIH0gZnJvbSBcImNpZS1jb2xvcmNvbnZlcnRlci9kaXN0L01hdHJpeFwiO1xuaW1wb3J0IHsgQ2FsaWJyYXRpb25JbWFnZSB9IGZyb20gXCIuL0NhbGlicmF0aW9uSW1hZ2VcIjtcbmltcG9ydCB7IHNldHVwQ2FsaWJyYXRpb24gfSBmcm9tIFwiLi9DYWxpYnJhdGlvblNldHVwXCI7XG5pbXBvcnQgeyBRdWFkcmFudCwgU2VjdG9yVXRpbGl0aWVzIH0gZnJvbSBcIi4vU2VjdG9yVXRpbGl0aWVzXCI7XG5cbmV4cG9ydCBjbGFzcyBDYWxpYnJhdGlvblRlc3Qge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBhcmVudERpdjogSFRNTERpdkVsZW1lbnQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjb250YWluZXI6IEhUTUxEaXZFbGVtZW50O1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdW5hYmxlVG9UZWxsOiBIVE1MQnV0dG9uRWxlbWVudDtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2FsaWJyYXRpb25JbWFnZTogQ2FsaWJyYXRpb25JbWFnZTtcbiAgICBwcml2YXRlIGxhc3RUaW1lOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IGJhc2VMdXY6IE51bWVyaWNUcmlwbGU7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZXN0THV2OiBOdW1lcmljVHJpcGxlO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBxdWFkcmFudDogUXVhZHJhbnQ7XG5cbiAgICBwcml2YXRlIGFuaW1hdGlvblJ1bm5pbmc6IGJvb2xlYW47XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IocGFyZW50RGl2OiBIVE1MRGl2RWxlbWVudCwgYmFzZUx1djogTnVtZXJpY1RyaXBsZSwgdGVzdEx1djogTnVtZXJpY1RyaXBsZSkge1xuICAgICAgICB0aGlzLnBhcmVudERpdiA9IHBhcmVudERpdjtcblxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHRoaXMucGFyZW50RGl2LmFwcGVuZENoaWxkKHRoaXMuY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuYmFja2dyb3VuZCA9IFwiIzAwMDAwMFwiO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuYWxpZ25JdGVtcyA9IFwiY2VudGVyXCI7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcbiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuZmxleERpcmVjdGlvbiA9IFwiY29sdW1uXCI7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnVuYWJsZVRvVGVsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgICAgIHRoaXMudW5hYmxlVG9UZWxsLmlubmVyVGV4dD1cIlVuYWJsZSB0byB0ZWxsXCI7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy51bmFibGVUb1RlbGwpO1xuXG4gICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgdGhpcy5jYW52YXMuc3R5bGUubWFyZ2luID0gXCJhdXRvXCI7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuY2FudmFzKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuY2FsaWJyYXRpb25JbWFnZSA9IG5ldyBDYWxpYnJhdGlvbkltYWdlKHRoaXMuY2FudmFzKTtcblxuICAgICAgICB0aGlzLmJhc2VMdXYgPSBiYXNlTHV2O1xuICAgICAgICB0aGlzLnRlc3RMdXYgPSB0ZXN0THV2O1xuXG4gICAgICAgIHRoaXMubGFzdFRpbWUgPSAwO1xuXG4gICAgICAgIGxldCBxdWFkcmFudFNlbGVjdG9yID0gTWF0aC5yYW5kb20oKTtcblxuICAgICAgICAvLyB0byBtYWtlIHN1cmUgd2UgaGF2ZSBlcXVhbCBjaGFuY2VzIG9mIGVhY2ggcXVhZHJhbnQsIHdlIG5lZWQgdG8gZXhjbHVkZSAxXG4gICAgICAgIHdoaWxlIChxdWFkcmFudFNlbGVjdG9yID09PSAxKSB7XG4gICAgICAgICAgICBxdWFkcmFudFNlbGVjdG9yID0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocXVhZHJhbnRTZWxlY3RvciA8IDAuMTI1KSB7XG4gICAgICAgICAgICB0aGlzLnF1YWRyYW50ID0gUXVhZHJhbnQuTm9ydGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocXVhZHJhbnRTZWxlY3RvciA8IDAuMjUpIHtcbiAgICAgICAgICAgIHRoaXMucXVhZHJhbnQgPSBRdWFkcmFudC5Ob3J0aEVhc3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocXVhZHJhbnRTZWxlY3RvciA8IDAuMzc1KSB7XG4gICAgICAgICAgICB0aGlzLnF1YWRyYW50ID0gUXVhZHJhbnQuRWFzdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChxdWFkcmFudFNlbGVjdG9yIDwgMC41KSB7XG4gICAgICAgICAgICB0aGlzLnF1YWRyYW50ID0gUXVhZHJhbnQuU291dGhFYXN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHF1YWRyYW50U2VsZWN0b3IgPCAwLjYyNSkge1xuICAgICAgICAgICAgdGhpcy5xdWFkcmFudCA9IFF1YWRyYW50LlNvdXRoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHF1YWRyYW50U2VsZWN0b3IgPCAwLjc1KSB7XG4gICAgICAgICAgICB0aGlzLnF1YWRyYW50ID0gUXVhZHJhbnQuU291dGhXZXN0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHF1YWRyYW50U2VsZWN0b3IgPCAwLjg3NSkge1xuICAgICAgICAgICAgdGhpcy5xdWFkcmFudCA9IFF1YWRyYW50Lldlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnF1YWRyYW50ID0gUXVhZHJhbnQuTm9ydGhXZXN0O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uUnVubmluZyA9IGZhbHNlO1xuXG5cbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHB1YmxpYyBhc3luYyBnZXRDYWxpYnJhdGlvblJlc3VsdCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgdGhpcy5hbmltYXRpb25SdW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgodGltZTogbnVtYmVyKSA9PiB7IHRoaXMuYW5pbWF0ZSh0aW1lKTsgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPGJvb2xlYW4+KChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25SdW5uaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAvLyBjb252ZXJ0IHRoZSBjby1vcmRpbmF0ZSBzeXN0ZW0gZnJvbSBvcmlnaW4gYXQgdG9wIGxlZnQsIHkgaW5jcmVhc2luZyBkb3duIHRvIGNlbnRlcmVkIG9yaWdpblxuICAgICAgICAgICAgICAgIGNvbnN0IHg9ZXZlbnQub2Zmc2V0WC10aGlzLmNhbGlicmF0aW9uSW1hZ2Uub3JpZ2luWDtcbiAgICAgICAgICAgICAgICBjb25zdCB5PXRoaXMuY2FsaWJyYXRpb25JbWFnZS50b3RhbFktZXZlbnQub2Zmc2V0WS10aGlzLmNhbGlicmF0aW9uSW1hZ2Uub3JpZ2luWTtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWN0b3JEZWZpbml0aW9uID0gU2VjdG9yVXRpbGl0aWVzLkdldFNlY3RvckRlZmluaXRpb24odGhpcy5xdWFkcmFudCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29ycmVjdENsaWNrID0gU2VjdG9yVXRpbGl0aWVzLklzUG9pbnRJblNlY3Rvcih7eDp4LHk6eX0sc2VjdG9yRGVmaW5pdGlvbik7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE9mZnNldFg9JHtldmVudC5vZmZzZXRYfSwgT2Zmc2V0WT0ke2V2ZW50Lm9mZnNldFl9LCBYPSR7eH0sIFk9JHt5fSwgY29ycmVjdD0ke2NvcnJlY3RDbGljaz9cInRydWVcIjpcImZhbHNlXCJ9YCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlKCk7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShjb3JyZWN0Q2xpY2spO1xuICAgICAgICAgICAgfSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgICAgICAgdGhpcy51bmFibGVUb1RlbGwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvblJ1bm5pbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgICAgICAgICAgfSwgeyBvbmNlOiB0cnVlIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYW5pbWF0ZSh0aW1lOiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uUnVubmluZykge1xuICAgICAgICAgICAgaWYgKHRpbWUgLSB0aGlzLmxhc3RUaW1lID4gNTApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBnZW5lcmF0ZWRHcmlkID0gc2V0dXBDYWxpYnJhdGlvbih0aGlzLmJhc2VMdXYsIHRoaXMudGVzdEx1diwgdGhpcy5xdWFkcmFudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jYWxpYnJhdGlvbkltYWdlLmluaXRpYWxpc2VDYW52YXMoZ2VuZXJhdGVkR3JpZCk7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0VGltZSA9IHRpbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKChuZXdUaW1lOiBudW1iZXIpID0+IHsgdGhpcy5hbmltYXRlKG5ld1RpbWUpOyB9KTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBDYWxpYnJhdGlvbkJpbmFyeVNlYXJjaCB9IGZyb20gXCIuL0NhbGlicmF0aW9uQmluYXJ5U2VhcmNoXCI7XG5pbXBvcnQgdHlwZSB7IFBvaW50IH0gZnJvbSBcIm1hdGgvQ2FydGVzaWFuXCI7XG5pbXBvcnQgeyBDYWxpYnJhdGlvblRlc3QgfSBmcm9tIFwiLi9DYWxpYnJhdGlvblRlc3RcIjtcblxuZXhwb3J0IGNsYXNzIENhbGlicmF0aW9uU2NoZWR1bGVyIHtcblxuICAgIHByaXZhdGUgbHVtaW5hbmNlOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBjYWxpYnJhdGlvblNlYXJjaDogQ2FsaWJyYXRpb25CaW5hcnlTZWFyY2hbXTtcbiAgICBwcml2YXRlIGZvdW5kQ2FsaWJyYXRpb25zOiBDYWxpYnJhdGlvbkJpbmFyeVNlYXJjaFtdO1xuICAgIHByaXZhdGUgaW5pdGlhbFBvaW50OiBQb2ludDtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5pbml0aWFsUG9pbnQgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgdGhpcy5sdW1pbmFuY2UgPSA1MDtcblxuICAgICAgICB0aGlzLmNhbGlicmF0aW9uU2VhcmNoID0gW1xuICAgICAgICAgICAgbmV3IENhbGlicmF0aW9uQmluYXJ5U2VhcmNoKHRoaXMuaW5pdGlhbFBvaW50LCAwLCAxMCksXG4gICAgICAgICAgICBuZXcgQ2FsaWJyYXRpb25CaW5hcnlTZWFyY2godGhpcy5pbml0aWFsUG9pbnQsIDMwLCAxMCksXG4gICAgICAgICAgICBuZXcgQ2FsaWJyYXRpb25CaW5hcnlTZWFyY2godGhpcy5pbml0aWFsUG9pbnQsIDYwLCAxMCksXG4gICAgICAgICAgICBuZXcgQ2FsaWJyYXRpb25CaW5hcnlTZWFyY2godGhpcy5pbml0aWFsUG9pbnQsIDkwLCAxMCksXG4gICAgICAgICAgICBuZXcgQ2FsaWJyYXRpb25CaW5hcnlTZWFyY2godGhpcy5pbml0aWFsUG9pbnQsIDEyMCwgMTApLFxuICAgICAgICAgICAgbmV3IENhbGlicmF0aW9uQmluYXJ5U2VhcmNoKHRoaXMuaW5pdGlhbFBvaW50LCAxNTAsIDEwKSxcbiAgICAgICAgICAgIG5ldyBDYWxpYnJhdGlvbkJpbmFyeVNlYXJjaCh0aGlzLmluaXRpYWxQb2ludCwgMTgwLCAxMCksXG4gICAgICAgICAgICBuZXcgQ2FsaWJyYXRpb25CaW5hcnlTZWFyY2godGhpcy5pbml0aWFsUG9pbnQsIDIxMCwgMTApLFxuICAgICAgICAgICAgbmV3IENhbGlicmF0aW9uQmluYXJ5U2VhcmNoKHRoaXMuaW5pdGlhbFBvaW50LCAyNDAsIDEwKSxcbiAgICAgICAgICAgIG5ldyBDYWxpYnJhdGlvbkJpbmFyeVNlYXJjaCh0aGlzLmluaXRpYWxQb2ludCwgMjcwLCAxMCksXG4gICAgICAgICAgICBuZXcgQ2FsaWJyYXRpb25CaW5hcnlTZWFyY2godGhpcy5pbml0aWFsUG9pbnQsIDMwMCwgMTApLFxuICAgICAgICAgICAgbmV3IENhbGlicmF0aW9uQmluYXJ5U2VhcmNoKHRoaXMuaW5pdGlhbFBvaW50LCAzMzAsIDEwKSxcbiAgICAgICAgXTtcblxuICAgICAgICB0aGlzLmZvdW5kQ2FsaWJyYXRpb25zID0gW107XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGZpbmRQb2ludCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgaW50cm9kdWN0aW9uQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRGl2RWxlbWVudD4oXCIjaW50cm9kdWN0aW9uXCIpO1xuICAgICAgICBjb25zdCBjYWxpYnJhdGlvbkhvc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxEaXZFbGVtZW50PihcIiNjYW52YXNIb3N0XCIpO1xuICAgICAgICBpZiAoaW50cm9kdWN0aW9uQ29udGFpbmVyID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBsb2NhdGUgaW50b3JkdWN0aW9uIGNvbnRhaW5lclwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2FsaWJyYXRpb25Ib3N0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBmaW5kIGNhbnZhc2hvc3RcIik7XG4gICAgICAgIH1cbiAgICAgICAgaW50cm9kdWN0aW9uQ29udGFpbmVyLmNsYXNzTGlzdC5hZGQoXCJoaWRlLWFsbFwiKTtcbiAgICAgICAgY2FsaWJyYXRpb25Ib3N0LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRlLWFsbFwiKTtcblxuICAgICAgICB3aGlsZSAodGhpcy5jYWxpYnJhdGlvblNlYXJjaC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRJbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMuY2FsaWJyYXRpb25TZWFyY2gubGVuZ3RoKTtcbiAgICAgICAgICAgIC8vIGlmIE1hdGgucmFuZG9tID09PSAxIHRoZW4gd2UgZW5kIHVwIG91dCBvZiBib3VuZCwgc28gZ2V0IHRoZSBuZXh0IHZhbHVlLi4uXG4gICAgICAgICAgICBpZiAoY3VycmVudEluZGV4ID09PSB0aGlzLmNhbGlicmF0aW9uU2VhcmNoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q2FsaWJyYXRpb24gPSB0aGlzLmNhbGlicmF0aW9uU2VhcmNoW2N1cnJlbnRJbmRleF07XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50Q2FsaWJyYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBmaW5kIGNhbGlicmF0aW9uXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UG9pbnQgPSBjdXJyZW50Q2FsaWJyYXRpb24uZ2V0Q3VycmVudFBvaW50KCk7XG5cbiAgICAgICAgICAgIGlmIChpc05hTiggY3VycmVudFBvaW50LngpIHx8IGlzTmFOKGN1cnJlbnRQb2ludC55KSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBCYWQgdmFsdWVgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgUG9pbnQgeD0ke2N1cnJlbnRQb2ludC54fSB5PSR7Y3VycmVudFBvaW50Lnl9YCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB0ZXN0ZXIgPSBuZXcgQ2FsaWJyYXRpb25UZXN0KGNhbGlicmF0aW9uSG9zdCwgW3RoaXMubHVtaW5hbmNlLCB0aGlzLmluaXRpYWxQb2ludC54LCB0aGlzLmluaXRpYWxQb2ludC55XSwgW3RoaXMubHVtaW5hbmNlLCBjdXJyZW50UG9pbnQueCwgY3VycmVudFBvaW50LnldKTtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCB0ZXN0ZXIuZ2V0Q2FsaWJyYXRpb25SZXN1bHQoKTtcbiAgICAgICAgICAgIGN1cnJlbnRDYWxpYnJhdGlvbi5wcmVwYXJlTmV4dFBvaW50KHJlc3VsdCk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50Q2FsaWJyYXRpb24uaXNHYXBMZXNzVGhhbigwLjAwMSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvdW5kQ2FsaWJyYXRpb25zLnB1c2goY3VycmVudENhbGlicmF0aW9uKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGlicmF0aW9uU2VhcmNoLnNwbGljZShjdXJyZW50SW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mb3VuZENhbGlicmF0aW9ucy5mb3JFYWNoKChjdXJyZW50U2VhcmNoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UG9pbnQ9Y3VycmVudFNlYXJjaC5nZXRGaW5hbFBvaW50KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRmluYWwgcG9pbnQ6IFg6JHtjdXJyZW50UG9pbnQueH0sIFk6JHtjdXJyZW50UG9pbnQueX1gKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLypcbiAgICBjb25zdCB0ZXN0ZXIgPSBuZXcgQ2FsaWJyYXRpb25UZXN0KGNhbGlicmF0aW9uSG9zdCwgWzUwLCAyMi4yOTQ4ODY2MzQzMzkwNTgsIDgwLjg2Mzg3NTgxNDUyMTAxXSwgWzUwLCAtMTIwLCAyNV0pO1xuICAgIGNvbnN0IHByb21pc2UgPSB0ZXN0ZXIuZ2V0Q2FsaWJyYXRpb25SZXN1bHQoKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYWxlcnRcbiAgICBwcm9taXNlLnRoZW4oKHJlc3VsdCkgPT4geyBhbGVydChgWW91ICR7cmVzdWx0ID8gXCJoYXZlXCIgOiBcImhhdmVuJ3RcIn0gY2xpY2tlZCBvbiB0aGUgZ2FwYCk7IH0pO1xuKi9cblxufSIsImltcG9ydCB7IENhbGlicmF0aW9uU2NoZWR1bGVyIH0gZnJvbSBcIi4vY2FsaWJyYXRpb24vQ2FsaWJyYXRpb25TY2hlZHVsZXJcIjtcbmltcG9ydCB7IENvbG9yQ29udmVydGVyIH0gZnJvbSBcImNpZS1jb2xvcmNvbnZlcnRlclwiO1xuXG5jb25zdCBhcHByb2FjaDFCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxCdXR0b25FbGVtZW50PihcIiNhcHByb2FjaDFcIik7XG5cbmlmIChhcHByb2FjaDFCdXR0b249PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNhbid0IGxvY2F0ZSBpbnRvcmR1Y3Rpb24gY29udGFpbmVyXCIpO1xufVxuXG5hcHByb2FjaDFCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgZm9vID0gbmV3IENhbGlicmF0aW9uU2NoZWR1bGVyKCk7XG4gICAgYXdhaXQgZm9vLmZpbmRQb2ludCgpO1xufSk7XG5cbmNvbnN0IHggPSAwLjQwMztcbmNvbnN0IHkgPSAwLjQ0MjtcblxuY29uc3QgWSA9IDAuNTtcbmNvbnN0IFggPSBZIC8geSAqIHg7XG5jb25zdCBaID0gWSAvIHkgKiAoMSAtIHggLSB5KTtcblxuY29uc3QgY29udmVydGVyID0gbmV3IENvbG9yQ29udmVydGVyKCk7XG5cbmNvbnZlcnRlci5SZWZXaGl0ZSA9IFwiRDY1XCI7XG5jb252ZXJ0ZXIuR2FtbWFNb2RlbCA9IFwic1JHQlwiO1xuXG5jb25zdCBMdXYgPSBjb252ZXJ0ZXIuWFlaX3RvX0x1dihbWCwgWSwgWl0pO1xuXG5jb25zb2xlLmNvdW50KGBMdXY9WyR7THV2WzBdfSwgJHtMdXZbMV19LCAke0x1dlsyXX1dLCB1Jz0kezQgKiBYIC8gKFggKyAxNSAqIFkgKyAzICogWil9IHYnPSR7OSAqIFkgLyAoWCArIDE1ICogWSArIDMgKiBaKX1gKTtcblxuXG5cbmNvbnNvbGUubG9nKFwiZm9vXCIpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///926\n')}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var Q=__webpack_module_cache__[I]={exports:{}};return __webpack_modules__[I](Q,Q.exports,__webpack_require__),Q.exports}__webpack_require__(926);var __webpack_exports__=__webpack_require__(556)})();
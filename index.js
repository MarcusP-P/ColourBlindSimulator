(()=>{"use strict";var __webpack_modules__={773:(__unused_webpack_module,exports)=>{eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Matrix = void 0;\nclass Matrix {\n}\nexports.Matrix = Matrix;\n/**\n * n x m matrix transposes to an m x n\n */\nMatrix.transpose = (A) => {\n    var _a;\n    const n = A.length || 0;\n    const m = (_a = A[0]) === null || _a === void 0 ? void 0 : _a.length;\n    const A_t = Identity_3x3();\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            A_t[j][i] = A[i][j];\n        }\n    }\n    return A_t;\n};\n/**\n * Return inverse of a matrix (if invertible)\n * Throws if matrix not invertible.\n */\nMatrix.inv = (A) => {\n    const res = Identity_3x3();\n    const [[a, b, c], [d, e, f], [h, i, j]] = A;\n    const det = a * e * j - a * f * i - b * d * j + b * f * h + c * d * i - c * e * h;\n    if (det === 0) {\n        throw new Error("Matrix not invertible");\n    }\n    const detInv = 1 / det;\n    res[0][0] = detInv * (e * j - f * i);\n    res[0][1] = detInv * (c * i - b * j);\n    res[0][2] = detInv * (b * f - c * e);\n    res[1][0] = detInv * (f * h - d * j);\n    res[1][1] = detInv * (a * j - c * h);\n    res[1][2] = detInv * (c * d - a * f);\n    res[2][0] = detInv * (d * i - e * h);\n    res[2][1] = detInv * (b * h - a * i);\n    res[2][2] = detInv * (a * e - b * d);\n    return res;\n};\nMatrix.multiply_3x3_times_triple = (A, x) => {\n    const [[a, b, c], [d, e, f], [g, h, i]] = A;\n    const [t, u, v] = x;\n    return [\n        a * t + b * u + c * v,\n        d * t + e * u + f * v,\n        g * t + h * u + i * v,\n    ];\n};\nMatrix.multiply_triple_times_3x3 = (x, A) => {\n    const [t, u, v] = x;\n    const [[a, b, c], [d, e, f], [g, h, i]] = A;\n    return [\n        a * t + d * u + g * v,\n        b * t + e * u + h * v,\n        c * t + f * u + i * v,\n    ];\n};\nMatrix.multiply_3x3_times_3x3 = (A, B) => {\n    const [[a, b, c], [d, e, f], [g, h, i]] = A;\n    const [[j, k, l], [m, n, o], [p, q, r]] = B;\n    return [\n        [a * j + b * m + c * p, a * k + b * n + c * q, a * l + b * o + c * r],\n        [d * j + e * m + f * p, d * k + e * n + f * q, d * l + e * o + f * r],\n        [g * j + h * m + i * p, g * k + h * n + i * q, g * l + h * o + i * r],\n    ];\n};\nconst Identity_3x3 = () => [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzczLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZDtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQix3QkFBd0IsT0FBTztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb2xvdXItYmxpbmQtc2ltdWxhdG9yLy4vbm9kZV9tb2R1bGVzL2NpZS1jb2xvcmNvbnZlcnRlci9kaXN0L01hdHJpeC5qcz80NmZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NYXRyaXggPSB2b2lkIDA7XG5jbGFzcyBNYXRyaXgge1xufVxuZXhwb3J0cy5NYXRyaXggPSBNYXRyaXg7XG4vKipcbiAqIG4geCBtIG1hdHJpeCB0cmFuc3Bvc2VzIHRvIGFuIG0geCBuXG4gKi9cbk1hdHJpeC50cmFuc3Bvc2UgPSAoQSkgPT4ge1xuICAgIHZhciBfYTtcbiAgICBjb25zdCBuID0gQS5sZW5ndGggfHwgMDtcbiAgICBjb25zdCBtID0gKF9hID0gQVswXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aDtcbiAgICBjb25zdCBBX3QgPSBJZGVudGl0eV8zeDMoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG07IGorKykge1xuICAgICAgICAgICAgQV90W2pdW2ldID0gQVtpXVtqXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gQV90O1xufTtcbi8qKlxuICogUmV0dXJuIGludmVyc2Ugb2YgYSBtYXRyaXggKGlmIGludmVydGlibGUpXG4gKiBUaHJvd3MgaWYgbWF0cml4IG5vdCBpbnZlcnRpYmxlLlxuICovXG5NYXRyaXguaW52ID0gKEEpID0+IHtcbiAgICBjb25zdCByZXMgPSBJZGVudGl0eV8zeDMoKTtcbiAgICBjb25zdCBbW2EsIGIsIGNdLCBbZCwgZSwgZl0sIFtoLCBpLCBqXV0gPSBBO1xuICAgIGNvbnN0IGRldCA9IGEgKiBlICogaiAtIGEgKiBmICogaSAtIGIgKiBkICogaiArIGIgKiBmICogaCArIGMgKiBkICogaSAtIGMgKiBlICogaDtcbiAgICBpZiAoZGV0ID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hdHJpeCBub3QgaW52ZXJ0aWJsZVwiKTtcbiAgICB9XG4gICAgY29uc3QgZGV0SW52ID0gMSAvIGRldDtcbiAgICByZXNbMF1bMF0gPSBkZXRJbnYgKiAoZSAqIGogLSBmICogaSk7XG4gICAgcmVzWzBdWzFdID0gZGV0SW52ICogKGMgKiBpIC0gYiAqIGopO1xuICAgIHJlc1swXVsyXSA9IGRldEludiAqIChiICogZiAtIGMgKiBlKTtcbiAgICByZXNbMV1bMF0gPSBkZXRJbnYgKiAoZiAqIGggLSBkICogaik7XG4gICAgcmVzWzFdWzFdID0gZGV0SW52ICogKGEgKiBqIC0gYyAqIGgpO1xuICAgIHJlc1sxXVsyXSA9IGRldEludiAqIChjICogZCAtIGEgKiBmKTtcbiAgICByZXNbMl1bMF0gPSBkZXRJbnYgKiAoZCAqIGkgLSBlICogaCk7XG4gICAgcmVzWzJdWzFdID0gZGV0SW52ICogKGIgKiBoIC0gYSAqIGkpO1xuICAgIHJlc1syXVsyXSA9IGRldEludiAqIChhICogZSAtIGIgKiBkKTtcbiAgICByZXR1cm4gcmVzO1xufTtcbk1hdHJpeC5tdWx0aXBseV8zeDNfdGltZXNfdHJpcGxlID0gKEEsIHgpID0+IHtcbiAgICBjb25zdCBbW2EsIGIsIGNdLCBbZCwgZSwgZl0sIFtnLCBoLCBpXV0gPSBBO1xuICAgIGNvbnN0IFt0LCB1LCB2XSA9IHg7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgYSAqIHQgKyBiICogdSArIGMgKiB2LFxuICAgICAgICBkICogdCArIGUgKiB1ICsgZiAqIHYsXG4gICAgICAgIGcgKiB0ICsgaCAqIHUgKyBpICogdixcbiAgICBdO1xufTtcbk1hdHJpeC5tdWx0aXBseV90cmlwbGVfdGltZXNfM3gzID0gKHgsIEEpID0+IHtcbiAgICBjb25zdCBbdCwgdSwgdl0gPSB4O1xuICAgIGNvbnN0IFtbYSwgYiwgY10sIFtkLCBlLCBmXSwgW2csIGgsIGldXSA9IEE7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgYSAqIHQgKyBkICogdSArIGcgKiB2LFxuICAgICAgICBiICogdCArIGUgKiB1ICsgaCAqIHYsXG4gICAgICAgIGMgKiB0ICsgZiAqIHUgKyBpICogdixcbiAgICBdO1xufTtcbk1hdHJpeC5tdWx0aXBseV8zeDNfdGltZXNfM3gzID0gKEEsIEIpID0+IHtcbiAgICBjb25zdCBbW2EsIGIsIGNdLCBbZCwgZSwgZl0sIFtnLCBoLCBpXV0gPSBBO1xuICAgIGNvbnN0IFtbaiwgaywgbF0sIFttLCBuLCBvXSwgW3AsIHEsIHJdXSA9IEI7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgW2EgKiBqICsgYiAqIG0gKyBjICogcCwgYSAqIGsgKyBiICogbiArIGMgKiBxLCBhICogbCArIGIgKiBvICsgYyAqIHJdLFxuICAgICAgICBbZCAqIGogKyBlICogbSArIGYgKiBwLCBkICogayArIGUgKiBuICsgZiAqIHEsIGQgKiBsICsgZSAqIG8gKyBmICogcl0sXG4gICAgICAgIFtnICogaiArIGggKiBtICsgaSAqIHAsIGcgKiBrICsgaCAqIG4gKyBpICogcSwgZyAqIGwgKyBoICogbyArIGkgKiByXSxcbiAgICBdO1xufTtcbmNvbnN0IElkZW50aXR5XzN4MyA9ICgpID0+IFtcbiAgICBbMSwgMCwgMF0sXG4gICAgWzAsIDEsIDBdLFxuICAgIFswLCAwLCAxXSxcbl07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///773\n')},564:(__unused_webpack_module,exports,__webpack_require__)=>{eval('var __webpack_unused_export__;\n\n// See http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html for details on these computations.\n__webpack_unused_export__ = ({ value: true });\nexports.N = void 0;\nconst Matrix_1 = __webpack_require__(773);\nclass ColorConverter {\n    // Constructor\n    constructor({ RefWhite = "D50", RgbModel = "sRGB", GammaModel = "sRGB", Adaptation = "Bradford", } = {}) {\n        // Properties to be set on instantiation\n        this.RefWhite = "D50";\n        this.RgbModel = "sRGB";\n        this.GammaModel = "sRGB";\n        this.Adaptation = "Bradford";\n        this.kE = 216 / 24389;\n        this.kK = 24389 / 27;\n        this.RefWhite = RefWhite;\n        this.RgbModel = RgbModel;\n        this.GammaModel = GammaModel;\n        this.Adaptation = Adaptation;\n    }\n    // Computed: RefWhite Matrix\n    get Mtx_RefWhite() {\n        switch (this.RefWhite) {\n            case "A":\n                return [1.0985, 1, 0.35585];\n            case "B":\n                return [0.99072, 1, 0.85223];\n            case "C":\n                return [0.98074, 1, 1.18232];\n            case "D50":\n                return [0.96422, 1, 0.82521];\n            case "D55":\n                return [0.95682, 1, 0.92149];\n            case "D65":\n                return [0.95047, 1, 1.0888];\n            case "D75":\n                return [0.94972, 1, 1.22638];\n            case "E":\n                return [1, 1, 1];\n            case "F2":\n                return [0.99186, 1, 0.67393];\n            case "F7":\n                return [0.95041, 1, 1.08747];\n            case "F11":\n                return [1.00962, 1, 0.6435];\n            default:\n                return [1, 1, 1];\n        }\n    }\n    // Computed: RefWhite RGB Matrix\n    get Mtx_RefWhiteRGB() {\n        switch (this.RgbModel) {\n            case "Adobe RGB (1998)":\n                return [0.95047, 1, 1.08883];\n            case "AppleRGB":\n                return [0.95047, 1, 1.08883];\n            case "Best RGB":\n                return [0.96422, 1, 0.82521];\n            case "Beta RGB":\n                return [0.96422, 1, 0.82521];\n            case "Bruce RGB":\n                return [0.95047, 1, 1.08883];\n            case "CIE RGB":\n                return [1, 1, 1];\n            case "ColorMatch RGB":\n                return [0.96422, 1, 0.82521];\n            case "Don RGB 4":\n                return [0.96422, 1, 0.82521];\n            case "ECI RGB v2":\n                return [0.96422, 1, 0.82521];\n            case "Ekta Space PS5":\n                return [0.96422, 1, 0.82521];\n            case "NTSC RGB":\n                return [0.98074, 1, 1.18232];\n            case "PAL/SECAM RGB":\n                return [0.95047, 1, 1.08883];\n            case "ProPhoto RGB":\n                return [0.96422, 1, 0.82521];\n            case "SMPTE-C RGB":\n                return [0.95047, 1, 1.08883];\n            case "sRGB":\n                return [0.95047, 1, 1.08883];\n            case "Wide Gamut RGB":\n                return [0.96422, 1, 0.82521];\n        }\n    }\n    // Computed: GammaRGB + Index\n    get GammaRGB() {\n        switch (this.RgbModel) {\n            case "Adobe RGB (1998)":\n                return { value: 2.2, index: 2 };\n            case "AppleRGB":\n                return { value: 1.8, index: 1 };\n            case "Best RGB":\n                return { value: 2.2, index: 2 };\n            case "Beta RGB":\n                return { value: 2.2, index: 2 };\n            case "Bruce RGB":\n                return { value: 2.2, index: 2 };\n            case "CIE RGB":\n                return { value: 2.2, index: 2 };\n            case "ColorMatch RGB":\n                return { value: 1.8, index: 2 };\n            case "Don RGB 4":\n                return { value: 2.2, index: 2 };\n            case "ECI RGB v2":\n                return { value: 0, index: 4 };\n            case "Ekta Space PS5":\n                return { value: 2.2, index: 2 };\n            case "NTSC RGB":\n                return { value: 2.2, index: 2 };\n            case "PAL/SECAM RGB":\n                return { value: 2.2, index: 2 };\n            case "ProPhoto RGB":\n                return { value: 1.8, index: 1 };\n            case "SMPTE-C RGB":\n                return { value: 2.2, index: 2 };\n            case "sRGB":\n                return { value: -2.2, index: 3 };\n            case "Wide Gamut RGB":\n                return { value: 2.2, index: 2 };\n        }\n    }\n    // Computed: Gamma value\n    get Gamma() {\n        switch (this.GammaModel.toString()) {\n            case "1.0":\n                return 1;\n            case "1.8":\n                return 1.8;\n            case "2.2":\n                return 2.2;\n            case "sRGB":\n                return -2.2;\n            case "L*":\n                return 0;\n            default:\n                return 1;\n        }\n    }\n    // Computed: RGB to XYZ matrix\n    // Values come from table on http://www.brucelindbloom.com/\n    get Mtx_RGB2XYZ() {\n        let xr, yr, xg, yg, xb, yb;\n        switch (this.RgbModel) {\n            case "Adobe RGB (1998)": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.21, 0.71, 0.15, 0.06];\n                break;\n            }\n            case "AppleRGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.625, 0.34, 0.28, 0.595, 0.155, 0.07];\n                break;\n            }\n            case "Best RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.7347, 0.2653, 0.215, 0.775, 0.13, 0.035];\n                break;\n            }\n            case "Beta RGB": {\n                [xr, yr, xg, yg, xb, yb] = [\n                    0.6888, 0.3112, 0.1986, 0.7551, 0.1265, 0.0352,\n                ];\n                break;\n            }\n            case "Bruce RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.28, 0.65, 0.15, 0.06];\n                break;\n            }\n            case "CIE RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.735, 0.265, 0.274, 0.717, 0.167, 0.009];\n                break;\n            }\n            case "ColorMatch RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.63, 0.34, 0.295, 0.605, 0.15, 0.075];\n                break;\n            }\n            case "Don RGB 4": {\n                [xr, yr, xg, yg, xb, yb] = [0.696, 0.3, 0.215, 0.765, 0.13, 0.035];\n                break;\n            }\n            case "ECI RGB v2": {\n                [xr, yr, xg, yg, xb, yb] = [0.67, 0.33, 0.21, 0.71, 0.14, 0.08];\n                break;\n            }\n            case "Ekta Space PS5": {\n                [xr, yr, xg, yg, xb, yb] = [0.695, 0.305, 0.26, 0.7, 0.11, 0.005];\n                break;\n            }\n            case "NTSC RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.67, 0.33, 0.21, 0.71, 0.14, 0.08];\n                break;\n            }\n            case "PAL/SECAM RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.29, 0.6, 0.15, 0.06];\n                break;\n            }\n            case "ProPhoto RGB": {\n                [xr, yr, xg, yg, xb, yb] = [\n                    0.7347, 0.2653, 0.1596, 0.8404, 0.0366, 0.0001,\n                ];\n                break;\n            }\n            case "SMPTE-C RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.63, 0.34, 0.31, 0.595, 0.155, 0.07];\n                break;\n            }\n            case "sRGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];\n                break;\n            }\n            case "Wide Gamut RGB": {\n                [xr, yr, xg, yg, xb, yb] = [0.735, 0.265, 0.115, 0.826, 0.157, 0.018];\n                break;\n            }\n        } // End switch\n        let X_r = xr / yr, Y_r = 1, Z_r = (1 - xr - yr) / yr, X_g = xg / yg, Y_g = 1, Z_g = (1 - xg - yg) / yg, X_b = xb / yb, Y_b = 1, Z_b = (1 - xb - yb) / yb, RW_RGB = this.Mtx_RefWhiteRGB, X_W = RW_RGB[0], Y_W = RW_RGB[1], Z_W = RW_RGB[2];\n        let [S_r, S_g, S_b] = Matrix_1.Matrix.multiply_3x3_times_triple(Matrix_1.Matrix.inv([\n            [X_r, X_g, X_b],\n            [Y_r, Y_g, Y_b],\n            [Z_r, Z_g, Z_b],\n        ]), [X_W, Y_W, Z_W]);\n        return Matrix_1.Matrix.transpose([\n            [S_r * X_r, S_g * X_g, S_b * X_b],\n            [S_r * Y_r, S_g * Y_g, S_b * Y_b],\n            [S_r * Z_r, S_g * Z_g, S_b * Z_b],\n        ]);\n    } // End Mtx_RGB2XYZ\n    // Computed: Matrix Adaptaion\n    get MtxAdp() {\n        switch (this.Adaptation) {\n            case "Bradford": {\n                return [\n                    [0.8951, -0.7502, 0.0389],\n                    [0.2664, 1.7135, -0.0685],\n                    [-0.1614, 0.0367, 1.0296],\n                ];\n            }\n            case "von Kries": {\n                return [\n                    [0.40024, -0.2263, 0],\n                    [0.7076, 1.16532, 0],\n                    [-0.08081, 0.0457, 0.91822],\n                ];\n            }\n            case "XYZ Scaling":\n            case "None": {\n                return [\n                    [1, 0, 0],\n                    [0, 1, 0],\n                    [0, 0, 1],\n                ];\n            }\n        }\n    } // End matrix Adaptation\n    /**\n     *\n     * @param {number} linear Linear value\n     * @param {number} Gamma Gamma value\n     */\n    compand(linear) {\n        let G = this.Gamma;\n        // Depends on sign of Gamma\n        if (G > 0) {\n            return linear >= 0 ? Math.pow(linear, 1 / G) : -Math.pow(-linear, 1 / G);\n        }\n        else if (G < 0) {\n            /** sRGB */\n            let sign = 1;\n            if (linear < 0) {\n                sign = -1;\n                linear = -linear;\n            }\n            return (sign *\n                (linear <= 0.0031308\n                    ? linear * 12.92\n                    : 1.055 * Math.pow(linear, 1.0 / 2.4) - 0.055));\n        }\n        else {\n            /** L* */\n            let sign = 1;\n            if (linear < 0) {\n                sign = -1;\n                linear = -linear;\n            }\n            return (sign *\n                (linear <= 216.0 / 24389.0\n                    ? (linear * 24389.0) / 2700.0\n                    : 1.16 * Math.pow(linear, 1.0 / 3.0) - 0.16));\n        }\n    }\n    /**\n     * Inverse compand function\n     * @param {number} companded Companded value\n     */\n    inverse_compand(companded) {\n        let G = this.Gamma;\n        if (G > 0) {\n            return companded >= 0 ? Math.pow(companded, G) : -Math.pow(-companded, G);\n        }\n        else if (G < 0) {\n            /** sRGB */\n            let sign = 1;\n            if (companded < 0) {\n                sign = -1;\n                companded = -companded;\n            }\n            return (sign *\n                (companded <= 0.04045\n                    ? companded / 12.92\n                    : Math.pow((companded + 0.055) / 1.055, 2.4)));\n        }\n        else {\n            /** L* */\n            let sign = 1;\n            if (companded < 0) {\n                sign = -1;\n                companded = -companded;\n            }\n            return (sign *\n                (companded <= 0.08\n                    ? (2700.0 * companded) / 24389.0\n                    : (((1000000.0 * companded + 480000.0) * companded + 76800.0) *\n                        companded +\n                        4096.0) /\n                        1560896.0));\n        }\n    }\n    /**\n     * Convert XYZ triple to RGB: ✅\n     * @param {[number, number, number]} XYZ triple in range [0, 1]\n     * Outputs RGB triple in range [0, 255]\n     */\n    XYZ_to_RGB(XYZ) {\n        let XYZd = XYZ;\n        if (this.Adaptation != "None") {\n            // Get source/domain scale factors\n            let [As, Bs, Cs] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhite, this.MtxAdp);\n            let [Ad, Bd, Cd] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhiteRGB, this.MtxAdp);\n            XYZd = Matrix_1.Matrix.multiply_triple_times_3x3(XYZ, Matrix_1.Matrix.multiply_3x3_times_3x3(this.MtxAdp, Matrix_1.Matrix.multiply_3x3_times_3x3([\n                [Ad / As, 0, 0],\n                [0, Bd / Bs, 0],\n                [0, 0, Cd / Cs],\n            ], Matrix_1.Matrix.inv(this.MtxAdp))));\n        }\n        let RGB = Matrix_1.Matrix.multiply_triple_times_3x3(XYZd, Matrix_1.Matrix.inv(this.Mtx_RGB2XYZ));\n        return RGB.map((v) => 255 * this.compand(v));\n    } // End XYZ_to_RGB\n    /**\n     * Convert RGB tripe to XYZ: ✅\n     * @param {number[]} RGB RGB Triple\n     * NOTE: This assumes RGB is scaled from [0, 255], XYZ in [0, 1]\n     */\n    RGB_to_XYZ(RGB) {\n        // Inverse compound the values\n        RGB = RGB.map((v) => this.inverse_compand(v / 255));\n        // Linear RGB to XYZ\n        let XYZ = Matrix_1.Matrix.multiply_triple_times_3x3(RGB, this.Mtx_RGB2XYZ);\n        // Adaptation if necessary\n        if (this.Adaptation != "None") {\n            // Get source/domain scale factors\n            let [As, Bs, Cs] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhiteRGB, this.MtxAdp);\n            let [Ad, Bd, Cd] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhite, this.MtxAdp);\n            return Matrix_1.Matrix.multiply_triple_times_3x3(XYZ, Matrix_1.Matrix.multiply_3x3_times_3x3(this.MtxAdp, Matrix_1.Matrix.multiply_3x3_times_3x3([\n                [Ad / As, 0, 0],\n                [0, Bd / Bs, 0],\n                [0, 0, Cd / Cs],\n            ], Matrix_1.Matrix.inv(this.MtxAdp))));\n        }\n        else {\n            return XYZ;\n        }\n    } // End RGB to XYZ\n    /**\n     * Convert Lab to XYZ\n     * @param Lab Lab triple\n     * XYZ in range [0, 1]\n     */\n    Lab_to_XYZ(Lab) {\n        let L = Lab[0], a = Lab[1], b = Lab[2], f_y = (L + 16) / 116, f_x = a / 500 + f_y, f_z = f_y - b / 200, x_r = Math.pow(f_x, 3) > this.kE\n            ? Math.pow(f_x, 3)\n            : (116 * f_x - 16) / this.kK, y_r = L > this.kK * this.kE ? Math.pow((L + 16) / 116, 3) : L / this.kK, z_r = Math.pow(f_z, 3) > this.kE\n            ? Math.pow(f_z, 3)\n            : (116 * f_z - 16) / this.kK, RefWhite = this.Mtx_RefWhite;\n        return [x_r * RefWhite[0], y_r * RefWhite[1], z_r * RefWhite[2]];\n    } // End Lab to XYZ\n    /**\n     * Converts Lab triple to XYZ tripe in range [0, 1]\n     * @param XYZ XYZ triple\n     */\n    XYZ_to_Lab(XYZ) {\n        let X = XYZ[0], Y = XYZ[1], Z = XYZ[2], RefWhite = this.Mtx_RefWhite, X_r = RefWhite[0], Y_r = RefWhite[1], Z_r = RefWhite[2], x_r = X / X_r, y_r = Y / Y_r, z_r = Z / Z_r, f_x = x_r > this.kE ? Math.pow(x_r, 1 / 3) : (this.kK * x_r + 16) / 116, f_y = y_r > this.kE ? Math.pow(y_r, 1 / 3) : (this.kK * y_r + 16) / 116, f_z = z_r > this.kE ? Math.pow(z_r, 1 / 3) : (this.kK * z_r + 16) / 116;\n        return [116 * f_y - 16, 500 * (f_x - f_y), 200 * (f_y - f_z)];\n    } // End XYZ_to_Lab\n    /**\n     * Convert Lab to RGB\n     * @param Lab Lab triple\n     * Note: RGB in [0, 255]\n     */\n    Lab_to_RGB(Lab) {\n        return this.XYZ_to_RGB(this.Lab_to_XYZ(Lab));\n    }\n    /**\n     * Convert RGB to Lab\n     * @param RGB RGB triple in range [0, 255]\n     */\n    RGB_to_Lab(RGB) {\n        return this.XYZ_to_Lab(this.RGB_to_XYZ(RGB));\n    }\n    /**\n     * Convert xyY triple to XYZ triple\n     * @param xyY xyY triple\n     */\n    xyY_to_XYZ(xyY) {\n        let [x, y, Y] = xyY;\n        if (y < 0.000001) {\n            return [0, 0, 0];\n        }\n        else {\n            return [(x * Y) / y, Y, ((1 - x - y) * Y) / y];\n        }\n    } // End xyY_to_XYZ\n    /**\n     * Convert XYZ to xyY\n     * @param XYZ XYZ triple in [0, 1]\n     */\n    XYZ_to_xyY(XYZ) {\n        let [X, Y, Z] = XYZ, Den = X + Y + Z;\n        // Non-zero Den:\n        if (Den > 0) {\n            return [X / Den, Y / Den, Y];\n        }\n        // Zero den\n        else {\n            let [RW_X, RW_Y, RW_Z] = this.Mtx_RefWhite, RW_Den = RW_X + RW_Y + RW_Z;\n            return [RW_X / RW_Den, RW_Y / RW_Den, Y];\n        }\n    }\n    /**\n     * Lab triple to LCH triple\n     * @param Lab Lab triple\n     */\n    Lab_to_LCHab(Lab) {\n        let [L, a, b] = Lab;\n        let H = (180 / Math.PI) * Math.atan2(b, a);\n        return [\n            L,\n            Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)),\n            H + (H >= 0 ? 0 : 360),\n        ];\n    }\n    /**\n     * LCH triple to Lab triple\n     * @param LCH LCH Triple\n     */\n    LCHab_to_Lab(LCH) {\n        let [L, C, H] = LCH;\n        return [\n            L,\n            C * Math.cos((H * Math.PI) / 180),\n            C * Math.sin((H * Math.PI) / 180),\n        ];\n    }\n    /**\n     * @param XYZ XYZ Triple\n     */\n    XYZ_to_LCHab(XYZ) {\n        return this.Lab_to_LCHab(this.XYZ_to_Lab(XYZ));\n    }\n    /**\n     * @param XYZ XYZ Triple\n     */\n    XYZ_to_Luv(XYZ) {\n        let [X, Y, Z] = XYZ, RefWhite = this.Mtx_RefWhite, X_r = RefWhite[0], Y_r = RefWhite[1], Z_r = RefWhite[2], Den = X + 15 * Y + 3 * Z, up = Den > 0 ? (4 * X) / Den : 0, vp = Den > 0 ? (9 * Y) / Den : 0, urp = (4 * X_r) / (X_r + 15 * Y_r + 3 * Z_r), vrp = (9 * Y_r) / (X_r + 15 * Y_r + 3 * Z_r), yr = Y / Y_r, L = yr > this.kE ? 116 * Math.pow(yr, 1 / 3) - 16 : this.kK * yr;\n        return [L, 13 * L * (up - urp), 13 * L * (vp - vrp)];\n    }\n    /**\n     * @param XYZ XYZ triple\n     */\n    XYZ_to_LCHuv(XYZ) {\n        return this.Luv_to_LCHuv(this.XYZ_to_Luv(XYZ));\n    }\n    /**\n     * Luv to LCHuv\n     * @param Luv Luv triple\n     */\n    Luv_to_LCHuv(Luv) {\n        let [L, u, v] = Luv;\n        let H = (180 / Math.PI) * Math.atan2(v, u);\n        return [\n            L,\n            Math.sqrt(Math.pow(u, 2) + Math.pow(v, 2)),\n            H + (H >= 0 ? 0 : 360),\n        ];\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_Lab(xyY) {\n        return this.XYZ_to_Lab(this.xyY_to_XYZ(xyY));\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_LCHab(xyY) {\n        return this.Lab_to_LCHab(this.XYZ_to_Lab(this.xyY_to_XYZ(xyY)));\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_Luv(xyY) {\n        return this.XYZ_to_Luv(this.xyY_to_XYZ(xyY));\n    }\n    /**\n     * @param xyY xyY triple\n     */\n    xyY_to_LCHuv(xyY) {\n        return this.Luv_to_LCHuv(this.XYZ_to_Luv(this.xyY_to_XYZ(xyY)));\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_RGB(xyY) {\n        return this.XYZ_to_RGB(this.xyY_to_XYZ(xyY));\n    }\n    /**\n     * @param Lab Lab triple\n     */\n    Lab_to_xyY(Lab) {\n        return this.XYZ_to_xyY(this.Lab_to_XYZ(Lab));\n    }\n    /**\n     * @param Lab Lab triple\n     */\n    Lab_to_Luv(Lab) {\n        return this.XYZ_to_Luv(this.Lab_to_XYZ(Lab));\n    }\n    /**\n     * @param Lab Lab triple\n     */\n    Lab_to_LCHuv(Lab) {\n        return this.Luv_to_LCHuv(this.Lab_to_Luv(Lab));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_XYZ(LCH) {\n        return this.Lab_to_XYZ(this.LCHab_to_Lab(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_xyY(LCH) {\n        return this.XYZ_to_xyY(this.Lab_to_XYZ(this.LCHab_to_Lab(LCH)));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_Luv(LCH) {\n        return this.XYZ_to_Luv(this.Lab_to_XYZ(this.LCHab_to_Lab(LCH)));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_LCHuv(LCH) {\n        return this.Luv_to_LCHuv(this.LCHab_to_Luv(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_RGB(LCH) {\n        return this.XYZ_to_RGB(this.LCHab_to_XYZ(LCH));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_XYZ(Luv) {\n        let [L, u, v] = Luv;\n        let Y = L > this.kK * this.kE ? Math.pow((L + 16) / 116, 3) : L / this.kK;\n        let RefWhite = this.Mtx_RefWhite, X_r = RefWhite[0], Y_r = RefWhite[1], Z_r = RefWhite[2], Den = X_r + 15 * Y_r + 3 * Z_r, v_0 = (9 * Y_r) / Den, u_0 = (4 * X_r) / Den, d = Y * ((39 * L) / (v + 13 * L * v_0) - 5), c = -1 / 3, b = -5 * Y, a = (1 / 3) * ((52 * L) / (u + 13 * L * u_0) - 1), X = (d - b) / (a - c), Z = X * a + b;\n        return [X, Y, Z];\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_xyY(Luv) {\n        return this.XYZ_to_xyY(this.Luv_to_XYZ(Luv));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_Lab(Luv) {\n        return this.XYZ_to_Lab(this.Luv_to_XYZ(Luv));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_LCHab(Luv) {\n        return this.Lab_to_LCHab(this.Luv_to_Lab(Luv));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_RGB(Luv) {\n        return this.XYZ_to_RGB(this.Luv_to_XYZ(Luv));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_Luv(LCH) {\n        let [L, C, H] = LCH;\n        return [\n            L,\n            C * Math.cos((H * Math.PI) / 180),\n            C * Math.sin((H * Math.PI) / 180),\n        ];\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_XYZ(LCH) {\n        return this.Luv_to_XYZ(this.LCHuv_to_Luv(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_xyY(LCH) {\n        return this.XYZ_to_xyY(this.LCHuv_to_XYZ(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_Lab(LCH) {\n        return this.XYZ_to_Lab(this.LCHuv_to_XYZ(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_LCHab(LCH) {\n        return this.Lab_to_LCHab(this.LCHuv_to_Lab(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_RGB(LCH) {\n        return this.XYZ_to_RGB(this.LCHuv_to_XYZ(LCH));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_xyY(RGB) {\n        return this.XYZ_to_xyY(this.RGB_to_XYZ(RGB));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_LCHab(RGB) {\n        return this.Lab_to_LCHab(this.RGB_to_Lab(RGB));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_Luv(RGB) {\n        return this.XYZ_to_Luv(this.RGB_to_XYZ(RGB));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_LCHuv(RGB) {\n        return this.Luv_to_LCHuv(this.RGB_to_Luv(RGB));\n    }\n} // End class definition\nexports.N = ColorConverter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///564\n')},556:()=>{eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTU2LmpzIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29sb3VyLWJsaW5kLXNpbXVsYXRvci8uL3NyYy9zdHlsZXMuc2Nzcz81NzRmIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///556\n")},570:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n;// CONCATENATED MODULE: ./src/calibration/CalibrationImage.ts\nclass CalibrationImage {\n    constructor(calibrationCanvas) {\n        this.originX = 51 * 8 / 2;\n        this.originY = 51 * 8 / 2;\n        this.totalX = 51 * 8;\n        this.totalY = 51 * 8;\n        this.calibrationCanvas = calibrationCanvas;\n        this.calibrationCanvas.width = 8 * 51;\n        this.calibrationCanvas.height = 8 * 51;\n        this.calibrationCanvas.style.backgroundColor = "#000000";\n        const myContext = this.calibrationCanvas.getContext("2d");\n        if (myContext === null) {\n            throw new Error("Can\'t get context");\n        }\n        this.context = myContext;\n        this.context.globalCompositeOperation = "source-over";\n    }\n    initialiseCanvas(calibrationGrid) {\n        for (let column = 0; column <= 50; column++) {\n            for (let row = 0; row <= 50; row++) {\n                CalibrationImage.drawCircle(column, row, calibrationGrid.getColourByColumnRow(column, row), this.context);\n            }\n        }\n    }\n    static drawCircle(column, row, color, context) {\n        const drawX = column * 8;\n        const drawY = row * 8;\n        context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n        context.fillRect(drawX + 3, drawY + 2, 1, 1);\n        context.fillRect(drawX + 4, drawY + 2, 1, 1);\n        context.fillRect(drawX + 2, drawY + 3, 1, 1);\n        context.fillRect(drawX + 3, drawY + 3, 1, 1);\n        context.fillRect(drawX + 4, drawY + 3, 1, 1);\n        context.fillRect(drawX + 5, drawY + 3, 1, 1);\n        context.fillRect(drawX + 2, drawY + 4, 1, 1);\n        context.fillRect(drawX + 3, drawY + 4, 1, 1);\n        context.fillRect(drawX + 4, drawY + 4, 1, 1);\n        context.fillRect(drawX + 5, drawY + 4, 1, 1);\n        context.fillRect(drawX + 3, drawY + 5, 1, 1);\n        context.fillRect(drawX + 4, drawY + 5, 1, 1);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/calibration/CalibrationGrid.ts\nclass CalibrationGrid {\n    constructor() {\n        this.grid = [];\n        for (let column = 0; column < 51; column++) {\n            const rowArray = [];\n            for (let row = 0; row < 51; row++) {\n                rowArray.push([0, 0, 0]);\n            }\n            this.grid.push(rowArray);\n        }\n    }\n    setColourByXY(x, y, colour) {\n        if (x < -25 || x > 25) {\n            throw new Error("x must be between -25 and 25 inclusive");\n        }\n        if (y < -25 || y > 25) {\n            throw new Error("y must be between -25 and 25 inclusive");\n        }\n        const column = x + 25;\n        const row = y + 25;\n        this.grid[column][row] = colour;\n    }\n    getColourByXY(x, y) {\n        if (x < -25 || x > 25) {\n            throw new Error("x must be between -25 and 25 inclusive");\n        }\n        if (y < -25 || y > 25) {\n            throw new Error("y must be between -25 and 25 inclusive");\n        }\n        const column = x + 25;\n        const row = y + 25;\n        return (this.grid[column][row]);\n    }\n    setColourByColumnRow(column, row, colour) {\n        if (column < 0 || column > 50) {\n            throw new Error("column must be between 0 and 50 inclusive");\n        }\n        if (row < 0 || row > 50) {\n            throw new Error("row must be between 0 and 50 inclusive");\n        }\n        const newRow = 50 - row;\n        this.grid[column][newRow] = colour;\n    }\n    getColourByColumnRow(column, row) {\n        if (column < 0 || column > 51) {\n            throw new Error("column must be between 0 and 51 inclusive");\n        }\n        if (row < 0 || row > 51) {\n            throw new Error("row must be between 0 and 51 inclusive");\n        }\n        const newRow = 50 - row;\n        return (this.grid[column][newRow]);\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/cie-colorconverter/dist/index.js\nvar dist = __webpack_require__(564);\n;// CONCATENATED MODULE: ./src/calibration/SectorUtilities.ts\nvar Quadrant;\n(function (Quadrant) {\n    Quadrant[Quadrant["North"] = 0] = "North";\n    Quadrant[Quadrant["NorthEast"] = 1] = "NorthEast";\n    Quadrant[Quadrant["East"] = 2] = "East";\n    Quadrant[Quadrant["SouthEast"] = 3] = "SouthEast";\n    Quadrant[Quadrant["South"] = 4] = "South";\n    Quadrant[Quadrant["SouthWest"] = 5] = "SouthWest";\n    Quadrant[Quadrant["West"] = 6] = "West";\n    Quadrant[Quadrant["NorthWest"] = 7] = "NorthWest";\n})(Quadrant || (Quadrant = {}));\nclass SectorUtilities {\n    static GetSectorDefinition(quadrant) {\n        const degrees22Gradient = 0.414213562373095;\n        const degrees67Gradient = 2.414213562373095;\n        let sectorDefinition;\n        switch (quadrant) {\n            case Quadrant.North: {\n                sectorDefinition = {\n                    gradientAntiClockwise: -1 * degrees67Gradient,\n                    gradientClockwise: degrees67Gradient,\n                    gradientAntiClockwisePosition: 1,\n                    gradientClockwisePosition: -1,\n                };\n                break;\n            }\n            case Quadrant.NorthEast: {\n                sectorDefinition = {\n                    gradientAntiClockwise: degrees67Gradient,\n                    gradientClockwise: degrees22Gradient,\n                    gradientAntiClockwisePosition: 1,\n                    gradientClockwisePosition: -1,\n                };\n                break;\n            }\n            case Quadrant.East: {\n                sectorDefinition = {\n                    gradientAntiClockwise: degrees22Gradient,\n                    gradientClockwise: -1 * degrees22Gradient,\n                    gradientAntiClockwisePosition: 1,\n                    gradientClockwisePosition: 1,\n                };\n                break;\n            }\n            case Quadrant.SouthEast: {\n                sectorDefinition = {\n                    gradientAntiClockwise: -1 * degrees22Gradient,\n                    gradientClockwise: -1 * degrees67Gradient,\n                    gradientAntiClockwisePosition: -1,\n                    gradientClockwisePosition: 1,\n                };\n                break;\n            }\n            case Quadrant.South: {\n                sectorDefinition = {\n                    gradientAntiClockwise: -1 * degrees67Gradient,\n                    gradientClockwise: degrees67Gradient,\n                    gradientAntiClockwisePosition: -1,\n                    gradientClockwisePosition: 1,\n                };\n                break;\n            }\n            case Quadrant.SouthWest: {\n                sectorDefinition = {\n                    gradientAntiClockwise: degrees67Gradient,\n                    gradientClockwise: degrees22Gradient,\n                    gradientAntiClockwisePosition: -1,\n                    gradientClockwisePosition: 1,\n                };\n                break;\n            }\n            case Quadrant.West: {\n                sectorDefinition = {\n                    gradientAntiClockwise: degrees22Gradient,\n                    gradientClockwise: -1 * degrees22Gradient,\n                    gradientAntiClockwisePosition: -1,\n                    gradientClockwisePosition: -1,\n                };\n                break;\n            }\n            case Quadrant.NorthWest: {\n                sectorDefinition = {\n                    gradientAntiClockwise: -1 * degrees22Gradient,\n                    gradientClockwise: -1 * degrees67Gradient,\n                    gradientAntiClockwisePosition: 1,\n                    gradientClockwisePosition: -1,\n                };\n                break;\n            }\n            default: {\n                throw new Error("Invalid quadrant");\n            }\n        }\n        return sectorDefinition;\n    }\n    static IsPointInSector(x, y, sectorDefinition) {\n        if (x > -0.5 && x < 0.5 && y > -0.5 && y < 0.5) {\n            return false;\n        }\n        const intercept1x = y / sectorDefinition.gradientAntiClockwise;\n        const intercept2x = y / sectorDefinition.gradientClockwise;\n        return (x * sectorDefinition.gradientAntiClockwisePosition > intercept1x * sectorDefinition.gradientAntiClockwisePosition) &&\n            (x * sectorDefinition.gradientClockwisePosition > intercept2x * sectorDefinition.gradientClockwisePosition);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/calibration/CalibrationSetup.ts\n\n\n\nfunction setupCalibration(baseLuv, testLuv, clearedQuadrant) {\n    const sectorDefinition = SectorUtilities.GetSectorDefinition(clearedQuadrant);\n    const calibrationGrid = new CalibrationGrid();\n    const converter = new dist/* ColorConverter */.N();\n    converter.RefWhite = "D65";\n    converter.GammaModel = "sRGB";\n    for (let x = -25; x <= 25; x++) {\n        for (let y = -25; y <= 25; y++) {\n            const circleRadius = Math.sqrt(x ** 2 + y ** 2);\n            const luminanceVariationBound = 0.5;\n            const luminanceVariation = (Math.random() * luminanceVariationBound - luminanceVariationBound / 2) + 1;\n            if ((circleRadius > 13.5 && circleRadius <= 20.5) && !SectorUtilities.IsPointInSector(x, y, sectorDefinition)) {\n                calibrationGrid.setColourByXY(x, y, converter.Luv_to_RGB([testLuv[0] * luminanceVariation, testLuv[1], testLuv[2]]));\n            }\n            else {\n                calibrationGrid.setColourByXY(x, y, converter.Luv_to_RGB([baseLuv[0] * luminanceVariation, baseLuv[1], baseLuv[2]]));\n            }\n        }\n    }\n    return calibrationGrid;\n}\n\n;// CONCATENATED MODULE: ./src/calibration/CalibrationTest.ts\n\n\n\nclass CalibrationTest {\n    constructor(parentDiv, baseLuv, testLuv) {\n        this.parentDiv = parentDiv;\n        this.container = document.createElement("div");\n        this.parentDiv.appendChild(this.container);\n        this.container.style.background = "#000000";\n        this.container.style.width = "100%";\n        this.container.style.height = "100%";\n        this.container.style.alignItems = "center";\n        this.container.style.justifyContent = "center";\n        this.container.style.display = "flex";\n        this.canvas = document.createElement("canvas");\n        this.canvas.style.margin = "auto";\n        this.container.appendChild(this.canvas);\n        this.calibrationImage = new CalibrationImage(this.canvas);\n        this.baseLuv = baseLuv;\n        this.testLuv = testLuv;\n        this.lastTime = 0;\n        let quadrantSelector = Math.random();\n        while (quadrantSelector === 1) {\n            quadrantSelector = Math.random();\n        }\n        if (quadrantSelector < 0.125) {\n            this.quadrant = Quadrant.North;\n        }\n        else if (quadrantSelector < 0.25) {\n            this.quadrant = Quadrant.NorthEast;\n        }\n        else if (quadrantSelector < 0.375) {\n            this.quadrant = Quadrant.East;\n        }\n        else if (quadrantSelector < 0.5) {\n            this.quadrant = Quadrant.SouthEast;\n        }\n        else if (quadrantSelector < 0.625) {\n            this.quadrant = Quadrant.South;\n        }\n        else if (quadrantSelector < 0.75) {\n            this.quadrant = Quadrant.SouthWest;\n        }\n        else if (quadrantSelector < 0.875) {\n            this.quadrant = Quadrant.West;\n        }\n        else {\n            this.quadrant = Quadrant.NorthWest;\n        }\n        this.animationRunning = false;\n    }\n    async getCalibrationResult() {\n        this.animationRunning = true;\n        window.requestAnimationFrame((time) => { this.animate(time); });\n        return new Promise((resolve) => {\n            this.canvas.addEventListener("click", (event) => {\n                this.animationRunning = false;\n                const x = event.offsetX - this.calibrationImage.originX;\n                const y = this.calibrationImage.totalY - event.offsetY - this.calibrationImage.originY;\n                const sectorDefinition = SectorUtilities.GetSectorDefinition(this.quadrant);\n                const correctClick = SectorUtilities.IsPointInSector(x, y, sectorDefinition);\n                console.log(`OffsetX=${event.offsetX}, OffsetY=${event.offsetY}, X=${x}, Y=${y}, correct=${correctClick ? "true" : "false"}`);\n                resolve(correctClick);\n            }, { once: true });\n        });\n    }\n    animate(time) {\n        if (this.animationRunning) {\n            if (time - this.lastTime > 50) {\n                const generatedGrid = setupCalibration(this.baseLuv, this.testLuv, this.quadrant);\n                this.calibrationImage.initialiseCanvas(generatedGrid);\n                this.lastTime = time;\n            }\n            window.requestAnimationFrame((newTime) => { this.animate(newTime); });\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/index.ts\n\n\nconst approach1Button = document.querySelector("#approach1");\nif (approach1Button === null) {\n    throw new Error("Can\'t locate intorduction container");\n}\napproach1Button.addEventListener("click", () => {\n    const introductionContainer = document.querySelector("#introduction");\n    const calibrationHost = document.querySelector("#canvasHost");\n    if (introductionContainer === null) {\n        throw new Error("Can\'t locate intorduction container");\n    }\n    if (calibrationHost === null) {\n        throw new Error("Can\'t find canvashost");\n    }\n    introductionContainer.classList.add("hide-all");\n    calibrationHost.classList.remove("hide-all");\n    const tester = new CalibrationTest(calibrationHost, [50, 22.294886634339058, 80.86387581452101], [50, -120, 25]);\n    const promise = tester.getCalibrationResult();\n    promise.then((result) => { alert(`You ${result ? "have" : "haven\'t"} clicked on the gap`); });\n});\nconst x = 0.403;\nconst y = 0.442;\nconst Y = 0.5;\nconst X = Y / y * x;\nconst Z = Y / y * (1 - x - y);\nconst converter = new dist/* ColorConverter */.N();\nconverter.RefWhite = "D65";\nconverter.GammaModel = "sRGB";\nconst Luv = converter.XYZ_to_Luv([X, Y, Z]);\nconsole.count(`Luv=[${Luv[0]}, ${Luv[1]}, ${Luv[2]}], u\'=${4 * X / (X + 15 * Y + 3 * Z)} v\'=${9 * Y / (X + 15 * Y + 3 * Z)}`);\nconsole.log("foo");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///570\n')}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var C=__webpack_module_cache__[I]={exports:{}};return __webpack_modules__[I](C,C.exports,__webpack_require__),C.exports}__webpack_require__(570);var __webpack_exports__=__webpack_require__(556)})();
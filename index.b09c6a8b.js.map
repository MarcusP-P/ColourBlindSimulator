{"mappings":"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","sources":["src/calibration/CalibrationImage.ts","src/calibration/CalibrationGrid.ts","node_modules/cie-colorconverter/dist/index.js","node_modules/cie-colorconverter/dist/Matrix.js","src/calibration/SectorUtilities.ts","src/index.ts","src/calibration/CalibrationTest.ts","src/calibration/CalibrationSetup.ts"],"sourcesContent":["import type { NumericTriple } from \"cie-colorconverter/dist/Matrix\";\nimport type { CalibrationGrid } from \"./CalibrationGrid\";\n\nexport class CalibrationImage {\n    private readonly calibrationCanvas: HTMLCanvasElement;\n\n    private readonly context: CanvasRenderingContext2D;\n    public readonly originX=51*8/2;\n    public readonly originY=51*8/2;\n    public readonly totalX=51*8;\n    public readonly totalY=51*8;\n\n    public constructor(calibrationCanvas: HTMLCanvasElement) {\n        this.calibrationCanvas = calibrationCanvas;\n        this.calibrationCanvas.width = 8 * 51;\n        this.calibrationCanvas.height = 8 * 51;\n        this.calibrationCanvas.style.backgroundColor = \"#000000\";\n        const myContext = this.calibrationCanvas.getContext(\"2d\");\n        if (myContext===null){\n            throw new Error(\"Can't get context\");\n        }\n        this.context=myContext;\n        this.context.globalCompositeOperation = \"source-over\";\n    }\n\n    public initialiseCanvas(calibrationGrid: CalibrationGrid): void {\n        for (let column = 0; column <= 50; column++) {\n            for (let row = 0; row <= 50; row++) {\n                CalibrationImage.drawCircle(column, row, calibrationGrid.getColourByColumnRow(column, row), this.context);\n            }\n        }\n    }\n\n\n    private static drawCircle(column: number, row: number, color: NumericTriple, context: CanvasRenderingContext2D): void {\n        const drawX = column * 8;\n        const drawY = row * 8;\n\n        context.fillStyle = `rgb(${color[0]},${color[1]},${color[2]})`;\n\n        context.fillRect(drawX + 3, drawY + 2, 1, 1);\n        context.fillRect(drawX + 4, drawY + 2, 1, 1);\n        context.fillRect(drawX + 2, drawY + 3, 1, 1);\n        context.fillRect(drawX + 3, drawY + 3, 1, 1);\n        context.fillRect(drawX + 4, drawY + 3, 1, 1);\n        context.fillRect(drawX + 5, drawY + 3, 1, 1);\n        context.fillRect(drawX + 2, drawY + 4, 1, 1);\n        context.fillRect(drawX + 3, drawY + 4, 1, 1);\n        context.fillRect(drawX + 4, drawY + 4, 1, 1);\n        context.fillRect(drawX + 5, drawY + 4, 1, 1);\n        context.fillRect(drawX + 3, drawY + 5, 1, 1);\n        context.fillRect(drawX + 4, drawY + 5, 1, 1);\n    }\n}","import type { NumericTriple } from \"cie-colorconverter/dist/Matrix\";\n\nexport class CalibrationGrid {\n    private readonly grid: NumericTriple[][] = [];\n\n    public constructor() {\n        // Initialise the matrix array.        \n        for (let column = 0; column < 51; column++) {\n            const rowArray: NumericTriple[] = [];\n            for (let row = 0; row < 51; row++) {\n\n                rowArray.push([0, 0, 0]);\n            }\n            this.grid.push(rowArray);\n        }\n    }\n\n    // When we generate these, we want to use x and y ranging from -25 to 25, withthe origin in the centre\n    public setColourByXY(x: number, y: number, colour: NumericTriple): void {\n        if (x < -25 || x > 25) {\n            throw new Error(\"x must be between -25 and 25 inclusive\");\n        }\n        if (y < -25 || y > 25) {\n            throw new Error(\"y must be between -25 and 25 inclusive\");\n        }\n\n        const column = x + 25;\n        const row = y + 25;\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.grid[column]![row] = colour;\n    }\n\n    public getColourByXY(x: number, y: number): NumericTriple {\n        if (x < -25 || x > 25) {\n            throw new Error(\"x must be between -25 and 25 inclusive\");\n        }\n        if (y < -25 || y > 25) {\n            throw new Error(\"y must be between -25 and 25 inclusive\");\n        }\n\n        const column = x + 25;\n        const row = y + 25;\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return (this.grid[column]![row]!);\n    }\n\n    // When we want to draw these on the screen, we want to use row/column from 0 to 51 with the origin in\n    // the top left, so as we move down, we need to increase the numbers    \n    public setColourByColumnRow(column: number, row: number, colour: NumericTriple): void {\n        if (column < 0 || column > 50) {\n            throw new Error(\"column must be between 0 and 50 inclusive\");\n        }\n        if (row < 0 || row > 50) {\n            throw new Error(\"row must be between 0 and 50 inclusive\");\n        }\n\n        const newRow = 50 - row;\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.grid[column]![newRow] = colour;\n    }\n\n    public getColourByColumnRow(column: number, row: number): NumericTriple {\n        if (column < 0 || column > 51) {\n            throw new Error(\"column must be between 0 and 51 inclusive\");\n        }\n        if (row < 0 || row > 51) {\n            throw new Error(\"row must be between 0 and 51 inclusive\");\n        }\n\n        const newRow = 50 - row;\n\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return (this.grid[column]![newRow]!);\n    }\n\n\n}","\"use strict\";\n// See http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html for details on these computations.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ColorConverter = void 0;\nconst Matrix_1 = require(\"./Matrix\");\nclass ColorConverter {\n    // Constructor\n    constructor({ RefWhite = \"D50\", RgbModel = \"sRGB\", GammaModel = \"sRGB\", Adaptation = \"Bradford\", } = {}) {\n        // Properties to be set on instantiation\n        this.RefWhite = \"D50\";\n        this.RgbModel = \"sRGB\";\n        this.GammaModel = \"sRGB\";\n        this.Adaptation = \"Bradford\";\n        this.kE = 216 / 24389;\n        this.kK = 24389 / 27;\n        this.RefWhite = RefWhite;\n        this.RgbModel = RgbModel;\n        this.GammaModel = GammaModel;\n        this.Adaptation = Adaptation;\n    }\n    // Computed: RefWhite Matrix\n    get Mtx_RefWhite() {\n        switch (this.RefWhite) {\n            case \"A\":\n                return [1.0985, 1, 0.35585];\n            case \"B\":\n                return [0.99072, 1, 0.85223];\n            case \"C\":\n                return [0.98074, 1, 1.18232];\n            case \"D50\":\n                return [0.96422, 1, 0.82521];\n            case \"D55\":\n                return [0.95682, 1, 0.92149];\n            case \"D65\":\n                return [0.95047, 1, 1.0888];\n            case \"D75\":\n                return [0.94972, 1, 1.22638];\n            case \"E\":\n                return [1, 1, 1];\n            case \"F2\":\n                return [0.99186, 1, 0.67393];\n            case \"F7\":\n                return [0.95041, 1, 1.08747];\n            case \"F11\":\n                return [1.00962, 1, 0.6435];\n            default:\n                return [1, 1, 1];\n        }\n    }\n    // Computed: RefWhite RGB Matrix\n    get Mtx_RefWhiteRGB() {\n        switch (this.RgbModel) {\n            case \"Adobe RGB (1998)\":\n                return [0.95047, 1, 1.08883];\n            case \"AppleRGB\":\n                return [0.95047, 1, 1.08883];\n            case \"Best RGB\":\n                return [0.96422, 1, 0.82521];\n            case \"Beta RGB\":\n                return [0.96422, 1, 0.82521];\n            case \"Bruce RGB\":\n                return [0.95047, 1, 1.08883];\n            case \"CIE RGB\":\n                return [1, 1, 1];\n            case \"ColorMatch RGB\":\n                return [0.96422, 1, 0.82521];\n            case \"Don RGB 4\":\n                return [0.96422, 1, 0.82521];\n            case \"ECI RGB v2\":\n                return [0.96422, 1, 0.82521];\n            case \"Ekta Space PS5\":\n                return [0.96422, 1, 0.82521];\n            case \"NTSC RGB\":\n                return [0.98074, 1, 1.18232];\n            case \"PAL/SECAM RGB\":\n                return [0.95047, 1, 1.08883];\n            case \"ProPhoto RGB\":\n                return [0.96422, 1, 0.82521];\n            case \"SMPTE-C RGB\":\n                return [0.95047, 1, 1.08883];\n            case \"sRGB\":\n                return [0.95047, 1, 1.08883];\n            case \"Wide Gamut RGB\":\n                return [0.96422, 1, 0.82521];\n        }\n    }\n    // Computed: GammaRGB + Index\n    get GammaRGB() {\n        switch (this.RgbModel) {\n            case \"Adobe RGB (1998)\":\n                return { value: 2.2, index: 2 };\n            case \"AppleRGB\":\n                return { value: 1.8, index: 1 };\n            case \"Best RGB\":\n                return { value: 2.2, index: 2 };\n            case \"Beta RGB\":\n                return { value: 2.2, index: 2 };\n            case \"Bruce RGB\":\n                return { value: 2.2, index: 2 };\n            case \"CIE RGB\":\n                return { value: 2.2, index: 2 };\n            case \"ColorMatch RGB\":\n                return { value: 1.8, index: 2 };\n            case \"Don RGB 4\":\n                return { value: 2.2, index: 2 };\n            case \"ECI RGB v2\":\n                return { value: 0, index: 4 };\n            case \"Ekta Space PS5\":\n                return { value: 2.2, index: 2 };\n            case \"NTSC RGB\":\n                return { value: 2.2, index: 2 };\n            case \"PAL/SECAM RGB\":\n                return { value: 2.2, index: 2 };\n            case \"ProPhoto RGB\":\n                return { value: 1.8, index: 1 };\n            case \"SMPTE-C RGB\":\n                return { value: 2.2, index: 2 };\n            case \"sRGB\":\n                return { value: -2.2, index: 3 };\n            case \"Wide Gamut RGB\":\n                return { value: 2.2, index: 2 };\n        }\n    }\n    // Computed: Gamma value\n    get Gamma() {\n        switch (this.GammaModel.toString()) {\n            case \"1.0\":\n                return 1;\n            case \"1.8\":\n                return 1.8;\n            case \"2.2\":\n                return 2.2;\n            case \"sRGB\":\n                return -2.2;\n            case \"L*\":\n                return 0;\n            default:\n                return 1;\n        }\n    }\n    // Computed: RGB to XYZ matrix\n    // Values come from table on http://www.brucelindbloom.com/\n    get Mtx_RGB2XYZ() {\n        let xr, yr, xg, yg, xb, yb;\n        switch (this.RgbModel) {\n            case \"Adobe RGB (1998)\": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.21, 0.71, 0.15, 0.06];\n                break;\n            }\n            case \"AppleRGB\": {\n                [xr, yr, xg, yg, xb, yb] = [0.625, 0.34, 0.28, 0.595, 0.155, 0.07];\n                break;\n            }\n            case \"Best RGB\": {\n                [xr, yr, xg, yg, xb, yb] = [0.7347, 0.2653, 0.215, 0.775, 0.13, 0.035];\n                break;\n            }\n            case \"Beta RGB\": {\n                [xr, yr, xg, yg, xb, yb] = [\n                    0.6888, 0.3112, 0.1986, 0.7551, 0.1265, 0.0352,\n                ];\n                break;\n            }\n            case \"Bruce RGB\": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.28, 0.65, 0.15, 0.06];\n                break;\n            }\n            case \"CIE RGB\": {\n                [xr, yr, xg, yg, xb, yb] = [0.735, 0.265, 0.274, 0.717, 0.167, 0.009];\n                break;\n            }\n            case \"ColorMatch RGB\": {\n                [xr, yr, xg, yg, xb, yb] = [0.63, 0.34, 0.295, 0.605, 0.15, 0.075];\n                break;\n            }\n            case \"Don RGB 4\": {\n                [xr, yr, xg, yg, xb, yb] = [0.696, 0.3, 0.215, 0.765, 0.13, 0.035];\n                break;\n            }\n            case \"ECI RGB v2\": {\n                [xr, yr, xg, yg, xb, yb] = [0.67, 0.33, 0.21, 0.71, 0.14, 0.08];\n                break;\n            }\n            case \"Ekta Space PS5\": {\n                [xr, yr, xg, yg, xb, yb] = [0.695, 0.305, 0.26, 0.7, 0.11, 0.005];\n                break;\n            }\n            case \"NTSC RGB\": {\n                [xr, yr, xg, yg, xb, yb] = [0.67, 0.33, 0.21, 0.71, 0.14, 0.08];\n                break;\n            }\n            case \"PAL/SECAM RGB\": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.29, 0.6, 0.15, 0.06];\n                break;\n            }\n            case \"ProPhoto RGB\": {\n                [xr, yr, xg, yg, xb, yb] = [\n                    0.7347, 0.2653, 0.1596, 0.8404, 0.0366, 0.0001,\n                ];\n                break;\n            }\n            case \"SMPTE-C RGB\": {\n                [xr, yr, xg, yg, xb, yb] = [0.63, 0.34, 0.31, 0.595, 0.155, 0.07];\n                break;\n            }\n            case \"sRGB\": {\n                [xr, yr, xg, yg, xb, yb] = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];\n                break;\n            }\n            case \"Wide Gamut RGB\": {\n                [xr, yr, xg, yg, xb, yb] = [0.735, 0.265, 0.115, 0.826, 0.157, 0.018];\n                break;\n            }\n        } // End switch\n        let X_r = xr / yr, Y_r = 1, Z_r = (1 - xr - yr) / yr, X_g = xg / yg, Y_g = 1, Z_g = (1 - xg - yg) / yg, X_b = xb / yb, Y_b = 1, Z_b = (1 - xb - yb) / yb, RW_RGB = this.Mtx_RefWhiteRGB, X_W = RW_RGB[0], Y_W = RW_RGB[1], Z_W = RW_RGB[2];\n        let [S_r, S_g, S_b] = Matrix_1.Matrix.multiply_3x3_times_triple(Matrix_1.Matrix.inv([\n            [X_r, X_g, X_b],\n            [Y_r, Y_g, Y_b],\n            [Z_r, Z_g, Z_b],\n        ]), [X_W, Y_W, Z_W]);\n        return Matrix_1.Matrix.transpose([\n            [S_r * X_r, S_g * X_g, S_b * X_b],\n            [S_r * Y_r, S_g * Y_g, S_b * Y_b],\n            [S_r * Z_r, S_g * Z_g, S_b * Z_b],\n        ]);\n    } // End Mtx_RGB2XYZ\n    // Computed: Matrix Adaptaion\n    get MtxAdp() {\n        switch (this.Adaptation) {\n            case \"Bradford\": {\n                return [\n                    [0.8951, -0.7502, 0.0389],\n                    [0.2664, 1.7135, -0.0685],\n                    [-0.1614, 0.0367, 1.0296],\n                ];\n            }\n            case \"von Kries\": {\n                return [\n                    [0.40024, -0.2263, 0],\n                    [0.7076, 1.16532, 0],\n                    [-0.08081, 0.0457, 0.91822],\n                ];\n            }\n            case \"XYZ Scaling\":\n            case \"None\": {\n                return [\n                    [1, 0, 0],\n                    [0, 1, 0],\n                    [0, 0, 1],\n                ];\n            }\n        }\n    } // End matrix Adaptation\n    /**\n     *\n     * @param {number} linear Linear value\n     * @param {number} Gamma Gamma value\n     */\n    compand(linear) {\n        let G = this.Gamma;\n        // Depends on sign of Gamma\n        if (G > 0) {\n            return linear >= 0 ? Math.pow(linear, 1 / G) : -Math.pow(-linear, 1 / G);\n        }\n        else if (G < 0) {\n            /** sRGB */\n            let sign = 1;\n            if (linear < 0) {\n                sign = -1;\n                linear = -linear;\n            }\n            return (sign *\n                (linear <= 0.0031308\n                    ? linear * 12.92\n                    : 1.055 * Math.pow(linear, 1.0 / 2.4) - 0.055));\n        }\n        else {\n            /** L* */\n            let sign = 1;\n            if (linear < 0) {\n                sign = -1;\n                linear = -linear;\n            }\n            return (sign *\n                (linear <= 216.0 / 24389.0\n                    ? (linear * 24389.0) / 2700.0\n                    : 1.16 * Math.pow(linear, 1.0 / 3.0) - 0.16));\n        }\n    }\n    /**\n     * Inverse compand function\n     * @param {number} companded Companded value\n     */\n    inverse_compand(companded) {\n        let G = this.Gamma;\n        if (G > 0) {\n            return companded >= 0 ? Math.pow(companded, G) : -Math.pow(-companded, G);\n        }\n        else if (G < 0) {\n            /** sRGB */\n            let sign = 1;\n            if (companded < 0) {\n                sign = -1;\n                companded = -companded;\n            }\n            return (sign *\n                (companded <= 0.04045\n                    ? companded / 12.92\n                    : Math.pow((companded + 0.055) / 1.055, 2.4)));\n        }\n        else {\n            /** L* */\n            let sign = 1;\n            if (companded < 0) {\n                sign = -1;\n                companded = -companded;\n            }\n            return (sign *\n                (companded <= 0.08\n                    ? (2700.0 * companded) / 24389.0\n                    : (((1000000.0 * companded + 480000.0) * companded + 76800.0) *\n                        companded +\n                        4096.0) /\n                        1560896.0));\n        }\n    }\n    /**\n     * Convert XYZ triple to RGB: ✅\n     * @param {[number, number, number]} XYZ triple in range [0, 1]\n     * Outputs RGB triple in range [0, 255]\n     */\n    XYZ_to_RGB(XYZ) {\n        let XYZd = XYZ;\n        if (this.Adaptation != \"None\") {\n            // Get source/domain scale factors\n            let [As, Bs, Cs] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhite, this.MtxAdp);\n            let [Ad, Bd, Cd] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhiteRGB, this.MtxAdp);\n            XYZd = Matrix_1.Matrix.multiply_triple_times_3x3(XYZ, Matrix_1.Matrix.multiply_3x3_times_3x3(this.MtxAdp, Matrix_1.Matrix.multiply_3x3_times_3x3([\n                [Ad / As, 0, 0],\n                [0, Bd / Bs, 0],\n                [0, 0, Cd / Cs],\n            ], Matrix_1.Matrix.inv(this.MtxAdp))));\n        }\n        let RGB = Matrix_1.Matrix.multiply_triple_times_3x3(XYZd, Matrix_1.Matrix.inv(this.Mtx_RGB2XYZ));\n        return RGB.map((v) => 255 * this.compand(v));\n    } // End XYZ_to_RGB\n    /**\n     * Convert RGB tripe to XYZ: ✅\n     * @param {number[]} RGB RGB Triple\n     * NOTE: This assumes RGB is scaled from [0, 255], XYZ in [0, 1]\n     */\n    RGB_to_XYZ(RGB) {\n        // Inverse compound the values\n        RGB = RGB.map((v) => this.inverse_compand(v / 255));\n        // Linear RGB to XYZ\n        let XYZ = Matrix_1.Matrix.multiply_triple_times_3x3(RGB, this.Mtx_RGB2XYZ);\n        // Adaptation if necessary\n        if (this.Adaptation != \"None\") {\n            // Get source/domain scale factors\n            let [As, Bs, Cs] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhiteRGB, this.MtxAdp);\n            let [Ad, Bd, Cd] = Matrix_1.Matrix.multiply_triple_times_3x3(this.Mtx_RefWhite, this.MtxAdp);\n            return Matrix_1.Matrix.multiply_triple_times_3x3(XYZ, Matrix_1.Matrix.multiply_3x3_times_3x3(this.MtxAdp, Matrix_1.Matrix.multiply_3x3_times_3x3([\n                [Ad / As, 0, 0],\n                [0, Bd / Bs, 0],\n                [0, 0, Cd / Cs],\n            ], Matrix_1.Matrix.inv(this.MtxAdp))));\n        }\n        else {\n            return XYZ;\n        }\n    } // End RGB to XYZ\n    /**\n     * Convert Lab to XYZ\n     * @param Lab Lab triple\n     * XYZ in range [0, 1]\n     */\n    Lab_to_XYZ(Lab) {\n        let L = Lab[0], a = Lab[1], b = Lab[2], f_y = (L + 16) / 116, f_x = a / 500 + f_y, f_z = f_y - b / 200, x_r = Math.pow(f_x, 3) > this.kE\n            ? Math.pow(f_x, 3)\n            : (116 * f_x - 16) / this.kK, y_r = L > this.kK * this.kE ? Math.pow((L + 16) / 116, 3) : L / this.kK, z_r = Math.pow(f_z, 3) > this.kE\n            ? Math.pow(f_z, 3)\n            : (116 * f_z - 16) / this.kK, RefWhite = this.Mtx_RefWhite;\n        return [x_r * RefWhite[0], y_r * RefWhite[1], z_r * RefWhite[2]];\n    } // End Lab to XYZ\n    /**\n     * Converts Lab triple to XYZ tripe in range [0, 1]\n     * @param XYZ XYZ triple\n     */\n    XYZ_to_Lab(XYZ) {\n        let X = XYZ[0], Y = XYZ[1], Z = XYZ[2], RefWhite = this.Mtx_RefWhite, X_r = RefWhite[0], Y_r = RefWhite[1], Z_r = RefWhite[2], x_r = X / X_r, y_r = Y / Y_r, z_r = Z / Z_r, f_x = x_r > this.kE ? Math.pow(x_r, 1 / 3) : (this.kK * x_r + 16) / 116, f_y = y_r > this.kE ? Math.pow(y_r, 1 / 3) : (this.kK * y_r + 16) / 116, f_z = z_r > this.kE ? Math.pow(z_r, 1 / 3) : (this.kK * z_r + 16) / 116;\n        return [116 * f_y - 16, 500 * (f_x - f_y), 200 * (f_y - f_z)];\n    } // End XYZ_to_Lab\n    /**\n     * Convert Lab to RGB\n     * @param Lab Lab triple\n     * Note: RGB in [0, 255]\n     */\n    Lab_to_RGB(Lab) {\n        return this.XYZ_to_RGB(this.Lab_to_XYZ(Lab));\n    }\n    /**\n     * Convert RGB to Lab\n     * @param RGB RGB triple in range [0, 255]\n     */\n    RGB_to_Lab(RGB) {\n        return this.XYZ_to_Lab(this.RGB_to_XYZ(RGB));\n    }\n    /**\n     * Convert xyY triple to XYZ triple\n     * @param xyY xyY triple\n     */\n    xyY_to_XYZ(xyY) {\n        let [x, y, Y] = xyY;\n        if (y < 0.000001) {\n            return [0, 0, 0];\n        }\n        else {\n            return [(x * Y) / y, Y, ((1 - x - y) * Y) / y];\n        }\n    } // End xyY_to_XYZ\n    /**\n     * Convert XYZ to xyY\n     * @param XYZ XYZ triple in [0, 1]\n     */\n    XYZ_to_xyY(XYZ) {\n        let [X, Y, Z] = XYZ, Den = X + Y + Z;\n        // Non-zero Den:\n        if (Den > 0) {\n            return [X / Den, Y / Den, Y];\n        }\n        // Zero den\n        else {\n            let [RW_X, RW_Y, RW_Z] = this.Mtx_RefWhite, RW_Den = RW_X + RW_Y + RW_Z;\n            return [RW_X / RW_Den, RW_Y / RW_Den, Y];\n        }\n    }\n    /**\n     * Lab triple to LCH triple\n     * @param Lab Lab triple\n     */\n    Lab_to_LCHab(Lab) {\n        let [L, a, b] = Lab;\n        let H = (180 / Math.PI) * Math.atan2(b, a);\n        return [\n            L,\n            Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)),\n            H + (H >= 0 ? 0 : 360),\n        ];\n    }\n    /**\n     * LCH triple to Lab triple\n     * @param LCH LCH Triple\n     */\n    LCHab_to_Lab(LCH) {\n        let [L, C, H] = LCH;\n        return [\n            L,\n            C * Math.cos((H * Math.PI) / 180),\n            C * Math.sin((H * Math.PI) / 180),\n        ];\n    }\n    /**\n     * @param XYZ XYZ Triple\n     */\n    XYZ_to_LCHab(XYZ) {\n        return this.Lab_to_LCHab(this.XYZ_to_Lab(XYZ));\n    }\n    /**\n     * @param XYZ XYZ Triple\n     */\n    XYZ_to_Luv(XYZ) {\n        let [X, Y, Z] = XYZ, RefWhite = this.Mtx_RefWhite, X_r = RefWhite[0], Y_r = RefWhite[1], Z_r = RefWhite[2], Den = X + 15 * Y + 3 * Z, up = Den > 0 ? (4 * X) / Den : 0, vp = Den > 0 ? (9 * Y) / Den : 0, urp = (4 * X_r) / (X_r + 15 * Y_r + 3 * Z_r), vrp = (9 * Y_r) / (X_r + 15 * Y_r + 3 * Z_r), yr = Y / Y_r, L = yr > this.kE ? 116 * Math.pow(yr, 1 / 3) - 16 : this.kK * yr;\n        return [L, 13 * L * (up - urp), 13 * L * (vp - vrp)];\n    }\n    /**\n     * @param XYZ XYZ triple\n     */\n    XYZ_to_LCHuv(XYZ) {\n        return this.Luv_to_LCHuv(this.XYZ_to_Luv(XYZ));\n    }\n    /**\n     * Luv to LCHuv\n     * @param Luv Luv triple\n     */\n    Luv_to_LCHuv(Luv) {\n        let [L, u, v] = Luv;\n        let H = (180 / Math.PI) * Math.atan2(v, u);\n        return [\n            L,\n            Math.sqrt(Math.pow(u, 2) + Math.pow(v, 2)),\n            H + (H >= 0 ? 0 : 360),\n        ];\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_Lab(xyY) {\n        return this.XYZ_to_Lab(this.xyY_to_XYZ(xyY));\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_LCHab(xyY) {\n        return this.Lab_to_LCHab(this.XYZ_to_Lab(this.xyY_to_XYZ(xyY)));\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_Luv(xyY) {\n        return this.XYZ_to_Luv(this.xyY_to_XYZ(xyY));\n    }\n    /**\n     * @param xyY xyY triple\n     */\n    xyY_to_LCHuv(xyY) {\n        return this.Luv_to_LCHuv(this.XYZ_to_Luv(this.xyY_to_XYZ(xyY)));\n    }\n    /**\n     * @param xyY xyY Triple\n     */\n    xyY_to_RGB(xyY) {\n        return this.XYZ_to_RGB(this.xyY_to_XYZ(xyY));\n    }\n    /**\n     * @param Lab Lab triple\n     */\n    Lab_to_xyY(Lab) {\n        return this.XYZ_to_xyY(this.Lab_to_XYZ(Lab));\n    }\n    /**\n     * @param Lab Lab triple\n     */\n    Lab_to_Luv(Lab) {\n        return this.XYZ_to_Luv(this.Lab_to_XYZ(Lab));\n    }\n    /**\n     * @param Lab Lab triple\n     */\n    Lab_to_LCHuv(Lab) {\n        return this.Luv_to_LCHuv(this.Lab_to_Luv(Lab));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_XYZ(LCH) {\n        return this.Lab_to_XYZ(this.LCHab_to_Lab(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_xyY(LCH) {\n        return this.XYZ_to_xyY(this.Lab_to_XYZ(this.LCHab_to_Lab(LCH)));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_Luv(LCH) {\n        return this.XYZ_to_Luv(this.Lab_to_XYZ(this.LCHab_to_Lab(LCH)));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_LCHuv(LCH) {\n        return this.Luv_to_LCHuv(this.LCHab_to_Luv(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHab_to_RGB(LCH) {\n        return this.XYZ_to_RGB(this.LCHab_to_XYZ(LCH));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_XYZ(Luv) {\n        let [L, u, v] = Luv;\n        let Y = L > this.kK * this.kE ? Math.pow((L + 16) / 116, 3) : L / this.kK;\n        let RefWhite = this.Mtx_RefWhite, X_r = RefWhite[0], Y_r = RefWhite[1], Z_r = RefWhite[2], Den = X_r + 15 * Y_r + 3 * Z_r, v_0 = (9 * Y_r) / Den, u_0 = (4 * X_r) / Den, d = Y * ((39 * L) / (v + 13 * L * v_0) - 5), c = -1 / 3, b = -5 * Y, a = (1 / 3) * ((52 * L) / (u + 13 * L * u_0) - 1), X = (d - b) / (a - c), Z = X * a + b;\n        return [X, Y, Z];\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_xyY(Luv) {\n        return this.XYZ_to_xyY(this.Luv_to_XYZ(Luv));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_Lab(Luv) {\n        return this.XYZ_to_Lab(this.Luv_to_XYZ(Luv));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_LCHab(Luv) {\n        return this.Lab_to_LCHab(this.Luv_to_Lab(Luv));\n    }\n    /**\n     * @param Luv NumericTriple\n     */\n    Luv_to_RGB(Luv) {\n        return this.XYZ_to_RGB(this.Luv_to_XYZ(Luv));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_Luv(LCH) {\n        let [L, C, H] = LCH;\n        return [\n            L,\n            C * Math.cos((H * Math.PI) / 180),\n            C * Math.sin((H * Math.PI) / 180),\n        ];\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_XYZ(LCH) {\n        return this.Luv_to_XYZ(this.LCHuv_to_Luv(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_xyY(LCH) {\n        return this.XYZ_to_xyY(this.LCHuv_to_XYZ(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_Lab(LCH) {\n        return this.XYZ_to_Lab(this.LCHuv_to_XYZ(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_LCHab(LCH) {\n        return this.Lab_to_LCHab(this.LCHuv_to_Lab(LCH));\n    }\n    /**\n     * @param LCH NumericTriple\n     */\n    LCHuv_to_RGB(LCH) {\n        return this.XYZ_to_RGB(this.LCHuv_to_XYZ(LCH));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_xyY(RGB) {\n        return this.XYZ_to_xyY(this.RGB_to_XYZ(RGB));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_LCHab(RGB) {\n        return this.Lab_to_LCHab(this.RGB_to_Lab(RGB));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_Luv(RGB) {\n        return this.XYZ_to_Luv(this.RGB_to_XYZ(RGB));\n    }\n    /**\n     * @param RGB NumericTriple\n     */\n    RGB_to_LCHuv(RGB) {\n        return this.Luv_to_LCHuv(this.RGB_to_Luv(RGB));\n    }\n} // End class definition\nexports.ColorConverter = ColorConverter;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Matrix = void 0;\nclass Matrix {\n}\nexports.Matrix = Matrix;\n/**\n * n x m matrix transposes to an m x n\n */\nMatrix.transpose = (A) => {\n    var _a;\n    const n = A.length || 0;\n    const m = (_a = A[0]) === null || _a === void 0 ? void 0 : _a.length;\n    const A_t = Identity_3x3();\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            A_t[j][i] = A[i][j];\n        }\n    }\n    return A_t;\n};\n/**\n * Return inverse of a matrix (if invertible)\n * Throws if matrix not invertible.\n */\nMatrix.inv = (A) => {\n    const res = Identity_3x3();\n    const [[a, b, c], [d, e, f], [h, i, j]] = A;\n    const det = a * e * j - a * f * i - b * d * j + b * f * h + c * d * i - c * e * h;\n    if (det === 0) {\n        throw new Error(\"Matrix not invertible\");\n    }\n    const detInv = 1 / det;\n    res[0][0] = detInv * (e * j - f * i);\n    res[0][1] = detInv * (c * i - b * j);\n    res[0][2] = detInv * (b * f - c * e);\n    res[1][0] = detInv * (f * h - d * j);\n    res[1][1] = detInv * (a * j - c * h);\n    res[1][2] = detInv * (c * d - a * f);\n    res[2][0] = detInv * (d * i - e * h);\n    res[2][1] = detInv * (b * h - a * i);\n    res[2][2] = detInv * (a * e - b * d);\n    return res;\n};\nMatrix.multiply_3x3_times_triple = (A, x) => {\n    const [[a, b, c], [d, e, f], [g, h, i]] = A;\n    const [t, u, v] = x;\n    return [\n        a * t + b * u + c * v,\n        d * t + e * u + f * v,\n        g * t + h * u + i * v,\n    ];\n};\nMatrix.multiply_triple_times_3x3 = (x, A) => {\n    const [t, u, v] = x;\n    const [[a, b, c], [d, e, f], [g, h, i]] = A;\n    return [\n        a * t + d * u + g * v,\n        b * t + e * u + h * v,\n        c * t + f * u + i * v,\n    ];\n};\nMatrix.multiply_3x3_times_3x3 = (A, B) => {\n    const [[a, b, c], [d, e, f], [g, h, i]] = A;\n    const [[j, k, l], [m, n, o], [p, q, r]] = B;\n    return [\n        [a * j + b * m + c * p, a * k + b * n + c * q, a * l + b * o + c * r],\n        [d * j + e * m + f * p, d * k + e * n + f * q, d * l + e * o + f * r],\n        [g * j + h * m + i * p, g * k + h * n + i * q, g * l + h * o + i * r],\n    ];\n};\nconst Identity_3x3 = () => [\n    [1, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n];\n","// eslint-disable-next-line no-shadow\nexport const enum Quadrant {\n    North, // eslint-disable-line no-unused-vars\n    NorthEast, // eslint-disable-line no-unused-vars\n    East, // eslint-disable-line no-unused-vars\n    SouthEast, // eslint-disable-line no-unused-vars\n    South, // eslint-disable-line no-unused-vars\n    SouthWest, // eslint-disable-line no-unused-vars\n    West, // eslint-disable-line no-unused-vars\n    NorthWest, // eslint-disable-line no-unused-vars\n}\n\nexport type SectorDefinition = {\n    // The gradients of the clockwise and anticlockwise edges of the segment\n    gradientAntiClockwise: number;\n    gradientClockwise: number;\n\n    // The position of the edge relative to a point in the wedge.\n    // If this is positive, the points we want are to the right of the edge, if it is negative, the left\n    gradientAntiClockwisePosition: number;\n    gradientClockwisePosition: number;\n};\n\nexport class SectorUtilities {\n\n    public static GetSectorDefinition(quadrant: Quadrant): SectorDefinition {\n        // To find the segment that we're not interested in, we need the gradients of the two lines\n        // that deliniate our segments, at either 22.5 or 67.5 degrees\n        // The lines on the edge of our slice are either at +/- 22.5 and +/-67.5 degrees.\n        const degrees22Gradient = 0.414213562373095;\n        const degrees67Gradient = 2.414213562373095;\n\n        // Get the gradients of the two lines we're interested in, with the first being the anti clockwise border, \n        // and the second being the clockwise\n\n        let sectorDefinition: SectorDefinition;\n\n        switch (quadrant) {\n            case Quadrant.North: {\n                sectorDefinition = {\n                    gradientAntiClockwise: -1 * degrees67Gradient,\n                    gradientClockwise: degrees67Gradient,\n                    gradientAntiClockwisePosition: 1,\n                    gradientClockwisePosition: -1,\n                };\n                break;\n            }\n            case Quadrant.NorthEast: {\n                sectorDefinition = {\n                    gradientAntiClockwise: degrees67Gradient,\n                    gradientClockwise: degrees22Gradient,\n                    gradientAntiClockwisePosition: 1,\n                    gradientClockwisePosition: -1,\n                };\n                break;\n            }\n            case Quadrant.East: {\n                sectorDefinition = {\n                    gradientAntiClockwise: degrees22Gradient,\n                    gradientClockwise: -1 * degrees22Gradient,\n                    gradientAntiClockwisePosition: 1,\n                    gradientClockwisePosition: 1,\n                };\n                break;\n            }\n            case Quadrant.SouthEast: {\n                sectorDefinition = {\n                    gradientAntiClockwise: -1 * degrees22Gradient,\n                    gradientClockwise: -1 * degrees67Gradient,\n                    gradientAntiClockwisePosition: -1,\n                    gradientClockwisePosition: 1,\n                };\n                break;\n            }\n            case Quadrant.South: {\n                sectorDefinition = {\n                    gradientAntiClockwise: -1 * degrees67Gradient,\n                    gradientClockwise: degrees67Gradient,\n                    gradientAntiClockwisePosition: -1,\n                    gradientClockwisePosition: 1,\n                };\n                break;\n            }\n            case Quadrant.SouthWest: {\n                sectorDefinition = {\n                    gradientAntiClockwise: degrees67Gradient,\n                    gradientClockwise: degrees22Gradient,\n                    gradientAntiClockwisePosition: -1,\n                    gradientClockwisePosition: 1,\n                };\n                break;\n            }\n            case Quadrant.West: {\n                sectorDefinition = {\n                    gradientAntiClockwise: degrees22Gradient,\n                    gradientClockwise: -1 * degrees22Gradient,\n                    gradientAntiClockwisePosition: -1,\n                    gradientClockwisePosition: -1,\n                };\n                break;\n            }\n            case Quadrant.NorthWest: {\n                sectorDefinition = {\n                    gradientAntiClockwise: -1 * degrees22Gradient,\n                    gradientClockwise: -1 * degrees67Gradient,\n                    gradientAntiClockwisePosition: 1,\n                    gradientClockwisePosition: -1,\n                };\n                break;\n            }\n            default: {\n                throw new Error(\"Invalid quadrant\");\n            }\n        }\n        return sectorDefinition;\n    }\n\n    public static IsPointInSector(x: number, y: number, sectorDefinition: SectorDefinition): boolean {\n        // 0,0 is never included in the sector, no matter what.\n        if (x > -0.5 && x < 0.5 && y > -0.5 && y < 0.5) {\n            return false;\n        }\n\n        // To see if we need to exclude thepoints for the wedge, we calculate what the x value along the\n        // two lines of the wedge are to match the current y. The x should be between them \n        const intercept1x = y / sectorDefinition.gradientAntiClockwise;\n        const intercept2x = y / sectorDefinition.gradientClockwise;\n\n        // the gradientAntiClockwisePosition and gradientClockwisePosition are adjsutments to account for\n        // needing to be on the left or the right of the line\n        return (x * sectorDefinition.gradientAntiClockwisePosition > intercept1x * sectorDefinition.gradientAntiClockwisePosition) && \n            (x * sectorDefinition.gradientClockwisePosition > intercept2x * sectorDefinition.gradientClockwisePosition);\n    }\n}\n","import {CalibrationTest} from \"./calibration/CalibrationTest\";\n\nimport {ColorConverter} from \"cie-colorconverter\";\n\nconst x=0.403;\nconst y=0.442;\n\nconst Y=0.5;\nconst X=Y/y*x;\nconst Z=Y/y*(1-x-y);\n    \nconst converter = new ColorConverter();\n\nconverter.RefWhite = \"D65\";\nconverter.GammaModel=\"sRGB\";\n\nconst  Luv=converter.XYZ_to_Luv([X, Y, Z]);\n\nconsole.count(`Luv=[${Luv[0]}, ${Luv[1]}, ${Luv[2]}], u'=${4*X/(X+15*Y+3*Z)} v'=${9*Y/(X+15*Y+3*Z)}`);\n\n\nconst calibrationHost=document.querySelector<HTMLDivElement>(\"#canvasHost\");\nif (calibrationHost===null) {\n    throw new Error(\"Can't find canvashost\");\n}\n\nconst tester=new CalibrationTest(calibrationHost,[50, 22.294886634339058, 80.86387581452101], [50, -120, 25]);\nconst promise=tester.getCalibrationResult();\n// eslint-disable-next-line no-alert\npromise.then((result)=>{alert(`You ${result?\"have\":\"haven't\"} clicked on the gap`);}); \nconsole.log(\"foo\");\n","import type { NumericTriple } from \"cie-colorconverter/dist/Matrix\";\nimport { CalibrationImage } from \"./CalibrationImage\";\nimport { setupCalibration } from \"./CalibrationSetup\";\nimport { Quadrant, SectorUtilities } from \"./SectorUtilities\";\n\nexport class CalibrationTest {\n    private readonly canvas: HTMLCanvasElement;\n    private readonly parentDiv: HTMLDivElement;\n    private readonly container: HTMLDivElement;\n\n    private readonly calibrationImage: CalibrationImage;\n    private lastTime: number;\n\n    private readonly baseLuv: NumericTriple;\n    private readonly testLuv: NumericTriple;\n\n    private readonly quadrant: Quadrant;\n\n    private animationRunning: boolean;\n\n    public constructor(parentDiv: HTMLDivElement, baseLuv: NumericTriple, testLuv: NumericTriple) {\n        this.parentDiv = parentDiv;\n\n        this.container = document.createElement(\"div\");\n        this.parentDiv.appendChild(this.container);\n        this.container.style.background = \"#000000\";\n        this.container.style.width = \"100%\";\n        this.container.style.height = \"100%\";\n        this.container.style.alignItems = \"center\";\n        this.container.style.justifyContent = \"center\";\n        this.container.style.display = \"flex\";\n\n        this.canvas = document.createElement(\"canvas\");\n        this.canvas.style.margin = \"auto\";\n        this.container.appendChild(this.canvas);\n\n        this.calibrationImage = new CalibrationImage(this.canvas);\n\n        this.baseLuv = baseLuv;\n        this.testLuv = testLuv;\n\n        this.lastTime = 0;\n\n        let quadrantSelector = Math.random();\n\n        // to make sure we have equal chances of each quadrant, we need to exclude 1\n        while (quadrantSelector === 1) {\n            quadrantSelector = Math.random();\n        }\n        if (quadrantSelector < 0.125) {\n            this.quadrant = Quadrant.North;\n        }\n        else if (quadrantSelector < 0.25) {\n            this.quadrant = Quadrant.NorthEast;\n        }\n        else if (quadrantSelector < 0.375) {\n            this.quadrant = Quadrant.East;\n        }\n        else if (quadrantSelector < 0.5) {\n            this.quadrant = Quadrant.SouthEast;\n        }\n        else if (quadrantSelector < 0.625) {\n            this.quadrant = Quadrant.South;\n        }\n        else if (quadrantSelector < 0.75) {\n            this.quadrant = Quadrant.SouthWest;\n        }\n        else if (quadrantSelector < 0.875) {\n            this.quadrant = Quadrant.West;\n        }\n        else {\n            this.quadrant = Quadrant.NorthWest;\n        }\n\n        this.animationRunning = false;\n    }\n\n    // eslint-disable-next-line require-await\n    public async getCalibrationResult(): Promise<boolean> {\n        this.animationRunning = true;\n        window.requestAnimationFrame((time: number) => { this.animate(time); });\n\n        return new Promise<boolean>((resolve) => {\n            this.canvas.addEventListener(\"click\", (event) => {\n                this.animationRunning = false;\n\n                // convert the co-ordinate system from origin at top left, y increasing down to centered origin\n                const x=event.offsetX-this.calibrationImage.originX;\n                const y=this.calibrationImage.totalY-event.offsetY-this.calibrationImage.originY;\n                const sectorDefinition = SectorUtilities.GetSectorDefinition(this.quadrant);\n                const correctClick = SectorUtilities.IsPointInSector(x,y,sectorDefinition);\n                console.log(`OffsetX=${event.offsetX}, OffsetY=${event.offsetY}, X=${x}, Y=${y}, correct=${correctClick?\"true\":\"false\"}`);\n                resolve(correctClick);\n            }, { once: true });\n        });\n    }\n\n    public animate(time: number): void {\n        if (this.animationRunning) {\n            if (time - this.lastTime > 50) {\n                const generatedGrid = setupCalibration(this.baseLuv, this.testLuv, this.quadrant);\n                this.calibrationImage.initialiseCanvas(generatedGrid);\n                this.lastTime = time;\n            }\n            window.requestAnimationFrame((newTime: number) => { this.animate(newTime); });\n        }\n    }\n}","import type { NumericTriple } from \"cie-colorconverter/dist/Matrix\";\nimport { CalibrationGrid } from \"./CalibrationGrid\";\nimport { ColorConverter } from \"cie-colorconverter\";\nimport type { Quadrant } from \"./SectorUtilities\";\nimport { SectorUtilities } from \"./SectorUtilities\"; // eslint-disable-line no-duplicate-imports\n\n\nexport function setupCalibration(baseLuv: NumericTriple, testLuv: NumericTriple, clearedQuadrant: Quadrant): CalibrationGrid {\n    const sectorDefinition = SectorUtilities.GetSectorDefinition(clearedQuadrant);\n\n    const calibrationGrid = new CalibrationGrid();\n\n    const converter = new ColorConverter();\n\n    converter.RefWhite = \"D65\";\n    converter.GammaModel=\"sRGB\";\n\n    for (let x = -25; x <= 25; x++) {\n        for (let y = -25; y <= 25; y++) {\n            // To see if points are in the circle, use the formula for a circle: x^2+y^2=radius^2,\n            // and see if the radius falls into the one that we want. Only calculate it once...\n            const circleRadius = Math.sqrt(x ** 2 + y ** 2);\n\n\n            const luminanceVariationBound = 0.5;\n            const luminanceVariation = (Math.random() * luminanceVariationBound - luminanceVariationBound / 2) + 1;\n\n            // Check if we need to draw a colour point, or a background point. We want to draw\n            // a colour point, on the circle, unless it's also part of the empty wedge.\n            if ((circleRadius > 13.5 && circleRadius <= 20.5) && !SectorUtilities.IsPointInSector(x, y, sectorDefinition)) {\n                calibrationGrid.setColourByXY(x, y, converter.Luv_to_RGB([testLuv[0] * luminanceVariation, testLuv[1], testLuv[2]]));\n            }\n            else {\n                calibrationGrid.setColourByXY(x, y, converter.Luv_to_RGB([baseLuv[0] * luminanceVariation, baseLuv[1], baseLuv[2]]));\n            }\n        }\n    }\n\n    return calibrationGrid;\n}"],"names":["$cebdcfa7b24fbf68$export$476dd2859336a8e0","calibrationCanvas","this","originX","originY","totalX","totalY","width","height","style","backgroundColor","myContext","getContext","Error","context","globalCompositeOperation","initialiseCanvas","calibrationGrid","column","row","drawCircle","getColourByColumnRow","color","drawX","drawY","fillStyle","fillRect","$f3ea4953acbff4fb$export$8760d770835b9c99","grid","rowArray","push","setColourByXY","x","y","colour","getColourByXY","setColourByColumnRow","newRow","Object","defineProperty","$1b61548c3bc492dd$exports","value","ColorConverter","$5ac05e920f827839$exports","Matrix","$5ac05e920f827839$var$Matrix","transpose","A","_a","n","length","m","A_t","$5ac05e920f827839$var$Identity_3x3","i","j","inv","res","a","b","c","d","e","f","h","det","detInv","multiply_3x3_times_triple","g","t","u","v","multiply_triple_times_3x3","multiply_3x3_times_3x3","B","k","l","o","p","q","r","$162cd165a318789c$export$1488549f1216011d","Quadrant","RefWhite","RgbModel","GammaModel","Adaptation","kE","kK","Mtx_RefWhite","Mtx_RefWhiteRGB","GammaRGB","index","Gamma","toString","Mtx_RGB2XYZ","xr","yr","xg","yg","xb","yb","X_r","Z_r","X_g","Z_g","X_b","Z_b","RW_RGB","X_W","Y_W","Z_W","S_r","S_g","S_b","MtxAdp","compand","linear","G","Math","pow","sign","inverse_compand","companded","XYZ_to_RGB","XYZ","XYZd","As","Bs","Cs","Ad","Bd","Cd","map","RGB_to_XYZ","RGB","Lab_to_XYZ","Lab","L","f_y","f_x","f_z","x_r","y_r","z_r","XYZ_to_Lab","X","Y","Z","Lab_to_RGB","RGB_to_Lab","xyY_to_XYZ","xyY","XYZ_to_xyY","Den","RW_X","RW_Y","RW_Z","RW_Den","Lab_to_LCHab","H","PI","atan2","sqrt","LCHab_to_Lab","LCH","C","cos","sin","XYZ_to_LCHab","XYZ_to_Luv","Y_r","up","vp","urp","vrp","XYZ_to_LCHuv","Luv_to_LCHuv","Luv","xyY_to_Lab","xyY_to_LCHab","xyY_to_Luv","xyY_to_LCHuv","xyY_to_RGB","Lab_to_xyY","Lab_to_Luv","Lab_to_LCHuv","LCHab_to_XYZ","LCHab_to_xyY","LCHab_to_Luv","LCHab_to_LCHuv","LCHab_to_RGB","Luv_to_XYZ","Luv_to_xyY","Luv_to_Lab","Luv_to_LCHab","Luv_to_RGB","LCHuv_to_Luv","LCHuv_to_XYZ","LCHuv_to_xyY","LCHuv_to_Lab","LCHuv_to_LCHab","LCHuv_to_RGB","RGB_to_xyY","RGB_to_LCHab","RGB_to_Luv","RGB_to_LCHuv","$162cd165a318789c$export$a61df2fb322b941b","quadrant","degrees22Gradient","degrees67Gradient","sectorDefinition","North","gradientAntiClockwise","gradientClockwise","gradientAntiClockwisePosition","gradientClockwisePosition","NorthEast","East","SouthEast","South","SouthWest","West","NorthWest","intercept1x","intercept2x","$f5f9fafac395f34f$var$converter","$f5f9fafac395f34f$var$Luv","$f5f9fafac395f34f$var$Y","console","count","$f5f9fafac395f34f$var$calibrationHost","document","querySelector","parentDiv","baseLuv","testLuv","container","createElement","appendChild","background","alignItems","justifyContent","display","canvas","margin","calibrationImage","lastTime","quadrantSelector","random","animationRunning","window","requestAnimationFrame","time","animate","Promise","resolve","addEventListener","event","offsetX","offsetY","GetSectorDefinition","correctClick","IsPointInSector","log","once","generatedGrid","clearedQuadrant","converter","circleRadius","luminanceVariationBound","luminanceVariation","$ad730f917d95051c$export$de0005030548406f","newTime","getCalibrationResult","then","result","alert"],"version":3,"file":"index.b09c6a8b.js.map"}